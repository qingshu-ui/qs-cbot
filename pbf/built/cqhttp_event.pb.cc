// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cqhttp_event.proto

#include "cqhttp_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cqhttp {
PROTOBUF_CONSTEXPR BaseEvent::BaseEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.request_type_)*/0
  , /*decltype(_impl_.meta_event_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseEventDefaultTypeInternal() {}
  union {
    BaseEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseEventDefaultTypeInternal _BaseEvent_default_instance_;
PROTOBUF_CONSTEXPR PrivateMessageEvent::PrivateMessageEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.raw_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/nullptr
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.sub_type_)*/0
  , /*decltype(_impl_.message_id_)*/0
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.font_)*/0
  , /*decltype(_impl_.temp_source_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMessageEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMessageEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMessageEventDefaultTypeInternal() {}
  union {
    PrivateMessageEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMessageEventDefaultTypeInternal _PrivateMessageEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupMessageEvent::GroupMessageEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.raw_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/nullptr
  , /*decltype(_impl_.anonymous_)*/nullptr
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.sub_type_)*/0
  , /*decltype(_impl_.message_id_)*/0
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.font_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupMessageEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupMessageEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupMessageEventDefaultTypeInternal() {}
  union {
    GroupMessageEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupMessageEventDefaultTypeInternal _GroupMessageEvent_default_instance_;
PROTOBUF_CONSTEXPR FriendRecallEvent::FriendRecallEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.message_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendRecallEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendRecallEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendRecallEventDefaultTypeInternal() {}
  union {
    FriendRecallEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendRecallEventDefaultTypeInternal _FriendRecallEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupRecallEvent::GroupRecallEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.operator_id_)*/int64_t{0}
  , /*decltype(_impl_.message_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupRecallEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupRecallEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupRecallEventDefaultTypeInternal() {}
  union {
    GroupRecallEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupRecallEventDefaultTypeInternal _GroupRecallEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupIncreaseEvent::GroupIncreaseEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.operator_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupIncreaseEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupIncreaseEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupIncreaseEventDefaultTypeInternal() {}
  union {
    GroupIncreaseEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupIncreaseEventDefaultTypeInternal _GroupIncreaseEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupDecreaseEvent::GroupDecreaseEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.operator_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupDecreaseEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupDecreaseEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupDecreaseEventDefaultTypeInternal() {}
  union {
    GroupDecreaseEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupDecreaseEventDefaultTypeInternal _GroupDecreaseEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupAdminChangeEvent::GroupAdminChangeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupAdminChangeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupAdminChangeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupAdminChangeEventDefaultTypeInternal() {}
  union {
    GroupAdminChangeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupAdminChangeEventDefaultTypeInternal _GroupAdminChangeEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupFileUploadEvent::GroupFileUploadEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_)*/nullptr
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupFileUploadEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupFileUploadEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupFileUploadEventDefaultTypeInternal() {}
  union {
    GroupFileUploadEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupFileUploadEventDefaultTypeInternal _GroupFileUploadEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupBanEvent::GroupBanEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.operator_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupBanEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupBanEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupBanEventDefaultTypeInternal() {}
  union {
    GroupBanEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupBanEventDefaultTypeInternal _GroupBanEvent_default_instance_;
PROTOBUF_CONSTEXPR FriendAddEvent::FriendAddEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendAddEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendAddEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendAddEventDefaultTypeInternal() {}
  union {
    FriendAddEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendAddEventDefaultTypeInternal _FriendAddEvent_default_instance_;
PROTOBUF_CONSTEXPR NotifyEvent::NotifyEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.honor_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.sender_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.target_id_)*/int64_t{0}
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.sub_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyEventDefaultTypeInternal() {}
  union {
    NotifyEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyEventDefaultTypeInternal _NotifyEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupCardChangedEvent::GroupCardChangedEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.card_new_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.card_old_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupCardChangedEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupCardChangedEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupCardChangedEventDefaultTypeInternal() {}
  union {
    GroupCardChangedEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupCardChangedEventDefaultTypeInternal _GroupCardChangedEvent_default_instance_;
PROTOBUF_CONSTEXPR ReceviedOfflineFileEvent::ReceviedOfflineFileEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_)*/nullptr
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReceviedOfflineFileEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceviedOfflineFileEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceviedOfflineFileEventDefaultTypeInternal() {}
  union {
    ReceviedOfflineFileEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceviedOfflineFileEventDefaultTypeInternal _ReceviedOfflineFileEvent_default_instance_;
PROTOBUF_CONSTEXPR ClientChangedEvent::ClientChangedEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_)*/nullptr
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.online_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientChangedEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientChangedEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientChangedEventDefaultTypeInternal() {}
  union {
    ClientChangedEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientChangedEventDefaultTypeInternal _ClientChangedEvent_default_instance_;
PROTOBUF_CONSTEXPR EssenceMsgChangedEvent::EssenceMsgChangedEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.notice_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.sender_id_)*/int64_t{0}
  , /*decltype(_impl_.operator_id_)*/int64_t{0}
  , /*decltype(_impl_.message_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EssenceMsgChangedEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EssenceMsgChangedEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EssenceMsgChangedEventDefaultTypeInternal() {}
  union {
    EssenceMsgChangedEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EssenceMsgChangedEventDefaultTypeInternal _EssenceMsgChangedEvent_default_instance_;
PROTOBUF_CONSTEXPR FriendAddRequestEvent::FriendAddRequestEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.request_type_)*/0
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendAddRequestEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendAddRequestEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendAddRequestEventDefaultTypeInternal() {}
  union {
    FriendAddRequestEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendAddRequestEventDefaultTypeInternal _FriendAddRequestEvent_default_instance_;
PROTOBUF_CONSTEXPR GroupAddRequestEvent::GroupAddRequestEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.request_type_)*/0
  , /*decltype(_impl_.group_id_)*/int64_t{0}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupAddRequestEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupAddRequestEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupAddRequestEventDefaultTypeInternal() {}
  union {
    GroupAddRequestEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupAddRequestEventDefaultTypeInternal _GroupAddRequestEvent_default_instance_;
PROTOBUF_CONSTEXPR MetaEvent::MetaEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.meta_event_type_)*/0
  , /*decltype(_impl_.interval_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaEventDefaultTypeInternal() {}
  union {
    MetaEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaEventDefaultTypeInternal _MetaEvent_default_instance_;
PROTOBUF_CONSTEXPR LifecycleEvent::LifecycleEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.self_id_)*/int64_t{0}
  , /*decltype(_impl_.post_type_)*/0
  , /*decltype(_impl_.meta_event_type_)*/0
  , /*decltype(_impl_.interval_)*/int64_t{0}
  , /*decltype(_impl_.sub_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LifecycleEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LifecycleEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LifecycleEventDefaultTypeInternal() {}
  union {
    LifecycleEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LifecycleEventDefaultTypeInternal _LifecycleEvent_default_instance_;
}  // namespace cqhttp
static ::_pb::Metadata file_level_metadata_cqhttp_5fevent_2eproto[20];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cqhttp_5fevent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cqhttp_5fevent_2eproto = nullptr;

const uint32_t TableStruct_cqhttp_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::BaseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::BaseEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::BaseEvent, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::BaseEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::BaseEvent, _impl_.request_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::BaseEvent, _impl_.meta_event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.raw_message_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::PrivateMessageEvent, _impl_.temp_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.raw_message_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupMessageEvent, _impl_.anonymous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendRecallEvent, _impl_.message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.operator_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupRecallEvent, _impl_.message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.operator_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupIncreaseEvent, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.operator_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupDecreaseEvent, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAdminChangeEvent, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFileUploadEvent, _impl_.file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.operator_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupBanEvent, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddEvent, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.honor_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::NotifyEvent, _impl_.title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.card_new_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupCardChangedEvent, _impl_.card_old_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ReceviedOfflineFileEvent, _impl_.file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ClientChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ClientChangedEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ClientChangedEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ClientChangedEvent, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ClientChangedEvent, _impl_.online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.notice_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.operator_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::EssenceMsgChangedEvent, _impl_.message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.request_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::FriendAddRequestEvent, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.request_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupAddRequestEvent, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _impl_.meta_event_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::MetaEvent, _impl_.interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.self_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.post_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.meta_event_type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::LifecycleEvent, _impl_.sub_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cqhttp::BaseEvent)},
  { 11, -1, -1, sizeof(::cqhttp::PrivateMessageEvent)},
  { 29, -1, -1, sizeof(::cqhttp::GroupMessageEvent)},
  { 48, -1, -1, sizeof(::cqhttp::FriendRecallEvent)},
  { 60, -1, -1, sizeof(::cqhttp::GroupRecallEvent)},
  { 74, -1, -1, sizeof(::cqhttp::GroupIncreaseEvent)},
  { 88, -1, -1, sizeof(::cqhttp::GroupDecreaseEvent)},
  { 102, -1, -1, sizeof(::cqhttp::GroupAdminChangeEvent)},
  { 115, -1, -1, sizeof(::cqhttp::GroupFileUploadEvent)},
  { 128, -1, -1, sizeof(::cqhttp::GroupBanEvent)},
  { 143, -1, -1, sizeof(::cqhttp::FriendAddEvent)},
  { 154, -1, -1, sizeof(::cqhttp::NotifyEvent)},
  { 171, -1, -1, sizeof(::cqhttp::GroupCardChangedEvent)},
  { 185, -1, -1, sizeof(::cqhttp::ReceviedOfflineFileEvent)},
  { 197, -1, -1, sizeof(::cqhttp::ClientChangedEvent)},
  { 207, -1, -1, sizeof(::cqhttp::EssenceMsgChangedEvent)},
  { 222, -1, -1, sizeof(::cqhttp::FriendAddRequestEvent)},
  { 235, -1, -1, sizeof(::cqhttp::GroupAddRequestEvent)},
  { 250, -1, -1, sizeof(::cqhttp::MetaEvent)},
  { 262, -1, -1, sizeof(::cqhttp::LifecycleEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cqhttp::_BaseEvent_default_instance_._instance,
  &::cqhttp::_PrivateMessageEvent_default_instance_._instance,
  &::cqhttp::_GroupMessageEvent_default_instance_._instance,
  &::cqhttp::_FriendRecallEvent_default_instance_._instance,
  &::cqhttp::_GroupRecallEvent_default_instance_._instance,
  &::cqhttp::_GroupIncreaseEvent_default_instance_._instance,
  &::cqhttp::_GroupDecreaseEvent_default_instance_._instance,
  &::cqhttp::_GroupAdminChangeEvent_default_instance_._instance,
  &::cqhttp::_GroupFileUploadEvent_default_instance_._instance,
  &::cqhttp::_GroupBanEvent_default_instance_._instance,
  &::cqhttp::_FriendAddEvent_default_instance_._instance,
  &::cqhttp::_NotifyEvent_default_instance_._instance,
  &::cqhttp::_GroupCardChangedEvent_default_instance_._instance,
  &::cqhttp::_ReceviedOfflineFileEvent_default_instance_._instance,
  &::cqhttp::_ClientChangedEvent_default_instance_._instance,
  &::cqhttp::_EssenceMsgChangedEvent_default_instance_._instance,
  &::cqhttp::_FriendAddRequestEvent_default_instance_._instance,
  &::cqhttp::_GroupAddRequestEvent_default_instance_._instance,
  &::cqhttp::_MetaEvent_default_instance_._instance,
  &::cqhttp::_LifecycleEvent_default_instance_._instance,
};

const char descriptor_table_protodef_cqhttp_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022cqhttp_event.proto\022\006cqhttp\032\021cqhttp_bas"
  "e.proto\"\341\001\n\tBaseEvent\022&\n\tpost_type\030\001 \001(\016"
  "2\023.cqhttp.CQHTTP_TYPE\022)\n\014message_type\030\002 "
  "\001(\0162\023.cqhttp.CQHTTP_TYPE\022(\n\013notice_type\030"
  "\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022)\n\014request_ty"
  "pe\030\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022,\n\017meta_ev"
  "ent_type\030\005 \001(\0162\023.cqhttp.CQHTTP_TYPE\"\274\002\n\023"
  "PrivateMessageEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007sel"
  "f_id\030\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.C"
  "QHTTP_TYPE\022)\n\014message_type\030\004 \001(\0162\023.cqhtt"
  "p.CQHTTP_TYPE\022%\n\010sub_type\030\005 \001(\0162\023.cqhttp"
  ".CQHTTP_TYPE\022\022\n\nmessage_id\030\006 \001(\005\022\017\n\007user"
  "_id\030\007 \001(\003\022\017\n\007message\030\010 \001(\t\022\023\n\013raw_messag"
  "e\030\t \001(\t\022\014\n\004font\030\n \001(\005\022\036\n\006sender\030\013 \001(\0132\016."
  "cqhttp.Sender\022\023\n\013temp_source\030\014 \001(\005\"\335\002\n\021G"
  "roupMessageEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_i"
  "d\030\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQHT"
  "TP_TYPE\022)\n\014message_type\030\004 \001(\0162\023.cqhttp.C"
  "QHTTP_TYPE\022%\n\010sub_type\030\005 \001(\0162\023.cqhttp.CQ"
  "HTTP_TYPE\022\022\n\nmessage_id\030\006 \001(\005\022\017\n\007user_id"
  "\030\007 \001(\003\022\017\n\007message\030\010 \001(\t\022\023\n\013raw_message\030\t"
  " \001(\t\022\014\n\004font\030\n \001(\005\022\036\n\006sender\030\013 \001(\0132\016.cqh"
  "ttp.Sender\022\020\n\010group_id\030\014 \001(\003\022$\n\tanonymou"
  "s\030\r \001(\0132\021.cqhttp.Anonymous\"\251\001\n\021FriendRec"
  "allEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022"
  "&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022"
  "(\n\013notice_type\030\004 \001(\0162\023.cqhttp.CQHTTP_TYP"
  "E\022\017\n\007user_id\030\005 \001(\003\022\022\n\nmessage_id\030\006 \001(\003\"\317"
  "\001\n\020GroupRecallEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007sel"
  "f_id\030\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.C"
  "QHTTP_TYPE\022(\n\013notice_type\030\004 \001(\0162\023.cqhttp"
  ".CQHTTP_TYPE\022\020\n\010group_id\030\005 \001(\003\022\017\n\007user_i"
  "d\030\006 \001(\003\022\023\n\013operator_id\030\007 \001(\003\022\022\n\nmessage_"
  "id\030\010 \001(\003\"\317\001\n\022GroupIncreaseEvent\022\014\n\004time\030"
  "\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tpost_type\030\003 \001("
  "\0162\023.cqhttp.CQHTTP_TYPE\022(\n\013notice_type\030\004 "
  "\001(\0162\023.cqhttp.CQHTTP_TYPE\022\020\n\010sub_type\030\005 \001"
  "(\t\022\020\n\010group_id\030\006 \001(\003\022\023\n\013operator_id\030\007 \001("
  "\003\022\017\n\007user_id\030\010 \001(\003\"\317\001\n\022GroupDecreaseEven"
  "t\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tpost"
  "_type\030\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022(\n\013noti"
  "ce_type\030\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022\020\n\010su"
  "b_type\030\005 \001(\t\022\020\n\010group_id\030\006 \001(\003\022\023\n\013operat"
  "or_id\030\007 \001(\003\022\017\n\007user_id\030\010 \001(\003\"\275\001\n\025GroupAd"
  "minChangeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030"
  "\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQHTTP"
  "_TYPE\022(\n\013notice_type\030\004 \001(\0162\023.cqhttp.CQHT"
  "TP_TYPE\022\020\n\010sub_type\030\005 \001(\t\022\020\n\010group_id\030\006 "
  "\001(\003\022\017\n\007user_id\030\007 \001(\003\"\313\001\n\024GroupFileUpload"
  "Event\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\t"
  "post_type\030\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022(\n\013"
  "notice_type\030\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022\020"
  "\n\010group_id\030\005 \001(\003\022\017\n\007user_id\030\006 \001(\003\022\037\n\004fil"
  "e\030\007 \001(\0132\021.cqhttp.GroupFile\"\334\001\n\rGroupBanE"
  "vent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tp"
  "ost_type\030\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022(\n\013n"
  "otice_type\030\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022\020\n"
  "\010sub_type\030\005 \001(\t\022\020\n\010group_id\030\006 \001(\003\022\023\n\013ope"
  "rator_id\030\007 \001(\003\022\017\n\007user_id\030\010 \001(\003\022\020\n\010durat"
  "ion\030\t \001(\003\"\222\001\n\016FriendAddEvent\022\014\n\004time\030\001 \001"
  "(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023"
  ".cqhttp.CQHTTP_TYPE\022(\n\013notice_type\030\004 \001(\016"
  "2\023.cqhttp.CQHTTP_TYPE\022\017\n\007user_id\030\005 \001(\003\"\221"
  "\002\n\013NotifyEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030"
  "\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQHTTP"
  "_TYPE\022(\n\013notice_type\030\004 \001(\0162\023.cqhttp.CQHT"
  "TP_TYPE\022%\n\010sub_type\030\005 \001(\0162\023.cqhttp.CQHTT"
  "P_TYPE\022\021\n\tsender_id\030\006 \001(\003\022\017\n\007user_id\030\007 \001"
  "(\003\022\021\n\ttarget_id\030\010 \001(\003\022\020\n\010group_id\030\t \001(\003\022"
  "\022\n\nhonor_type\030\n \001(\t\022\r\n\005title\030\013 \001(\t\"\317\001\n\025G"
  "roupCardChangedEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007se"
  "lf_id\030\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp."
  "CQHTTP_TYPE\022(\n\013notice_type\030\004 \001(\0162\023.cqhtt"
  "p.CQHTTP_TYPE\022\020\n\010group_id\030\005 \001(\003\022\017\n\007user_"
  "id\030\006 \001(\003\022\020\n\010card_new\030\007 \001(\t\022\020\n\010card_old\030\010"
  " \001(\t\"\277\001\n\030ReceviedOfflineFileEvent\022\014\n\004tim"
  "e\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tpost_type\030\003 "
  "\001(\0162\023.cqhttp.CQHTTP_TYPE\022(\n\013notice_type\030"
  "\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022\017\n\007user_id\030\005 "
  "\001(\003\022!\n\004file\030\006 \001(\0132\023.cqhttp.OfflineFile\"\226"
  "\001\n\022ClientChangedEvent\022&\n\tpost_type\030\001 \001(\016"
  "2\023.cqhttp.CQHTTP_TYPE\022(\n\013notice_type\030\002 \001"
  "(\0162\023.cqhttp.CQHTTP_TYPE\022\036\n\006client\030\003 \001(\0132"
  "\016.cqhttp.Device\022\016\n\006online\030\004 \001(\010\"\351\001\n\026Esse"
  "nceMsgChangedEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self"
  "_id\030\002 \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQ"
  "HTTP_TYPE\022(\n\013notice_type\030\004 \001(\0162\023.cqhttp."
  "CQHTTP_TYPE\022\020\n\010sub_type\030\005 \001(\t\022\020\n\010group_i"
  "d\030\006 \001(\003\022\021\n\tsender_id\030\007 \001(\003\022\023\n\013operator_i"
  "d\030\010 \001(\003\022\022\n\nmessage_id\030\t \001(\005\"\271\001\n\025FriendAd"
  "dRequestEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002"
  " \001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQHTTP_"
  "TYPE\022)\n\014request_type\030\004 \001(\0162\023.cqhttp.CQHT"
  "TP_TYPE\022\017\n\007user_id\030\005 \001(\003\022\017\n\007comment\030\006 \001("
  "\t\022\014\n\004flag\030\007 \001(\t\"\334\001\n\024GroupAddRequestEvent"
  "\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tpost_"
  "type\030\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022)\n\014reque"
  "st_type\030\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022\020\n\010su"
  "b_type\030\005 \001(\t\022\020\n\010group_id\030\006 \001(\003\022\017\n\007user_i"
  "d\030\007 \001(\003\022\017\n\007comment\030\010 \001(\t\022\014\n\004flag\030\t \001(\t\"\262"
  "\001\n\tMetaEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 "
  "\001(\003\022&\n\tpost_type\030\003 \001(\0162\023.cqhttp.CQHTTP_T"
  "YPE\022,\n\017meta_event_type\030\004 \001(\0162\023.cqhttp.CQ"
  "HTTP_TYPE\022\036\n\006status\030\005 \001(\0132\016.cqhttp.Statu"
  "s\022\020\n\010interval\030\006 \001(\003\"\336\001\n\016LifecycleEvent\022\014"
  "\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022&\n\tpost_ty"
  "pe\030\003 \001(\0162\023.cqhttp.CQHTTP_TYPE\022,\n\017meta_ev"
  "ent_type\030\004 \001(\0162\023.cqhttp.CQHTTP_TYPE\022\036\n\006s"
  "tatus\030\005 \001(\0132\016.cqhttp.Status\022\020\n\010interval\030"
  "\006 \001(\003\022%\n\010sub_type\030\007 \001(\0162\023.cqhttp.CQHTTP_"
  "TYPEb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cqhttp_5fevent_2eproto_deps[1] = {
  &::descriptor_table_cqhttp_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_cqhttp_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cqhttp_5fevent_2eproto = {
    false, false, 4412, descriptor_table_protodef_cqhttp_5fevent_2eproto,
    "cqhttp_event.proto",
    &descriptor_table_cqhttp_5fevent_2eproto_once, descriptor_table_cqhttp_5fevent_2eproto_deps, 1, 20,
    schemas, file_default_instances, TableStruct_cqhttp_5fevent_2eproto::offsets,
    file_level_metadata_cqhttp_5fevent_2eproto, file_level_enum_descriptors_cqhttp_5fevent_2eproto,
    file_level_service_descriptors_cqhttp_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cqhttp_5fevent_2eproto_getter() {
  return &descriptor_table_cqhttp_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cqhttp_5fevent_2eproto(&descriptor_table_cqhttp_5fevent_2eproto);
namespace cqhttp {

// ===================================================================

class BaseEvent::_Internal {
 public:
};

BaseEvent::BaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.BaseEvent)
}
BaseEvent::BaseEvent(const BaseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.post_type_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.request_type_){}
    , decltype(_impl_.meta_event_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.post_type_, &from._impl_.post_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.meta_event_type_) -
    reinterpret_cast<char*>(&_impl_.post_type_)) + sizeof(_impl_.meta_event_type_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.BaseEvent)
}

inline void BaseEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.post_type_){0}
    , decltype(_impl_.message_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.request_type_){0}
    , decltype(_impl_.meta_event_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BaseEvent::~BaseEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.BaseEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BaseEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.BaseEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.post_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.meta_event_type_) -
      reinterpret_cast<char*>(&_impl_.post_type_)) + sizeof(_impl_.meta_event_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cqhttp.CQHTTP_TYPE post_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE request_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE meta_event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_meta_event_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.BaseEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cqhttp.CQHTTP_TYPE post_type = 1;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE message_type = 2;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_message_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 3;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notice_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  if (this->_internal_request_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_request_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE meta_event_type = 5;
  if (this->_internal_meta_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_meta_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.BaseEvent)
  return target;
}

size_t BaseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.BaseEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.CQHTTP_TYPE post_type = 1;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE message_type = 2;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 3;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  if (this->_internal_request_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  // .cqhttp.CQHTTP_TYPE meta_event_type = 5;
  if (this->_internal_meta_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_meta_event_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseEvent::GetClassData() const { return &_class_data_; }


void BaseEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseEvent*>(&to_msg);
  auto& from = static_cast<const BaseEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.BaseEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_request_type() != 0) {
    _this->_internal_set_request_type(from._internal_request_type());
  }
  if (from._internal_meta_event_type() != 0) {
    _this->_internal_set_meta_event_type(from._internal_meta_event_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseEvent::CopyFrom(const BaseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.BaseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseEvent::IsInitialized() const {
  return true;
}

void BaseEvent::InternalSwap(BaseEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseEvent, _impl_.meta_event_type_)
      + sizeof(BaseEvent::_impl_.meta_event_type_)
      - PROTOBUF_FIELD_OFFSET(BaseEvent, _impl_.post_type_)>(
          reinterpret_cast<char*>(&_impl_.post_type_),
          reinterpret_cast<char*>(&other->_impl_.post_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[0]);
}

// ===================================================================

class PrivateMessageEvent::_Internal {
 public:
  static const ::cqhttp::Sender& sender(const PrivateMessageEvent* msg);
};

const ::cqhttp::Sender&
PrivateMessageEvent::_Internal::sender(const PrivateMessageEvent* msg) {
  return *msg->_impl_.sender_;
}
void PrivateMessageEvent::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
PrivateMessageEvent::PrivateMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.PrivateMessageEvent)
}
PrivateMessageEvent::PrivateMessageEvent(const PrivateMessageEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrivateMessageEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.raw_message_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.sub_type_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.font_){}
    , decltype(_impl_.temp_source_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.raw_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_message().empty()) {
    _this->_impl_.raw_message_.Set(from._internal_raw_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    _this->_impl_.sender_ = new ::cqhttp::Sender(*from._impl_.sender_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.temp_source_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.temp_source_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.PrivateMessageEvent)
}

inline void PrivateMessageEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.raw_message_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.message_type_){0}
    , decltype(_impl_.sub_type_){0}
    , decltype(_impl_.message_id_){0}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.font_){0}
    , decltype(_impl_.temp_source_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrivateMessageEvent::~PrivateMessageEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.PrivateMessageEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMessageEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.raw_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sender_;
}

void PrivateMessageEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.PrivateMessageEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.raw_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.temp_source_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.temp_source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateMessageEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE message_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sub_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 message_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.PrivateMessageEvent.message"));
        } else
          goto handle_unusual;
        continue;
      // string raw_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_raw_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.PrivateMessageEvent.raw_message"));
        } else
          goto handle_unusual;
        continue;
      // int32 font = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Sender sender = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 temp_source = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.temp_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMessageEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.PrivateMessageEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE message_type = 4;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_message_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sub_type(), target);
  }

  // int32 message_id = 6;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_message_id(), target);
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  // string message = 8;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.PrivateMessageEvent.message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message(), target);
  }

  // string raw_message = 9;
  if (!this->_internal_raw_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_message().data(), static_cast<int>(this->_internal_raw_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.PrivateMessageEvent.raw_message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_raw_message(), target);
  }

  // int32 font = 10;
  if (this->_internal_font() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_font(), target);
  }

  // .cqhttp.Sender sender = 11;
  if (this->_internal_has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  // int32 temp_source = 12;
  if (this->_internal_temp_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_temp_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.PrivateMessageEvent)
  return target;
}

size_t PrivateMessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.PrivateMessageEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 8;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string raw_message = 9;
  if (!this->_internal_raw_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_message());
  }

  // .cqhttp.Sender sender = 11;
  if (this->_internal_has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE message_type = 4;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  // int32 message_id = 6;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_id());
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 font = 10;
  if (this->_internal_font() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_font());
  }

  // int32 temp_source = 12;
  if (this->_internal_temp_source() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_temp_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateMessageEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrivateMessageEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateMessageEvent::GetClassData() const { return &_class_data_; }


void PrivateMessageEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrivateMessageEvent*>(&to_msg);
  auto& from = static_cast<const PrivateMessageEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.PrivateMessageEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_raw_message().empty()) {
    _this->_internal_set_raw_message(from._internal_raw_message());
  }
  if (from._internal_has_sender()) {
    _this->_internal_mutable_sender()->::cqhttp::Sender::MergeFrom(
        from._internal_sender());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_font() != 0) {
    _this->_internal_set_font(from._internal_font());
  }
  if (from._internal_temp_source() != 0) {
    _this->_internal_set_temp_source(from._internal_temp_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateMessageEvent::CopyFrom(const PrivateMessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.PrivateMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMessageEvent::IsInitialized() const {
  return true;
}

void PrivateMessageEvent::InternalSwap(PrivateMessageEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_message_, lhs_arena,
      &other->_impl_.raw_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMessageEvent, _impl_.temp_source_)
      + sizeof(PrivateMessageEvent::_impl_.temp_source_)
      - PROTOBUF_FIELD_OFFSET(PrivateMessageEvent, _impl_.sender_)>(
          reinterpret_cast<char*>(&_impl_.sender_),
          reinterpret_cast<char*>(&other->_impl_.sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateMessageEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[1]);
}

// ===================================================================

class GroupMessageEvent::_Internal {
 public:
  static const ::cqhttp::Sender& sender(const GroupMessageEvent* msg);
  static const ::cqhttp::Anonymous& anonymous(const GroupMessageEvent* msg);
};

const ::cqhttp::Sender&
GroupMessageEvent::_Internal::sender(const GroupMessageEvent* msg) {
  return *msg->_impl_.sender_;
}
const ::cqhttp::Anonymous&
GroupMessageEvent::_Internal::anonymous(const GroupMessageEvent* msg) {
  return *msg->_impl_.anonymous_;
}
void GroupMessageEvent::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
void GroupMessageEvent::clear_anonymous() {
  if (GetArenaForAllocation() == nullptr && _impl_.anonymous_ != nullptr) {
    delete _impl_.anonymous_;
  }
  _impl_.anonymous_ = nullptr;
}
GroupMessageEvent::GroupMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupMessageEvent)
}
GroupMessageEvent::GroupMessageEvent(const GroupMessageEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupMessageEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.raw_message_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.anonymous_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.sub_type_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.font_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.raw_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_message().empty()) {
    _this->_impl_.raw_message_.Set(from._internal_raw_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    _this->_impl_.sender_ = new ::cqhttp::Sender(*from._impl_.sender_);
  }
  if (from._internal_has_anonymous()) {
    _this->_impl_.anonymous_ = new ::cqhttp::Anonymous(*from._impl_.anonymous_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.font_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.font_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupMessageEvent)
}

inline void GroupMessageEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.raw_message_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.anonymous_){nullptr}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.message_type_){0}
    , decltype(_impl_.sub_type_){0}
    , decltype(_impl_.message_id_){0}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.font_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupMessageEvent::~GroupMessageEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupMessageEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupMessageEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.raw_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sender_;
  if (this != internal_default_instance()) delete _impl_.anonymous_;
}

void GroupMessageEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupMessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupMessageEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.raw_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anonymous_ != nullptr) {
    delete _impl_.anonymous_;
  }
  _impl_.anonymous_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.font_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.font_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMessageEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE message_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sub_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 message_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupMessageEvent.message"));
        } else
          goto handle_unusual;
        continue;
      // string raw_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_raw_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupMessageEvent.raw_message"));
        } else
          goto handle_unusual;
        continue;
      // int32 font = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Sender sender = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Anonymous anonymous = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_anonymous(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupMessageEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupMessageEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE message_type = 4;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_message_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sub_type(), target);
  }

  // int32 message_id = 6;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_message_id(), target);
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  // string message = 8;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupMessageEvent.message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message(), target);
  }

  // string raw_message = 9;
  if (!this->_internal_raw_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_message().data(), static_cast<int>(this->_internal_raw_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupMessageEvent.raw_message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_raw_message(), target);
  }

  // int32 font = 10;
  if (this->_internal_font() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_font(), target);
  }

  // .cqhttp.Sender sender = 11;
  if (this->_internal_has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  // int64 group_id = 12;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_group_id(), target);
  }

  // .cqhttp.Anonymous anonymous = 13;
  if (this->_internal_has_anonymous()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::anonymous(this),
        _Internal::anonymous(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupMessageEvent)
  return target;
}

size_t GroupMessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupMessageEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 8;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string raw_message = 9;
  if (!this->_internal_raw_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_message());
  }

  // .cqhttp.Sender sender = 11;
  if (this->_internal_has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_);
  }

  // .cqhttp.Anonymous anonymous = 13;
  if (this->_internal_has_anonymous()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anonymous_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE message_type = 4;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  // int32 message_id = 6;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_id());
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 group_id = 12;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int32 font = 10;
  if (this->_internal_font() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_font());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMessageEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupMessageEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMessageEvent::GetClassData() const { return &_class_data_; }


void GroupMessageEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupMessageEvent*>(&to_msg);
  auto& from = static_cast<const GroupMessageEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupMessageEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_raw_message().empty()) {
    _this->_internal_set_raw_message(from._internal_raw_message());
  }
  if (from._internal_has_sender()) {
    _this->_internal_mutable_sender()->::cqhttp::Sender::MergeFrom(
        from._internal_sender());
  }
  if (from._internal_has_anonymous()) {
    _this->_internal_mutable_anonymous()->::cqhttp::Anonymous::MergeFrom(
        from._internal_anonymous());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_font() != 0) {
    _this->_internal_set_font(from._internal_font());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMessageEvent::CopyFrom(const GroupMessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageEvent::IsInitialized() const {
  return true;
}

void GroupMessageEvent::InternalSwap(GroupMessageEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_message_, lhs_arena,
      &other->_impl_.raw_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMessageEvent, _impl_.font_)
      + sizeof(GroupMessageEvent::_impl_.font_)
      - PROTOBUF_FIELD_OFFSET(GroupMessageEvent, _impl_.sender_)>(
          reinterpret_cast<char*>(&_impl_.sender_),
          reinterpret_cast<char*>(&other->_impl_.sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMessageEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[2]);
}

// ===================================================================

class FriendRecallEvent::_Internal {
 public:
};

FriendRecallEvent::FriendRecallEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.FriendRecallEvent)
}
FriendRecallEvent::FriendRecallEvent(const FriendRecallEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendRecallEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.message_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.FriendRecallEvent)
}

inline void FriendRecallEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.message_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendRecallEvent::~FriendRecallEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.FriendRecallEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendRecallEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendRecallEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendRecallEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.FriendRecallEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRecallEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 message_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendRecallEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.FriendRecallEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  // int64 message_id = 6;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.FriendRecallEvent)
  return target;
}

size_t FriendRecallEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.FriendRecallEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 message_id = 6;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_message_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendRecallEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendRecallEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendRecallEvent::GetClassData() const { return &_class_data_; }


void FriendRecallEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendRecallEvent*>(&to_msg);
  auto& from = static_cast<const FriendRecallEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.FriendRecallEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendRecallEvent::CopyFrom(const FriendRecallEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.FriendRecallEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRecallEvent::IsInitialized() const {
  return true;
}

void FriendRecallEvent::InternalSwap(FriendRecallEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendRecallEvent, _impl_.message_id_)
      + sizeof(FriendRecallEvent::_impl_.message_id_)
      - PROTOBUF_FIELD_OFFSET(FriendRecallEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRecallEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[3]);
}

// ===================================================================

class GroupRecallEvent::_Internal {
 public:
};

GroupRecallEvent::GroupRecallEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupRecallEvent)
}
GroupRecallEvent::GroupRecallEvent(const GroupRecallEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupRecallEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.operator_id_){}
    , decltype(_impl_.message_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupRecallEvent)
}

inline void GroupRecallEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.operator_id_){int64_t{0}}
    , decltype(_impl_.message_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupRecallEvent::~GroupRecallEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupRecallEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupRecallEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GroupRecallEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupRecallEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupRecallEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupRecallEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 message_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupRecallEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupRecallEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // int64 group_id = 5;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_group_id(), target);
  }

  // int64 user_id = 6;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_user_id(), target);
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 message_id = 8;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupRecallEvent)
  return target;
}

size_t GroupRecallEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupRecallEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 5;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 user_id = 6;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_operator_id());
  }

  // int64 message_id = 8;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_message_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupRecallEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupRecallEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupRecallEvent::GetClassData() const { return &_class_data_; }


void GroupRecallEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupRecallEvent*>(&to_msg);
  auto& from = static_cast<const GroupRecallEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupRecallEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_operator_id() != 0) {
    _this->_internal_set_operator_id(from._internal_operator_id());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupRecallEvent::CopyFrom(const GroupRecallEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupRecallEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRecallEvent::IsInitialized() const {
  return true;
}

void GroupRecallEvent::InternalSwap(GroupRecallEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupRecallEvent, _impl_.message_id_)
      + sizeof(GroupRecallEvent::_impl_.message_id_)
      - PROTOBUF_FIELD_OFFSET(GroupRecallEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupRecallEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[4]);
}

// ===================================================================

class GroupIncreaseEvent::_Internal {
 public:
};

GroupIncreaseEvent::GroupIncreaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupIncreaseEvent)
}
GroupIncreaseEvent::GroupIncreaseEvent(const GroupIncreaseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupIncreaseEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.operator_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_type().empty()) {
    _this->_impl_.sub_type_.Set(from._internal_sub_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupIncreaseEvent)
}

inline void GroupIncreaseEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.operator_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupIncreaseEvent::~GroupIncreaseEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupIncreaseEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupIncreaseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_type_.Destroy();
}

void GroupIncreaseEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupIncreaseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupIncreaseEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_type_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupIncreaseEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupIncreaseEvent.sub_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupIncreaseEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupIncreaseEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupIncreaseEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 user_id = 8;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupIncreaseEvent)
  return target;
}

size_t GroupIncreaseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupIncreaseEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_operator_id());
  }

  // int64 user_id = 8;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupIncreaseEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupIncreaseEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupIncreaseEvent::GetClassData() const { return &_class_data_; }


void GroupIncreaseEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupIncreaseEvent*>(&to_msg);
  auto& from = static_cast<const GroupIncreaseEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupIncreaseEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_operator_id() != 0) {
    _this->_internal_set_operator_id(from._internal_operator_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupIncreaseEvent::CopyFrom(const GroupIncreaseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupIncreaseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupIncreaseEvent::IsInitialized() const {
  return true;
}

void GroupIncreaseEvent::InternalSwap(GroupIncreaseEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_type_, lhs_arena,
      &other->_impl_.sub_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupIncreaseEvent, _impl_.user_id_)
      + sizeof(GroupIncreaseEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupIncreaseEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupIncreaseEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[5]);
}

// ===================================================================

class GroupDecreaseEvent::_Internal {
 public:
};

GroupDecreaseEvent::GroupDecreaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupDecreaseEvent)
}
GroupDecreaseEvent::GroupDecreaseEvent(const GroupDecreaseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupDecreaseEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.operator_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_type().empty()) {
    _this->_impl_.sub_type_.Set(from._internal_sub_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupDecreaseEvent)
}

inline void GroupDecreaseEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.operator_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupDecreaseEvent::~GroupDecreaseEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupDecreaseEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupDecreaseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_type_.Destroy();
}

void GroupDecreaseEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupDecreaseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupDecreaseEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_type_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupDecreaseEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupDecreaseEvent.sub_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupDecreaseEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupDecreaseEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupDecreaseEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 user_id = 8;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupDecreaseEvent)
  return target;
}

size_t GroupDecreaseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupDecreaseEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_operator_id());
  }

  // int64 user_id = 8;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupDecreaseEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupDecreaseEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupDecreaseEvent::GetClassData() const { return &_class_data_; }


void GroupDecreaseEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupDecreaseEvent*>(&to_msg);
  auto& from = static_cast<const GroupDecreaseEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupDecreaseEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_operator_id() != 0) {
    _this->_internal_set_operator_id(from._internal_operator_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupDecreaseEvent::CopyFrom(const GroupDecreaseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupDecreaseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDecreaseEvent::IsInitialized() const {
  return true;
}

void GroupDecreaseEvent::InternalSwap(GroupDecreaseEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_type_, lhs_arena,
      &other->_impl_.sub_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupDecreaseEvent, _impl_.user_id_)
      + sizeof(GroupDecreaseEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupDecreaseEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupDecreaseEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[6]);
}

// ===================================================================

class GroupAdminChangeEvent::_Internal {
 public:
};

GroupAdminChangeEvent::GroupAdminChangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupAdminChangeEvent)
}
GroupAdminChangeEvent::GroupAdminChangeEvent(const GroupAdminChangeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupAdminChangeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_type().empty()) {
    _this->_impl_.sub_type_.Set(from._internal_sub_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupAdminChangeEvent)
}

inline void GroupAdminChangeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupAdminChangeEvent::~GroupAdminChangeEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupAdminChangeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupAdminChangeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_type_.Destroy();
}

void GroupAdminChangeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupAdminChangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupAdminChangeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_type_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupAdminChangeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupAdminChangeEvent.sub_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupAdminChangeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupAdminChangeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupAdminChangeEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupAdminChangeEvent)
  return target;
}

size_t GroupAdminChangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupAdminChangeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupAdminChangeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupAdminChangeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupAdminChangeEvent::GetClassData() const { return &_class_data_; }


void GroupAdminChangeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupAdminChangeEvent*>(&to_msg);
  auto& from = static_cast<const GroupAdminChangeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupAdminChangeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupAdminChangeEvent::CopyFrom(const GroupAdminChangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupAdminChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAdminChangeEvent::IsInitialized() const {
  return true;
}

void GroupAdminChangeEvent::InternalSwap(GroupAdminChangeEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_type_, lhs_arena,
      &other->_impl_.sub_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupAdminChangeEvent, _impl_.user_id_)
      + sizeof(GroupAdminChangeEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupAdminChangeEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupAdminChangeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[7]);
}

// ===================================================================

class GroupFileUploadEvent::_Internal {
 public:
  static const ::cqhttp::GroupFile& file(const GroupFileUploadEvent* msg);
};

const ::cqhttp::GroupFile&
GroupFileUploadEvent::_Internal::file(const GroupFileUploadEvent* msg) {
  return *msg->_impl_.file_;
}
void GroupFileUploadEvent::clear_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
}
GroupFileUploadEvent::GroupFileUploadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupFileUploadEvent)
}
GroupFileUploadEvent::GroupFileUploadEvent(const GroupFileUploadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupFileUploadEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_file()) {
    _this->_impl_.file_ = new ::cqhttp::GroupFile(*from._impl_.file_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupFileUploadEvent)
}

inline void GroupFileUploadEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_){nullptr}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupFileUploadEvent::~GroupFileUploadEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupFileUploadEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupFileUploadEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.file_;
}

void GroupFileUploadEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupFileUploadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupFileUploadEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupFileUploadEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.GroupFile file = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupFileUploadEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupFileUploadEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // int64 group_id = 5;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_group_id(), target);
  }

  // int64 user_id = 6;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_user_id(), target);
  }

  // .cqhttp.GroupFile file = 7;
  if (this->_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupFileUploadEvent)
  return target;
}

size_t GroupFileUploadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupFileUploadEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.GroupFile file = 7;
  if (this->_internal_has_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 5;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 user_id = 6;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupFileUploadEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupFileUploadEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupFileUploadEvent::GetClassData() const { return &_class_data_; }


void GroupFileUploadEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupFileUploadEvent*>(&to_msg);
  auto& from = static_cast<const GroupFileUploadEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupFileUploadEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file()) {
    _this->_internal_mutable_file()->::cqhttp::GroupFile::MergeFrom(
        from._internal_file());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupFileUploadEvent::CopyFrom(const GroupFileUploadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupFileUploadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupFileUploadEvent::IsInitialized() const {
  return true;
}

void GroupFileUploadEvent::InternalSwap(GroupFileUploadEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupFileUploadEvent, _impl_.user_id_)
      + sizeof(GroupFileUploadEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupFileUploadEvent, _impl_.file_)>(
          reinterpret_cast<char*>(&_impl_.file_),
          reinterpret_cast<char*>(&other->_impl_.file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupFileUploadEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[8]);
}

// ===================================================================

class GroupBanEvent::_Internal {
 public:
};

GroupBanEvent::GroupBanEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupBanEvent)
}
GroupBanEvent::GroupBanEvent(const GroupBanEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupBanEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.operator_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_type().empty()) {
    _this->_impl_.sub_type_.Set(from._internal_sub_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupBanEvent)
}

inline void GroupBanEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.operator_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.duration_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupBanEvent::~GroupBanEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupBanEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupBanEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_type_.Destroy();
}

void GroupBanEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupBanEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupBanEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_type_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupBanEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupBanEvent.sub_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupBanEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupBanEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupBanEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 user_id = 8;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  // int64 duration = 9;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupBanEvent)
  return target;
}

size_t GroupBanEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupBanEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 operator_id = 7;
  if (this->_internal_operator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_operator_id());
  }

  // int64 user_id = 8;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 duration = 9;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupBanEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupBanEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupBanEvent::GetClassData() const { return &_class_data_; }


void GroupBanEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupBanEvent*>(&to_msg);
  auto& from = static_cast<const GroupBanEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupBanEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_operator_id() != 0) {
    _this->_internal_set_operator_id(from._internal_operator_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupBanEvent::CopyFrom(const GroupBanEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupBanEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBanEvent::IsInitialized() const {
  return true;
}

void GroupBanEvent::InternalSwap(GroupBanEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_type_, lhs_arena,
      &other->_impl_.sub_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupBanEvent, _impl_.duration_)
      + sizeof(GroupBanEvent::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GroupBanEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupBanEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[9]);
}

// ===================================================================

class FriendAddEvent::_Internal {
 public:
};

FriendAddEvent::FriendAddEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.FriendAddEvent)
}
FriendAddEvent::FriendAddEvent(const FriendAddEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendAddEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.FriendAddEvent)
}

inline void FriendAddEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendAddEvent::~FriendAddEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.FriendAddEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendAddEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendAddEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendAddEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.FriendAddEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendAddEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.FriendAddEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.FriendAddEvent)
  return target;
}

size_t FriendAddEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.FriendAddEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendAddEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendAddEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendAddEvent::GetClassData() const { return &_class_data_; }


void FriendAddEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendAddEvent*>(&to_msg);
  auto& from = static_cast<const FriendAddEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.FriendAddEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendAddEvent::CopyFrom(const FriendAddEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.FriendAddEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddEvent::IsInitialized() const {
  return true;
}

void FriendAddEvent::InternalSwap(FriendAddEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendAddEvent, _impl_.user_id_)
      + sizeof(FriendAddEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(FriendAddEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[10]);
}

// ===================================================================

class NotifyEvent::_Internal {
 public:
};

NotifyEvent::NotifyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.NotifyEvent)
}
NotifyEvent::NotifyEvent(const NotifyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.honor_type_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.sub_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.honor_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.honor_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_honor_type().empty()) {
    _this->_impl_.honor_type_.Set(from._internal_honor_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sub_type_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.sub_type_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.NotifyEvent)
}

inline void NotifyEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.honor_type_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.sender_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.target_id_){int64_t{0}}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.sub_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.honor_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.honor_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotifyEvent::~NotifyEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.NotifyEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.honor_type_.Destroy();
  _impl_.title_.Destroy();
}

void NotifyEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.NotifyEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.honor_type_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sub_type_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.sub_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sub_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 sender_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 target_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string honor_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_honor_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.NotifyEvent.honor_type"));
        } else
          goto handle_unusual;
        continue;
      // string title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.NotifyEvent.title"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.NotifyEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sub_type(), target);
  }

  // int64 sender_id = 6;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_sender_id(), target);
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  // int64 target_id = 8;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_target_id(), target);
  }

  // int64 group_id = 9;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_group_id(), target);
  }

  // string honor_type = 10;
  if (!this->_internal_honor_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_honor_type().data(), static_cast<int>(this->_internal_honor_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.NotifyEvent.honor_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_honor_type(), target);
  }

  // string title = 11;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.NotifyEvent.title");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.NotifyEvent)
  return target;
}

size_t NotifyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.NotifyEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string honor_type = 10;
  if (!this->_internal_honor_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_honor_type());
  }

  // string title = 11;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 sender_id = 6;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sender_id());
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 target_id = 8;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_target_id());
  }

  // int64 group_id = 9;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyEvent::GetClassData() const { return &_class_data_; }


void NotifyEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyEvent*>(&to_msg);
  auto& from = static_cast<const NotifyEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.NotifyEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_honor_type().empty()) {
    _this->_internal_set_honor_type(from._internal_honor_type());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyEvent::CopyFrom(const NotifyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.NotifyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyEvent::IsInitialized() const {
  return true;
}

void NotifyEvent::InternalSwap(NotifyEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.honor_type_, lhs_arena,
      &other->_impl_.honor_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyEvent, _impl_.sub_type_)
      + sizeof(NotifyEvent::_impl_.sub_type_)
      - PROTOBUF_FIELD_OFFSET(NotifyEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[11]);
}

// ===================================================================

class GroupCardChangedEvent::_Internal {
 public:
};

GroupCardChangedEvent::GroupCardChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupCardChangedEvent)
}
GroupCardChangedEvent::GroupCardChangedEvent(const GroupCardChangedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupCardChangedEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.card_new_){}
    , decltype(_impl_.card_old_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.card_new_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_new_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_card_new().empty()) {
    _this->_impl_.card_new_.Set(from._internal_card_new(), 
      _this->GetArenaForAllocation());
  }
  _impl_.card_old_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_old_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_card_old().empty()) {
    _this->_impl_.card_old_.Set(from._internal_card_old(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupCardChangedEvent)
}

inline void GroupCardChangedEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.card_new_){}
    , decltype(_impl_.card_old_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.card_new_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_new_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.card_old_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_old_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupCardChangedEvent::~GroupCardChangedEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupCardChangedEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupCardChangedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.card_new_.Destroy();
  _impl_.card_old_.Destroy();
}

void GroupCardChangedEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupCardChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupCardChangedEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.card_new_.ClearToEmpty();
  _impl_.card_old_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupCardChangedEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string card_new = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_card_new();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupCardChangedEvent.card_new"));
        } else
          goto handle_unusual;
        continue;
      // string card_old = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_card_old();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupCardChangedEvent.card_old"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupCardChangedEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupCardChangedEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // int64 group_id = 5;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_group_id(), target);
  }

  // int64 user_id = 6;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_user_id(), target);
  }

  // string card_new = 7;
  if (!this->_internal_card_new().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_new().data(), static_cast<int>(this->_internal_card_new().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupCardChangedEvent.card_new");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_card_new(), target);
  }

  // string card_old = 8;
  if (!this->_internal_card_old().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_old().data(), static_cast<int>(this->_internal_card_old().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupCardChangedEvent.card_old");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_card_old(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupCardChangedEvent)
  return target;
}

size_t GroupCardChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupCardChangedEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string card_new = 7;
  if (!this->_internal_card_new().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_new());
  }

  // string card_old = 8;
  if (!this->_internal_card_old().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_old());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 5;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 user_id = 6;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupCardChangedEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupCardChangedEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupCardChangedEvent::GetClassData() const { return &_class_data_; }


void GroupCardChangedEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupCardChangedEvent*>(&to_msg);
  auto& from = static_cast<const GroupCardChangedEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupCardChangedEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_card_new().empty()) {
    _this->_internal_set_card_new(from._internal_card_new());
  }
  if (!from._internal_card_old().empty()) {
    _this->_internal_set_card_old(from._internal_card_old());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupCardChangedEvent::CopyFrom(const GroupCardChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupCardChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCardChangedEvent::IsInitialized() const {
  return true;
}

void GroupCardChangedEvent::InternalSwap(GroupCardChangedEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.card_new_, lhs_arena,
      &other->_impl_.card_new_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.card_old_, lhs_arena,
      &other->_impl_.card_old_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupCardChangedEvent, _impl_.user_id_)
      + sizeof(GroupCardChangedEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupCardChangedEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupCardChangedEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[12]);
}

// ===================================================================

class ReceviedOfflineFileEvent::_Internal {
 public:
  static const ::cqhttp::OfflineFile& file(const ReceviedOfflineFileEvent* msg);
};

const ::cqhttp::OfflineFile&
ReceviedOfflineFileEvent::_Internal::file(const ReceviedOfflineFileEvent* msg) {
  return *msg->_impl_.file_;
}
void ReceviedOfflineFileEvent::clear_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
}
ReceviedOfflineFileEvent::ReceviedOfflineFileEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.ReceviedOfflineFileEvent)
}
ReceviedOfflineFileEvent::ReceviedOfflineFileEvent(const ReceviedOfflineFileEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReceviedOfflineFileEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_file()) {
    _this->_impl_.file_ = new ::cqhttp::OfflineFile(*from._impl_.file_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.ReceviedOfflineFileEvent)
}

inline void ReceviedOfflineFileEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_){nullptr}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReceviedOfflineFileEvent::~ReceviedOfflineFileEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.ReceviedOfflineFileEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceviedOfflineFileEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.file_;
}

void ReceviedOfflineFileEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReceviedOfflineFileEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.ReceviedOfflineFileEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceviedOfflineFileEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.OfflineFile file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceviedOfflineFileEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.ReceviedOfflineFileEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  // .cqhttp.OfflineFile file = 6;
  if (this->_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.ReceviedOfflineFileEvent)
  return target;
}

size_t ReceviedOfflineFileEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.ReceviedOfflineFileEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.OfflineFile file = 6;
  if (this->_internal_has_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceviedOfflineFileEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReceviedOfflineFileEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceviedOfflineFileEvent::GetClassData() const { return &_class_data_; }


void ReceviedOfflineFileEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReceviedOfflineFileEvent*>(&to_msg);
  auto& from = static_cast<const ReceviedOfflineFileEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.ReceviedOfflineFileEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file()) {
    _this->_internal_mutable_file()->::cqhttp::OfflineFile::MergeFrom(
        from._internal_file());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceviedOfflineFileEvent::CopyFrom(const ReceviedOfflineFileEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.ReceviedOfflineFileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceviedOfflineFileEvent::IsInitialized() const {
  return true;
}

void ReceviedOfflineFileEvent::InternalSwap(ReceviedOfflineFileEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceviedOfflineFileEvent, _impl_.user_id_)
      + sizeof(ReceviedOfflineFileEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(ReceviedOfflineFileEvent, _impl_.file_)>(
          reinterpret_cast<char*>(&_impl_.file_),
          reinterpret_cast<char*>(&other->_impl_.file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceviedOfflineFileEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[13]);
}

// ===================================================================

class ClientChangedEvent::_Internal {
 public:
  static const ::cqhttp::Device& client(const ClientChangedEvent* msg);
};

const ::cqhttp::Device&
ClientChangedEvent::_Internal::client(const ClientChangedEvent* msg) {
  return *msg->_impl_.client_;
}
void ClientChangedEvent::clear_client() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
}
ClientChangedEvent::ClientChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.ClientChangedEvent)
}
ClientChangedEvent::ClientChangedEvent(const ClientChangedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientChangedEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_){nullptr}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.online_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client()) {
    _this->_impl_.client_ = new ::cqhttp::Device(*from._impl_.client_);
  }
  ::memcpy(&_impl_.post_type_, &from._impl_.post_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.online_) -
    reinterpret_cast<char*>(&_impl_.post_type_)) + sizeof(_impl_.online_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.ClientChangedEvent)
}

inline void ClientChangedEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_){nullptr}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.online_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientChangedEvent::~ClientChangedEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.ClientChangedEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientChangedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_;
}

void ClientChangedEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.ClientChangedEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
  ::memset(&_impl_.post_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.online_) -
      reinterpret_cast<char*>(&_impl_.post_type_)) + sizeof(_impl_.online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientChangedEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cqhttp.CQHTTP_TYPE post_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Device client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientChangedEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.ClientChangedEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cqhttp.CQHTTP_TYPE post_type = 1;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 2;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_notice_type(), target);
  }

  // .cqhttp.Device client = 3;
  if (this->_internal_has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::client(this),
        _Internal::client(this).GetCachedSize(), target, stream);
  }

  // bool online = 4;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.ClientChangedEvent)
  return target;
}

size_t ClientChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.ClientChangedEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.Device client = 3;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 1;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 2;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // bool online = 4;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientChangedEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientChangedEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientChangedEvent::GetClassData() const { return &_class_data_; }


void ClientChangedEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientChangedEvent*>(&to_msg);
  auto& from = static_cast<const ClientChangedEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.ClientChangedEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client()) {
    _this->_internal_mutable_client()->::cqhttp::Device::MergeFrom(
        from._internal_client());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_online() != 0) {
    _this->_internal_set_online(from._internal_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientChangedEvent::CopyFrom(const ClientChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.ClientChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientChangedEvent::IsInitialized() const {
  return true;
}

void ClientChangedEvent::InternalSwap(ClientChangedEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientChangedEvent, _impl_.online_)
      + sizeof(ClientChangedEvent::_impl_.online_)
      - PROTOBUF_FIELD_OFFSET(ClientChangedEvent, _impl_.client_)>(
          reinterpret_cast<char*>(&_impl_.client_),
          reinterpret_cast<char*>(&other->_impl_.client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientChangedEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[14]);
}

// ===================================================================

class EssenceMsgChangedEvent::_Internal {
 public:
};

EssenceMsgChangedEvent::EssenceMsgChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.EssenceMsgChangedEvent)
}
EssenceMsgChangedEvent::EssenceMsgChangedEvent(const EssenceMsgChangedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EssenceMsgChangedEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.notice_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.operator_id_){}
    , decltype(_impl_.message_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_type().empty()) {
    _this->_impl_.sub_type_.Set(from._internal_sub_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.EssenceMsgChangedEvent)
}

inline void EssenceMsgChangedEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.notice_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.sender_id_){int64_t{0}}
    , decltype(_impl_.operator_id_){int64_t{0}}
    , decltype(_impl_.message_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EssenceMsgChangedEvent::~EssenceMsgChangedEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.EssenceMsgChangedEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EssenceMsgChangedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_type_.Destroy();
}

void EssenceMsgChangedEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EssenceMsgChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.EssenceMsgChangedEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_type_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EssenceMsgChangedEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notice_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.EssenceMsgChangedEvent.sub_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sender_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 operator_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 message_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EssenceMsgChangedEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.EssenceMsgChangedEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.EssenceMsgChangedEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 sender_id = 7;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_sender_id(), target);
  }

  // int64 operator_id = 8;
  if (this->_internal_operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_operator_id(), target);
  }

  // int32 message_id = 9;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.EssenceMsgChangedEvent)
  return target;
}

size_t EssenceMsgChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.EssenceMsgChangedEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  if (this->_internal_notice_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notice_type());
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 sender_id = 7;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sender_id());
  }

  // int64 operator_id = 8;
  if (this->_internal_operator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_operator_id());
  }

  // int32 message_id = 9;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EssenceMsgChangedEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EssenceMsgChangedEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EssenceMsgChangedEvent::GetClassData() const { return &_class_data_; }


void EssenceMsgChangedEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EssenceMsgChangedEvent*>(&to_msg);
  auto& from = static_cast<const EssenceMsgChangedEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.EssenceMsgChangedEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_notice_type() != 0) {
    _this->_internal_set_notice_type(from._internal_notice_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_operator_id() != 0) {
    _this->_internal_set_operator_id(from._internal_operator_id());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EssenceMsgChangedEvent::CopyFrom(const EssenceMsgChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.EssenceMsgChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssenceMsgChangedEvent::IsInitialized() const {
  return true;
}

void EssenceMsgChangedEvent::InternalSwap(EssenceMsgChangedEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_type_, lhs_arena,
      &other->_impl_.sub_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EssenceMsgChangedEvent, _impl_.message_id_)
      + sizeof(EssenceMsgChangedEvent::_impl_.message_id_)
      - PROTOBUF_FIELD_OFFSET(EssenceMsgChangedEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EssenceMsgChangedEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[15]);
}

// ===================================================================

class FriendAddRequestEvent::_Internal {
 public:
};

FriendAddRequestEvent::FriendAddRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.FriendAddRequestEvent)
}
FriendAddRequestEvent::FriendAddRequestEvent(const FriendAddRequestEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendAddRequestEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.request_type_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag().empty()) {
    _this->_impl_.flag_.Set(from._internal_flag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.FriendAddRequestEvent)
}

inline void FriendAddRequestEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.request_type_){0}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendAddRequestEvent::~FriendAddRequestEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.FriendAddRequestEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendAddRequestEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comment_.Destroy();
  _impl_.flag_.Destroy();
}

void FriendAddRequestEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendAddRequestEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.FriendAddRequestEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_.ClearToEmpty();
  _impl_.flag_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddRequestEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE request_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.FriendAddRequestEvent.comment"));
        } else
          goto handle_unusual;
        continue;
      // string flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.FriendAddRequestEvent.flag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendAddRequestEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.FriendAddRequestEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  if (this->_internal_request_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_request_type(), target);
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  // string comment = 6;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.FriendAddRequestEvent.comment");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comment(), target);
  }

  // string flag = 7;
  if (!this->_internal_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.FriendAddRequestEvent.flag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.FriendAddRequestEvent)
  return target;
}

size_t FriendAddRequestEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.FriendAddRequestEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 6;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string flag = 7;
  if (!this->_internal_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  if (this->_internal_request_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  // int64 user_id = 5;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendAddRequestEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendAddRequestEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendAddRequestEvent::GetClassData() const { return &_class_data_; }


void FriendAddRequestEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendAddRequestEvent*>(&to_msg);
  auto& from = static_cast<const FriendAddRequestEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.FriendAddRequestEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (!from._internal_flag().empty()) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_request_type() != 0) {
    _this->_internal_set_request_type(from._internal_request_type());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendAddRequestEvent::CopyFrom(const FriendAddRequestEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.FriendAddRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddRequestEvent::IsInitialized() const {
  return true;
}

void FriendAddRequestEvent::InternalSwap(FriendAddRequestEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_, lhs_arena,
      &other->_impl_.flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendAddRequestEvent, _impl_.user_id_)
      + sizeof(FriendAddRequestEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(FriendAddRequestEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddRequestEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[16]);
}

// ===================================================================

class GroupAddRequestEvent::_Internal {
 public:
};

GroupAddRequestEvent::GroupAddRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupAddRequestEvent)
}
GroupAddRequestEvent::GroupAddRequestEvent(const GroupAddRequestEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupAddRequestEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.request_type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_type().empty()) {
    _this->_impl_.sub_type_.Set(from._internal_sub_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag().empty()) {
    _this->_impl_.flag_.Set(from._internal_flag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupAddRequestEvent)
}

inline void GroupAddRequestEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_type_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.request_type_){0}
    , decltype(_impl_.group_id_){int64_t{0}}
    , decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupAddRequestEvent::~GroupAddRequestEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupAddRequestEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupAddRequestEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_type_.Destroy();
  _impl_.comment_.Destroy();
  _impl_.flag_.Destroy();
}

void GroupAddRequestEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupAddRequestEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupAddRequestEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_type_.ClearToEmpty();
  _impl_.comment_.ClearToEmpty();
  _impl_.flag_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupAddRequestEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE request_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupAddRequestEvent.sub_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupAddRequestEvent.comment"));
        } else
          goto handle_unusual;
        continue;
      // string flag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupAddRequestEvent.flag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupAddRequestEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupAddRequestEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  if (this->_internal_request_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_request_type(), target);
  }

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupAddRequestEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  // string comment = 8;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupAddRequestEvent.comment");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_comment(), target);
  }

  // string flag = 9;
  if (!this->_internal_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupAddRequestEvent.flag");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupAddRequestEvent)
  return target;
}

size_t GroupAddRequestEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupAddRequestEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_type = 5;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // string comment = 8;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string flag = 9;
  if (!this->_internal_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  if (this->_internal_request_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  // int64 group_id = 6;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int64 user_id = 7;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupAddRequestEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupAddRequestEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupAddRequestEvent::GetClassData() const { return &_class_data_; }


void GroupAddRequestEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupAddRequestEvent*>(&to_msg);
  auto& from = static_cast<const GroupAddRequestEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupAddRequestEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (!from._internal_flag().empty()) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_request_type() != 0) {
    _this->_internal_set_request_type(from._internal_request_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupAddRequestEvent::CopyFrom(const GroupAddRequestEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupAddRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAddRequestEvent::IsInitialized() const {
  return true;
}

void GroupAddRequestEvent::InternalSwap(GroupAddRequestEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_type_, lhs_arena,
      &other->_impl_.sub_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_, lhs_arena,
      &other->_impl_.flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupAddRequestEvent, _impl_.user_id_)
      + sizeof(GroupAddRequestEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupAddRequestEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupAddRequestEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[17]);
}

// ===================================================================

class MetaEvent::_Internal {
 public:
  static const ::cqhttp::Status& status(const MetaEvent* msg);
};

const ::cqhttp::Status&
MetaEvent::_Internal::status(const MetaEvent* msg) {
  return *msg->_impl_.status_;
}
void MetaEvent::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MetaEvent::MetaEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.MetaEvent)
}
MetaEvent::MetaEvent(const MetaEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.meta_event_type_){}
    , decltype(_impl_.interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::cqhttp::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interval_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.interval_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.MetaEvent)
}

inline void MetaEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.meta_event_type_){0}
    , decltype(_impl_.interval_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetaEvent::~MetaEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.MetaEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetaEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MetaEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.MetaEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.interval_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_meta_event_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 interval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.MetaEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
  if (this->_internal_meta_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_meta_event_type(), target);
  }

  // .cqhttp.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 interval = 6;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.MetaEvent)
  return target;
}

size_t MetaEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.MetaEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
  if (this->_internal_meta_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_meta_event_type());
  }

  // int64 interval = 6;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaEvent::GetClassData() const { return &_class_data_; }


void MetaEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaEvent*>(&to_msg);
  auto& from = static_cast<const MetaEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.MetaEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::cqhttp::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_meta_event_type() != 0) {
    _this->_internal_set_meta_event_type(from._internal_meta_event_type());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaEvent::CopyFrom(const MetaEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.MetaEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaEvent::IsInitialized() const {
  return true;
}

void MetaEvent::InternalSwap(MetaEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaEvent, _impl_.interval_)
      + sizeof(MetaEvent::_impl_.interval_)
      - PROTOBUF_FIELD_OFFSET(MetaEvent, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[18]);
}

// ===================================================================

class LifecycleEvent::_Internal {
 public:
  static const ::cqhttp::Status& status(const LifecycleEvent* msg);
};

const ::cqhttp::Status&
LifecycleEvent::_Internal::status(const LifecycleEvent* msg) {
  return *msg->_impl_.status_;
}
void LifecycleEvent::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
LifecycleEvent::LifecycleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.LifecycleEvent)
}
LifecycleEvent::LifecycleEvent(const LifecycleEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LifecycleEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.self_id_){}
    , decltype(_impl_.post_type_){}
    , decltype(_impl_.meta_event_type_){}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.sub_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::cqhttp::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sub_type_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.sub_type_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.LifecycleEvent)
}

inline void LifecycleEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.self_id_){int64_t{0}}
    , decltype(_impl_.post_type_){0}
    , decltype(_impl_.meta_event_type_){0}
    , decltype(_impl_.interval_){int64_t{0}}
    , decltype(_impl_.sub_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LifecycleEvent::~LifecycleEvent() {
  // @@protoc_insertion_point(destructor:cqhttp.LifecycleEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LifecycleEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void LifecycleEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LifecycleEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.LifecycleEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sub_type_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.sub_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LifecycleEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_meta_event_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 interval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.CQHTTP_TYPE sub_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sub_type(static_cast<::cqhttp::CQHTTP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LifecycleEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.LifecycleEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_post_type(), target);
  }

  // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
  if (this->_internal_meta_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_meta_event_type(), target);
  }

  // .cqhttp.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 interval = 6;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_interval(), target);
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 7;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sub_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.LifecycleEvent)
  return target;
}

size_t LifecycleEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.LifecycleEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->_internal_self_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_self_id());
  }

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
  }

  // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
  if (this->_internal_meta_event_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_meta_event_type());
  }

  // int64 interval = 6;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interval());
  }

  // .cqhttp.CQHTTP_TYPE sub_type = 7;
  if (this->_internal_sub_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LifecycleEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LifecycleEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LifecycleEvent::GetClassData() const { return &_class_data_; }


void LifecycleEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LifecycleEvent*>(&to_msg);
  auto& from = static_cast<const LifecycleEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.LifecycleEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::cqhttp::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_self_id() != 0) {
    _this->_internal_set_self_id(from._internal_self_id());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_meta_event_type() != 0) {
    _this->_internal_set_meta_event_type(from._internal_meta_event_type());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LifecycleEvent::CopyFrom(const LifecycleEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.LifecycleEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LifecycleEvent::IsInitialized() const {
  return true;
}

void LifecycleEvent::InternalSwap(LifecycleEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LifecycleEvent, _impl_.sub_type_)
      + sizeof(LifecycleEvent::_impl_.sub_type_)
      - PROTOBUF_FIELD_OFFSET(LifecycleEvent, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LifecycleEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fevent_2eproto_getter, &descriptor_table_cqhttp_5fevent_2eproto_once,
      file_level_metadata_cqhttp_5fevent_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cqhttp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cqhttp::BaseEvent*
Arena::CreateMaybeMessage< ::cqhttp::BaseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::BaseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::PrivateMessageEvent*
Arena::CreateMaybeMessage< ::cqhttp::PrivateMessageEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::PrivateMessageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupMessageEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupMessageEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupMessageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::FriendRecallEvent*
Arena::CreateMaybeMessage< ::cqhttp::FriendRecallEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::FriendRecallEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupRecallEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupRecallEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupRecallEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupIncreaseEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupIncreaseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupIncreaseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupDecreaseEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupDecreaseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupDecreaseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupAdminChangeEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupAdminChangeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupAdminChangeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupFileUploadEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupFileUploadEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupFileUploadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupBanEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupBanEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupBanEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::FriendAddEvent*
Arena::CreateMaybeMessage< ::cqhttp::FriendAddEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::FriendAddEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::NotifyEvent*
Arena::CreateMaybeMessage< ::cqhttp::NotifyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::NotifyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupCardChangedEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupCardChangedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupCardChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::ReceviedOfflineFileEvent*
Arena::CreateMaybeMessage< ::cqhttp::ReceviedOfflineFileEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::ReceviedOfflineFileEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::ClientChangedEvent*
Arena::CreateMaybeMessage< ::cqhttp::ClientChangedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::ClientChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::EssenceMsgChangedEvent*
Arena::CreateMaybeMessage< ::cqhttp::EssenceMsgChangedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::EssenceMsgChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::FriendAddRequestEvent*
Arena::CreateMaybeMessage< ::cqhttp::FriendAddRequestEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::FriendAddRequestEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupAddRequestEvent*
Arena::CreateMaybeMessage< ::cqhttp::GroupAddRequestEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupAddRequestEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::MetaEvent*
Arena::CreateMaybeMessage< ::cqhttp::MetaEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::MetaEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::LifecycleEvent*
Arena::CreateMaybeMessage< ::cqhttp::LifecycleEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::LifecycleEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
