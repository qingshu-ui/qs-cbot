// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cqhttp_base.proto

#include "cqhttp_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cqhttp {
PROTOBUF_CONSTEXPR Sender::Sender(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.card_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.area_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SenderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderDefaultTypeInternal() {}
  union {
    Sender _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderDefaultTypeInternal _Sender_default_instance_;
PROTOBUF_CONSTEXPR Anonymous::Anonymous(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnonymousDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnonymousDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnonymousDefaultTypeInternal() {}
  union {
    Anonymous _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnonymousDefaultTypeInternal _Anonymous_default_instance_;
PROTOBUF_CONSTEXPR Status_Statistics::Status_Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packetreceived_)*/uint64_t{0u}
  , /*decltype(_impl_.packetsent_)*/uint64_t{0u}
  , /*decltype(_impl_.packetlost_)*/uint64_t{0u}
  , /*decltype(_impl_.messagereceived_)*/uint64_t{0u}
  , /*decltype(_impl_.messagesent_)*/uint64_t{0u}
  , /*decltype(_impl_.disconnecttimes_)*/0u
  , /*decltype(_impl_.losttimes_)*/0u
  , /*decltype(_impl_.lastmessagetime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Status_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Status_StatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Status_StatisticsDefaultTypeInternal() {}
  union {
    Status_Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Status_StatisticsDefaultTypeInternal _Status_Statistics_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_)*/nullptr
  , /*decltype(_impl_.app_initialized_)*/false
  , /*decltype(_impl_.app_enabled_)*/false
  , /*decltype(_impl_.plugins_good_)*/false
  , /*decltype(_impl_.app_good_)*/false
  , /*decltype(_impl_.online_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR OfflineFile::OfflineFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OfflineFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OfflineFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OfflineFileDefaultTypeInternal() {}
  union {
    OfflineFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OfflineFileDefaultTypeInternal _OfflineFile_default_instance_;
PROTOBUF_CONSTEXPR GroupFile::GroupFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.busid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupFileDefaultTypeInternal() {}
  union {
    GroupFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupFileDefaultTypeInternal _GroupFile_default_instance_;
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uploader_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.busid_)*/0
  , /*decltype(_impl_.file_size_)*/int64_t{0}
  , /*decltype(_impl_.upload_time_)*/int64_t{0}
  , /*decltype(_impl_.dead_time_)*/int64_t{0}
  , /*decltype(_impl_.modify_time_)*/int64_t{0}
  , /*decltype(_impl_.uploader_)*/int64_t{0}
  , /*decltype(_impl_.download_times_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR Folder::Folder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.folder_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.folder_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_time_)*/int64_t{0}
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.total_file_count_)*/0
  , /*decltype(_impl_.creator_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FolderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FolderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FolderDefaultTypeInternal() {}
  union {
    Folder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FolderDefaultTypeInternal _Folder_default_instance_;
PROTOBUF_CONSTEXPR ForwardMessage_Data::ForwardMessage_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForwardMessage_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardMessage_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardMessage_DataDefaultTypeInternal() {}
  union {
    ForwardMessage_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardMessage_DataDefaultTypeInternal _ForwardMessage_Data_default_instance_;
PROTOBUF_CONSTEXPR ForwardMessage::ForwardMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForwardMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardMessageDefaultTypeInternal() {}
  union {
    ForwardMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardMessageDefaultTypeInternal _ForwardMessage_default_instance_;
}  // namespace cqhttp
static ::_pb::Metadata file_level_metadata_cqhttp_5fbase_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cqhttp_5fbase_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cqhttp_5fbase_2eproto = nullptr;

const uint32_t TableStruct_cqhttp_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.card_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.area_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Sender, _impl_.title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Anonymous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Anonymous, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Anonymous, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Anonymous, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.packetreceived_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.packetsent_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.packetlost_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.messagereceived_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.messagesent_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.disconnecttimes_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.losttimes_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status_Statistics, _impl_.lastmessagetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _impl_.app_initialized_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _impl_.app_enabled_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _impl_.plugins_good_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _impl_.app_good_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _impl_.online_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Status, _impl_.stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::OfflineFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::OfflineFile, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::OfflineFile, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::OfflineFile, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFile, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFile, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFile, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::GroupFile, _impl_.busid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Device, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Device, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Device, _impl_.device_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.file_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.busid_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.file_size_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.upload_time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.dead_time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.modify_time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.download_times_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.uploader_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::File, _impl_.uploader_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.folder_id_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.folder_name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.creator_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.creator_name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::Folder, _impl_.total_file_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage_Data, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage_Data, _impl_.uin_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage_Data, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::cqhttp::ForwardMessage, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cqhttp::Sender)},
  { 15, -1, -1, sizeof(::cqhttp::Anonymous)},
  { 24, -1, -1, sizeof(::cqhttp::Status_Statistics)},
  { 38, -1, -1, sizeof(::cqhttp::Status)},
  { 50, -1, -1, sizeof(::cqhttp::OfflineFile)},
  { 59, -1, -1, sizeof(::cqhttp::GroupFile)},
  { 69, -1, -1, sizeof(::cqhttp::Device)},
  { 78, -1, -1, sizeof(::cqhttp::File)},
  { 95, -1, -1, sizeof(::cqhttp::Folder)},
  { 108, -1, -1, sizeof(::cqhttp::ForwardMessage_Data)},
  { 117, -1, -1, sizeof(::cqhttp::ForwardMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cqhttp::_Sender_default_instance_._instance,
  &::cqhttp::_Anonymous_default_instance_._instance,
  &::cqhttp::_Status_Statistics_default_instance_._instance,
  &::cqhttp::_Status_default_instance_._instance,
  &::cqhttp::_OfflineFile_default_instance_._instance,
  &::cqhttp::_GroupFile_default_instance_._instance,
  &::cqhttp::_Device_default_instance_._instance,
  &::cqhttp::_File_default_instance_._instance,
  &::cqhttp::_Folder_default_instance_._instance,
  &::cqhttp::_ForwardMessage_Data_default_instance_._instance,
  &::cqhttp::_ForwardMessage_default_instance_._instance,
};

const char descriptor_table_protodef_cqhttp_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021cqhttp_base.proto\022\006cqhttp\"\215\001\n\006Sender\022\017"
  "\n\007user_id\030\001 \001(\003\022\020\n\010nickname\030\002 \001(\t\022\013\n\003sex"
  "\030\003 \001(\t\022\013\n\003age\030\004 \001(\005\022\014\n\004card\030\005 \001(\t\022\014\n\004are"
  "a\030\006 \001(\t\022\r\n\005level\030\007 \001(\t\022\014\n\004role\030\010 \001(\t\022\r\n\005"
  "title\030\t \001(\t\"3\n\tAnonymous\022\n\n\002id\030\001 \001(\003\022\014\n\004"
  "name\030\002 \001(\t\022\014\n\004flag\030\003 \001(\t\"\306\001\n\021Status_Stat"
  "istics\022\026\n\016PacketReceived\030\001 \001(\004\022\022\n\nPacket"
  "Sent\030\002 \001(\004\022\022\n\nPacketLost\030\003 \001(\004\022\027\n\017Messag"
  "eReceived\030\004 \001(\004\022\023\n\013MessageSent\030\005 \001(\004\022\027\n\017"
  "DisconnectTimes\030\006 \001(\r\022\021\n\tLostTimes\030\007 \001(\r"
  "\022\027\n\017LastMessageTime\030\010 \001(\003\"\227\001\n\006Status\022\027\n\017"
  "app_initialized\030\001 \001(\010\022\023\n\013app_enabled\030\002 \001"
  "(\010\022\024\n\014plugins_good\030\003 \001(\010\022\020\n\010app_good\030\004 \001"
  "(\010\022\016\n\006online\030\005 \001(\010\022\'\n\004stat\030\006 \001(\0132\031.cqhtt"
  "p.Status_Statistics\"6\n\013OfflineFile\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004size\030\002 \001(\003\022\013\n\003url\030\003 \001(\t\"B\n\tG"
  "roupFile\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004si"
  "ze\030\003 \001(\003\022\r\n\005busid\030\004 \001(\003\"B\n\006Device\022\016\n\006app"
  "_id\030\001 \001(\003\022\023\n\013device_name\030\002 \001(\t\022\023\n\013device"
  "_kind\030\003 \001(\t\"\334\001\n\004File\022\020\n\010group_id\030\001 \001(\005\022\017"
  "\n\007file_id\030\002 \001(\t\022\021\n\tfile_name\030\003 \001(\t\022\r\n\005bu"
  "sid\030\004 \001(\005\022\021\n\tfile_size\030\005 \001(\003\022\023\n\013upload_t"
  "ime\030\006 \001(\003\022\021\n\tdead_time\030\007 \001(\003\022\023\n\013modify_t"
  "ime\030\010 \001(\003\022\026\n\016download_times\030\t \001(\005\022\020\n\010upl"
  "oader\030\n \001(\003\022\025\n\ruploader_name\030\013 \001(\t\"\230\001\n\006F"
  "older\022\020\n\010group_id\030\001 \001(\005\022\021\n\tfolder_id\030\002 \001"
  "(\t\022\023\n\013folder_name\030\003 \001(\t\022\023\n\013create_time\030\004"
  " \001(\003\022\017\n\007creator\030\005 \001(\003\022\024\n\014creator_name\030\006 "
  "\001(\t\022\030\n\020total_file_count\030\007 \001(\005\"}\n\016Forward"
  "Message\022\014\n\004type\030\001 \001(\t\022)\n\004data\030\002 \001(\0132\033.cq"
  "http.ForwardMessage.Data\0322\n\004Data\022\014\n\004name"
  "\030\001 \001(\t\022\013\n\003uin\030\002 \001(\t\022\017\n\007content\030\003 \001(\t*\343\003\n"
  "\013CQHTTP_TYPE\022\013\n\007message\020\000\022\013\n\007request\020\001\022\n"
  "\n\006notice\020\002\022\016\n\nmeta_event\020\003\022\013\n\007private\020\004\022"
  "\t\n\005group\020\005\022\n\n\006friend\020\006\022\n\n\006normal\020\007\022\r\n\tan"
  "onymous\020\010\022\016\n\ngroup_self\020\t\022\020\n\014group_uploa"
  "d\020\n\022\017\n\013group_admin\020\013\022\022\n\016group_decrease\020\014"
  "\022\022\n\016group_increase\020\r\022\r\n\tgroup_ban\020\016\022\016\n\nf"
  "riend_add\020\017\022\020\n\014group_recall\020\020\022\021\n\rfriend_"
  "recall\020\021\022\016\n\ngroup_card\020\022\022\020\n\014offline_file"
  "\020\023\022\021\n\rclient_status\020\024\022\013\n\007essence\020\025\022\n\n\006no"
  "tify\020\026\022\t\n\005honor\020\027\022\010\n\004poke\020\030\022\016\n\nlucky_kin"
  "g\020\031\022\t\n\005title\020\032\022\r\n\tlifecycle\020\033\022\r\n\theartbe"
  "at\020\034\022\n\n\006enable\020\035\022\013\n\007disable\020\'\022\013\n\007connect"
  "\020\037*\341\014\n\006Action\022\024\n\020send_private_msg\020\000\022\022\n\016s"
  "end_group_msg\020\001\022\032\n\026send_group_forward_ms"
  "g\020\002\022\014\n\010send_msg\020\003\022\016\n\ndelete_msg\020\004\022\013\n\007get"
  "_msg\020\005\022\023\n\017get_forward_msg\020\006\022\r\n\tget_image"
  "\020\007\022\024\n\020mark_msg_as_read\020\010\022\022\n\016set_group_ki"
  "ck\020\t\022\021\n\rset_group_ban\020\n\022\033\n\027set_group_ano"
  "nymous_ban\020\013\022\027\n\023set_group_whole_ban\020\014\022\023\n"
  "\017set_group_admin\020\r\022\027\n\023set_group_anonymou"
  "s\020\016\022\022\n\016set_group_card\020\017\022\022\n\016set_group_nam"
  "e\020\020\022\023\n\017set_group_leave\020\021\022\033\n\027set_group_sp"
  "ecial_title\020\022\022\023\n\017send_group_sign\020\023\022\032\n\026se"
  "t_friend_add_request\020\024\022\031\n\025set_group_add_"
  "request\020\025\022\022\n\016get_login_info\020\026\022\033\n\027qidian_"
  "get_account_info\020\027\022\022\n\016set_qq_profile\020\030\022\025"
  "\n\021get_stranger_info\020\031\022\023\n\017get_friend_list"
  "\020\032\022\"\n\036get_unidirectional_friend_list\020\033\022\021"
  "\n\rdelete_friend\020\034\022\022\n\016get_group_info\020\035\022\022\n"
  "\016get_group_list\020\036\022\031\n\025get_group_member_in"
  "fo\020\037\022\031\n\025get_group_member_list\020 \022\030\n\024get_g"
  "roup_honor_info\020!\022\017\n\013get_cookies\020\"\022\022\n\016ge"
  "t_csrf_token\020#\022\023\n\017get_credentials\020$\022\016\n\ng"
  "et_record\020%\022\022\n\016can_send_image\020&\022\023\n\017can_s"
  "end_record\020\'\022\024\n\020get_version_info\020(\022\017\n\013se"
  "t_restart\020)\022\017\n\013clean_cache\020*\022\026\n\022set_grou"
  "p_portrait\020+\022\r\n\tocr_image\020,\022\030\n\024get_group"
  "_system_msg\020-\022\027\n\023upload_private_file\020.\022\025"
  "\n\021upload_group_file\020/\022\036\n\032get_group_file_"
  "system_info\0200\022\030\n\024get_group_root_files\0201\022"
  "\035\n\031get_group_files_by_folder\0202\022\034\n\030create"
  "_group_file_folder\0203\022\027\n\023delete_group_fol"
  "der\0204\022\025\n\021delete_group_file\0205\022\026\n\022get_grou"
  "p_file_url\0206\022\016\n\nget_status\0207\022\033\n\027get_grou"
  "p_at_all_remain\0208\022\026\n\022_send_group_notice\020"
  "9\022\025\n\021_get_group_notice\020:\022\027\n\023reload_event"
  "_filter\020;\022\021\n\rdownload_file\020<\022\026\n\022get_onli"
  "ne_clients\020=\022\031\n\025get_group_msg_history\020>\022"
  "\023\n\017set_essence_msg\020\?\022\026\n\022delete_essence_m"
  "sg\020@\022\030\n\024get_essence_msg_list\020A\022\024\n\020check_"
  "url_safely\020B\022\023\n\017_get_model_show\020C\022\023\n\017_se"
  "t_model_show\020D\022 \n\034delete_unidirectional_"
  "friend\020E\022\034\n\030send_private_forward_msg\020Fb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_cqhttp_5fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cqhttp_5fbase_2eproto = {
    false, false, 3406, descriptor_table_protodef_cqhttp_5fbase_2eproto,
    "cqhttp_base.proto",
    &descriptor_table_cqhttp_5fbase_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_cqhttp_5fbase_2eproto::offsets,
    file_level_metadata_cqhttp_5fbase_2eproto, file_level_enum_descriptors_cqhttp_5fbase_2eproto,
    file_level_service_descriptors_cqhttp_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cqhttp_5fbase_2eproto_getter() {
  return &descriptor_table_cqhttp_5fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cqhttp_5fbase_2eproto(&descriptor_table_cqhttp_5fbase_2eproto);
namespace cqhttp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CQHTTP_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cqhttp_5fbase_2eproto);
  return file_level_enum_descriptors_cqhttp_5fbase_2eproto[0];
}
bool CQHTTP_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cqhttp_5fbase_2eproto);
  return file_level_enum_descriptors_cqhttp_5fbase_2eproto[1];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Sender::_Internal {
 public:
};

Sender::Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.Sender)
}
Sender::Sender(const Sender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sender* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.card_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.age_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sex().empty()) {
    _this->_impl_.sex_.Set(from._internal_sex(), 
      _this->GetArenaForAllocation());
  }
  _impl_.card_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_card().empty()) {
    _this->_impl_.card_.Set(from._internal_card(), 
      _this->GetArenaForAllocation());
  }
  _impl_.area_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_area().empty()) {
    _this->_impl_.area_.Set(from._internal_area(), 
      _this->GetArenaForAllocation());
  }
  _impl_.level_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level().empty()) {
    _this->_impl_.level_.Set(from._internal_level(), 
      _this->GetArenaForAllocation());
  }
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.age_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.age_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.Sender)
}

inline void Sender::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.card_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.age_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.card_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.card_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.area_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.level_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sender::~Sender() {
  // @@protoc_insertion_point(destructor:cqhttp.Sender)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sender::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.sex_.Destroy();
  _impl_.card_.Destroy();
  _impl_.area_.Destroy();
  _impl_.level_.Destroy();
  _impl_.role_.Destroy();
  _impl_.title_.Destroy();
}

void Sender::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sender::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.Sender)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.sex_.ClearToEmpty();
  _impl_.card_.ClearToEmpty();
  _impl_.area_.ClearToEmpty();
  _impl_.level_.ClearToEmpty();
  _impl_.role_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.age_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sender::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.sex"));
        } else
          goto handle_unusual;
        continue;
      // int32 age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_card();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.card"));
        } else
          goto handle_unusual;
        continue;
      // string area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_area();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.area"));
        } else
          goto handle_unusual;
        continue;
      // string level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_level();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.level"));
        } else
          goto handle_unusual;
        continue;
      // string role = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.role"));
        } else
          goto handle_unusual;
        continue;
      // string title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Sender.title"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sender::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.Sender)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string sex = 3;
  if (!this->_internal_sex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sex().data(), static_cast<int>(this->_internal_sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.sex");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sex(), target);
  }

  // int32 age = 4;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_age(), target);
  }

  // string card = 5;
  if (!this->_internal_card().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card().data(), static_cast<int>(this->_internal_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.card");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_card(), target);
  }

  // string area = 6;
  if (!this->_internal_area().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area().data(), static_cast<int>(this->_internal_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.area");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_area(), target);
  }

  // string level = 7;
  if (!this->_internal_level().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.level");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_level(), target);
  }

  // string role = 8;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.role");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_role(), target);
  }

  // string title = 9;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Sender.title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.Sender)
  return target;
}

size_t Sender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.Sender)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string sex = 3;
  if (!this->_internal_sex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sex());
  }

  // string card = 5;
  if (!this->_internal_card().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card());
  }

  // string area = 6;
  if (!this->_internal_area().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area());
  }

  // string level = 7;
  if (!this->_internal_level().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string role = 8;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string title = 9;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 age = 4;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sender::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sender::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sender::GetClassData() const { return &_class_data_; }


void Sender::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sender*>(&to_msg);
  auto& from = static_cast<const Sender&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.Sender)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_sex().empty()) {
    _this->_internal_set_sex(from._internal_sex());
  }
  if (!from._internal_card().empty()) {
    _this->_internal_set_card(from._internal_card());
  }
  if (!from._internal_area().empty()) {
    _this->_internal_set_area(from._internal_area());
  }
  if (!from._internal_level().empty()) {
    _this->_internal_set_level(from._internal_level());
  }
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sender::CopyFrom(const Sender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.Sender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sender::IsInitialized() const {
  return true;
}

void Sender::InternalSwap(Sender* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sex_, lhs_arena,
      &other->_impl_.sex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.card_, lhs_arena,
      &other->_impl_.card_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.area_, lhs_arena,
      &other->_impl_.area_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_, lhs_arena,
      &other->_impl_.level_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sender, _impl_.age_)
      + sizeof(Sender::_impl_.age_)
      - PROTOBUF_FIELD_OFFSET(Sender, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sender::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[0]);
}

// ===================================================================

class Anonymous::_Internal {
 public:
};

Anonymous::Anonymous(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.Anonymous)
}
Anonymous::Anonymous(const Anonymous& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Anonymous* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag().empty()) {
    _this->_impl_.flag_.Set(from._internal_flag(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:cqhttp.Anonymous)
}

inline void Anonymous::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Anonymous::~Anonymous() {
  // @@protoc_insertion_point(destructor:cqhttp.Anonymous)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Anonymous::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.flag_.Destroy();
}

void Anonymous::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Anonymous::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.Anonymous)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.flag_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Anonymous::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Anonymous.name"));
        } else
          goto handle_unusual;
        continue;
      // string flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Anonymous.flag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Anonymous::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.Anonymous)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Anonymous.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string flag = 3;
  if (!this->_internal_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Anonymous.flag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.Anonymous)
  return target;
}

size_t Anonymous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.Anonymous)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string flag = 3;
  if (!this->_internal_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Anonymous::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Anonymous::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Anonymous::GetClassData() const { return &_class_data_; }


void Anonymous::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Anonymous*>(&to_msg);
  auto& from = static_cast<const Anonymous&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.Anonymous)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_flag().empty()) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Anonymous::CopyFrom(const Anonymous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.Anonymous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Anonymous::IsInitialized() const {
  return true;
}

void Anonymous::InternalSwap(Anonymous* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_, lhs_arena,
      &other->_impl_.flag_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Anonymous::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[1]);
}

// ===================================================================

class Status_Statistics::_Internal {
 public:
};

Status_Statistics::Status_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.Status_Statistics)
}
Status_Statistics::Status_Statistics(const Status_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status_Statistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packetreceived_){}
    , decltype(_impl_.packetsent_){}
    , decltype(_impl_.packetlost_){}
    , decltype(_impl_.messagereceived_){}
    , decltype(_impl_.messagesent_){}
    , decltype(_impl_.disconnecttimes_){}
    , decltype(_impl_.losttimes_){}
    , decltype(_impl_.lastmessagetime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packetreceived_, &from._impl_.packetreceived_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastmessagetime_) -
    reinterpret_cast<char*>(&_impl_.packetreceived_)) + sizeof(_impl_.lastmessagetime_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.Status_Statistics)
}

inline void Status_Statistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packetreceived_){uint64_t{0u}}
    , decltype(_impl_.packetsent_){uint64_t{0u}}
    , decltype(_impl_.packetlost_){uint64_t{0u}}
    , decltype(_impl_.messagereceived_){uint64_t{0u}}
    , decltype(_impl_.messagesent_){uint64_t{0u}}
    , decltype(_impl_.disconnecttimes_){0u}
    , decltype(_impl_.losttimes_){0u}
    , decltype(_impl_.lastmessagetime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Status_Statistics::~Status_Statistics() {
  // @@protoc_insertion_point(destructor:cqhttp.Status_Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status_Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Status_Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.Status_Statistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.packetreceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastmessagetime_) -
      reinterpret_cast<char*>(&_impl_.packetreceived_)) + sizeof(_impl_.lastmessagetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status_Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PacketReceived = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.packetreceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 PacketSent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.packetsent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 PacketLost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packetlost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 MessageReceived = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.messagereceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 MessageSent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.messagesent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DisconnectTimes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.disconnecttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LostTimes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.losttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastMessageTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastmessagetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status_Statistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.Status_Statistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PacketReceived = 1;
  if (this->_internal_packetreceived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packetreceived(), target);
  }

  // uint64 PacketSent = 2;
  if (this->_internal_packetsent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_packetsent(), target);
  }

  // uint64 PacketLost = 3;
  if (this->_internal_packetlost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_packetlost(), target);
  }

  // uint64 MessageReceived = 4;
  if (this->_internal_messagereceived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_messagereceived(), target);
  }

  // uint64 MessageSent = 5;
  if (this->_internal_messagesent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_messagesent(), target);
  }

  // uint32 DisconnectTimes = 6;
  if (this->_internal_disconnecttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_disconnecttimes(), target);
  }

  // uint32 LostTimes = 7;
  if (this->_internal_losttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_losttimes(), target);
  }

  // int64 LastMessageTime = 8;
  if (this->_internal_lastmessagetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lastmessagetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.Status_Statistics)
  return target;
}

size_t Status_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.Status_Statistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PacketReceived = 1;
  if (this->_internal_packetreceived() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packetreceived());
  }

  // uint64 PacketSent = 2;
  if (this->_internal_packetsent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packetsent());
  }

  // uint64 PacketLost = 3;
  if (this->_internal_packetlost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packetlost());
  }

  // uint64 MessageReceived = 4;
  if (this->_internal_messagereceived() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagereceived());
  }

  // uint64 MessageSent = 5;
  if (this->_internal_messagesent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagesent());
  }

  // uint32 DisconnectTimes = 6;
  if (this->_internal_disconnecttimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disconnecttimes());
  }

  // uint32 LostTimes = 7;
  if (this->_internal_losttimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_losttimes());
  }

  // int64 LastMessageTime = 8;
  if (this->_internal_lastmessagetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastmessagetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status_Statistics::GetClassData() const { return &_class_data_; }


void Status_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status_Statistics*>(&to_msg);
  auto& from = static_cast<const Status_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.Status_Statistics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_packetreceived() != 0) {
    _this->_internal_set_packetreceived(from._internal_packetreceived());
  }
  if (from._internal_packetsent() != 0) {
    _this->_internal_set_packetsent(from._internal_packetsent());
  }
  if (from._internal_packetlost() != 0) {
    _this->_internal_set_packetlost(from._internal_packetlost());
  }
  if (from._internal_messagereceived() != 0) {
    _this->_internal_set_messagereceived(from._internal_messagereceived());
  }
  if (from._internal_messagesent() != 0) {
    _this->_internal_set_messagesent(from._internal_messagesent());
  }
  if (from._internal_disconnecttimes() != 0) {
    _this->_internal_set_disconnecttimes(from._internal_disconnecttimes());
  }
  if (from._internal_losttimes() != 0) {
    _this->_internal_set_losttimes(from._internal_losttimes());
  }
  if (from._internal_lastmessagetime() != 0) {
    _this->_internal_set_lastmessagetime(from._internal_lastmessagetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status_Statistics::CopyFrom(const Status_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.Status_Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status_Statistics::IsInitialized() const {
  return true;
}

void Status_Statistics::InternalSwap(Status_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status_Statistics, _impl_.lastmessagetime_)
      + sizeof(Status_Statistics::_impl_.lastmessagetime_)
      - PROTOBUF_FIELD_OFFSET(Status_Statistics, _impl_.packetreceived_)>(
          reinterpret_cast<char*>(&_impl_.packetreceived_),
          reinterpret_cast<char*>(&other->_impl_.packetreceived_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status_Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[2]);
}

// ===================================================================

class Status::_Internal {
 public:
  static const ::cqhttp::Status_Statistics& stat(const Status* msg);
};

const ::cqhttp::Status_Statistics&
Status::_Internal::stat(const Status* msg) {
  return *msg->_impl_.stat_;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.app_initialized_){}
    , decltype(_impl_.app_enabled_){}
    , decltype(_impl_.plugins_good_){}
    , decltype(_impl_.app_good_){}
    , decltype(_impl_.online_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stat()) {
    _this->_impl_.stat_ = new ::cqhttp::Status_Statistics(*from._impl_.stat_);
  }
  ::memcpy(&_impl_.app_initialized_, &from._impl_.app_initialized_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.online_) -
    reinterpret_cast<char*>(&_impl_.app_initialized_)) + sizeof(_impl_.online_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.app_initialized_){false}
    , decltype(_impl_.app_enabled_){false}
    , decltype(_impl_.plugins_good_){false}
    , decltype(_impl_.app_good_){false}
    , decltype(_impl_.online_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:cqhttp.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stat_;
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
  ::memset(&_impl_.app_initialized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.online_) -
      reinterpret_cast<char*>(&_impl_.app_initialized_)) + sizeof(_impl_.online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool app_initialized = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.app_initialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool app_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.app_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool plugins_good = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.plugins_good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool app_good = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.app_good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.Status_Statistics stat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool app_initialized = 1;
  if (this->_internal_app_initialized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_app_initialized(), target);
  }

  // bool app_enabled = 2;
  if (this->_internal_app_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_app_enabled(), target);
  }

  // bool plugins_good = 3;
  if (this->_internal_plugins_good() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_plugins_good(), target);
  }

  // bool app_good = 4;
  if (this->_internal_app_good() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_app_good(), target);
  }

  // bool online = 5;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_online(), target);
  }

  // .cqhttp.Status_Statistics stat = 6;
  if (this->_internal_has_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stat(this),
        _Internal::stat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cqhttp.Status_Statistics stat = 6;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_);
  }

  // bool app_initialized = 1;
  if (this->_internal_app_initialized() != 0) {
    total_size += 1 + 1;
  }

  // bool app_enabled = 2;
  if (this->_internal_app_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool plugins_good = 3;
  if (this->_internal_plugins_good() != 0) {
    total_size += 1 + 1;
  }

  // bool app_good = 4;
  if (this->_internal_app_good() != 0) {
    total_size += 1 + 1;
  }

  // bool online = 5;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stat()) {
    _this->_internal_mutable_stat()->::cqhttp::Status_Statistics::MergeFrom(
        from._internal_stat());
  }
  if (from._internal_app_initialized() != 0) {
    _this->_internal_set_app_initialized(from._internal_app_initialized());
  }
  if (from._internal_app_enabled() != 0) {
    _this->_internal_set_app_enabled(from._internal_app_enabled());
  }
  if (from._internal_plugins_good() != 0) {
    _this->_internal_set_plugins_good(from._internal_plugins_good());
  }
  if (from._internal_app_good() != 0) {
    _this->_internal_set_app_good(from._internal_app_good());
  }
  if (from._internal_online() != 0) {
    _this->_internal_set_online(from._internal_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.online_)
      + sizeof(Status::_impl_.online_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.stat_)>(
          reinterpret_cast<char*>(&_impl_.stat_),
          reinterpret_cast<char*>(&other->_impl_.stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[3]);
}

// ===================================================================

class OfflineFile::_Internal {
 public:
};

OfflineFile::OfflineFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.OfflineFile)
}
OfflineFile::OfflineFile(const OfflineFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OfflineFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:cqhttp.OfflineFile)
}

inline void OfflineFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OfflineFile::~OfflineFile() {
  // @@protoc_insertion_point(destructor:cqhttp.OfflineFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OfflineFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.url_.Destroy();
}

void OfflineFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OfflineFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.OfflineFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OfflineFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.OfflineFile.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.OfflineFile.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OfflineFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.OfflineFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.OfflineFile.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.OfflineFile.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.OfflineFile)
  return target;
}

size_t OfflineFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.OfflineFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OfflineFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OfflineFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OfflineFile::GetClassData() const { return &_class_data_; }


void OfflineFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OfflineFile*>(&to_msg);
  auto& from = static_cast<const OfflineFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.OfflineFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OfflineFile::CopyFrom(const OfflineFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.OfflineFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineFile::IsInitialized() const {
  return true;
}

void OfflineFile::InternalSwap(OfflineFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OfflineFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[4]);
}

// ===================================================================

class GroupFile::_Internal {
 public:
};

GroupFile::GroupFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.GroupFile)
}
GroupFile::GroupFile(const GroupFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.busid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.busid_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.busid_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.GroupFile)
}

inline void GroupFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.busid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupFile::~GroupFile() {
  // @@protoc_insertion_point(destructor:cqhttp.GroupFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void GroupFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.GroupFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.busid_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.busid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupFile.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.GroupFile.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 busid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.busid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.GroupFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupFile.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.GroupFile.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // int64 busid = 4;
  if (this->_internal_busid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_busid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.GroupFile)
  return target;
}

size_t GroupFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.GroupFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 busid = 4;
  if (this->_internal_busid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_busid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupFile::GetClassData() const { return &_class_data_; }


void GroupFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupFile*>(&to_msg);
  auto& from = static_cast<const GroupFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.GroupFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_busid() != 0) {
    _this->_internal_set_busid(from._internal_busid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupFile::CopyFrom(const GroupFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.GroupFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupFile::IsInitialized() const {
  return true;
}

void GroupFile::InternalSwap(GroupFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupFile, _impl_.busid_)
      + sizeof(GroupFile::_impl_.busid_)
      - PROTOBUF_FIELD_OFFSET(GroupFile, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[5]);
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Device* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_){}
    , decltype(_impl_.device_kind_){}
    , decltype(_impl_.app_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_kind().empty()) {
    _this->_impl_.device_kind_.Set(from._internal_device_kind(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.app_id_ = from._impl_.app_id_;
  // @@protoc_insertion_point(copy_constructor:cqhttp.Device)
}

inline void Device::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_){}
    , decltype(_impl_.device_kind_){}
    , decltype(_impl_.app_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:cqhttp.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
  _impl_.device_kind_.Destroy();
}

void Device::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_name_.ClearToEmpty();
  _impl_.device_kind_.ClearToEmpty();
  _impl_.app_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Device.device_name"));
        } else
          goto handle_unusual;
        continue;
      // string device_kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Device.device_kind"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 app_id = 1;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_app_id(), target);
  }

  // string device_name = 2;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Device.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  // string device_kind = 3;
  if (!this->_internal_device_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_kind().data(), static_cast<int>(this->_internal_device_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Device.device_kind");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_name = 2;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // string device_kind = 3;
  if (!this->_internal_device_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_kind());
  }

  // int64 app_id = 1;
  if (this->_internal_app_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }


void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Device*>(&to_msg);
  auto& from = static_cast<const Device&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.Device)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (!from._internal_device_kind().empty()) {
    _this->_internal_set_device_kind(from._internal_device_kind());
  }
  if (from._internal_app_id() != 0) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_kind_, lhs_arena,
      &other->_impl_.device_kind_, rhs_arena
  );
  swap(_impl_.app_id_, other->_impl_.app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[6]);
}

// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.uploader_name_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.busid_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.upload_time_){}
    , decltype(_impl_.dead_time_){}
    , decltype(_impl_.modify_time_){}
    , decltype(_impl_.uploader_){}
    , decltype(_impl_.download_times_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    _this->_impl_.file_id_.Set(from._internal_file_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uploader_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploader_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uploader_name().empty()) {
    _this->_impl_.uploader_name_.Set(from._internal_uploader_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.download_times_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.download_times_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.uploader_name_){}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.busid_){0}
    , decltype(_impl_.file_size_){int64_t{0}}
    , decltype(_impl_.upload_time_){int64_t{0}}
    , decltype(_impl_.dead_time_){int64_t{0}}
    , decltype(_impl_.modify_time_){int64_t{0}}
    , decltype(_impl_.uploader_){int64_t{0}}
    , decltype(_impl_.download_times_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uploader_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploader_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:cqhttp.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_id_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.uploader_name_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_id_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.uploader_name_.ClearToEmpty();
  ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.download_times_) -
      reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.download_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.File.file_id"));
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.File.file_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 busid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.busid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 upload_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.upload_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dead_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dead_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 modify_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.modify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 download_times = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.download_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uploader = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.uploader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uploader_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_uploader_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.File.uploader_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  // string file_id = 2;
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.File.file_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_id(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.File.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // int32 busid = 4;
  if (this->_internal_busid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_busid(), target);
  }

  // int64 file_size = 5;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_file_size(), target);
  }

  // int64 upload_time = 6;
  if (this->_internal_upload_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_upload_time(), target);
  }

  // int64 dead_time = 7;
  if (this->_internal_dead_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_dead_time(), target);
  }

  // int64 modify_time = 8;
  if (this->_internal_modify_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_modify_time(), target);
  }

  // int32 download_times = 9;
  if (this->_internal_download_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_download_times(), target);
  }

  // int64 uploader = 10;
  if (this->_internal_uploader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_uploader(), target);
  }

  // string uploader_name = 11;
  if (!this->_internal_uploader_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploader_name().data(), static_cast<int>(this->_internal_uploader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.File.uploader_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_uploader_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_id = 2;
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string uploader_name = 11;
  if (!this->_internal_uploader_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploader_name());
  }

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // int32 busid = 4;
  if (this->_internal_busid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_busid());
  }

  // int64 file_size = 5;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size());
  }

  // int64 upload_time = 6;
  if (this->_internal_upload_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_upload_time());
  }

  // int64 dead_time = 7;
  if (this->_internal_dead_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dead_time());
  }

  // int64 modify_time = 8;
  if (this->_internal_modify_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modify_time());
  }

  // int64 uploader = 10;
  if (this->_internal_uploader() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uploader());
  }

  // int32 download_times = 9;
  if (this->_internal_download_times() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_download_times());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }


void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<File*>(&to_msg);
  auto& from = static_cast<const File&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.File)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_id().empty()) {
    _this->_internal_set_file_id(from._internal_file_id());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_uploader_name().empty()) {
    _this->_internal_set_uploader_name(from._internal_uploader_name());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_busid() != 0) {
    _this->_internal_set_busid(from._internal_busid());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_upload_time() != 0) {
    _this->_internal_set_upload_time(from._internal_upload_time());
  }
  if (from._internal_dead_time() != 0) {
    _this->_internal_set_dead_time(from._internal_dead_time());
  }
  if (from._internal_modify_time() != 0) {
    _this->_internal_set_modify_time(from._internal_modify_time());
  }
  if (from._internal_uploader() != 0) {
    _this->_internal_set_uploader(from._internal_uploader());
  }
  if (from._internal_download_times() != 0) {
    _this->_internal_set_download_times(from._internal_download_times());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_id_, lhs_arena,
      &other->_impl_.file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uploader_name_, lhs_arena,
      &other->_impl_.uploader_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, _impl_.download_times_)
      + sizeof(File::_impl_.download_times_)
      - PROTOBUF_FIELD_OFFSET(File, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[7]);
}

// ===================================================================

class Folder::_Internal {
 public:
};

Folder::Folder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.Folder)
}
Folder::Folder(const Folder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Folder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.folder_id_){}
    , decltype(_impl_.folder_name_){}
    , decltype(_impl_.creator_name_){}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.total_file_count_){}
    , decltype(_impl_.creator_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.folder_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folder_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_folder_id().empty()) {
    _this->_impl_.folder_id_.Set(from._internal_folder_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.folder_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folder_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_folder_name().empty()) {
    _this->_impl_.folder_name_.Set(from._internal_folder_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_name().empty()) {
    _this->_impl_.creator_name_.Set(from._internal_creator_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.create_time_, &from._impl_.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creator_) -
    reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.creator_));
  // @@protoc_insertion_point(copy_constructor:cqhttp.Folder)
}

inline void Folder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.folder_id_){}
    , decltype(_impl_.folder_name_){}
    , decltype(_impl_.creator_name_){}
    , decltype(_impl_.create_time_){int64_t{0}}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.total_file_count_){0}
    , decltype(_impl_.creator_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.folder_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folder_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.folder_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folder_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Folder::~Folder() {
  // @@protoc_insertion_point(destructor:cqhttp.Folder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Folder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.folder_id_.Destroy();
  _impl_.folder_name_.Destroy();
  _impl_.creator_name_.Destroy();
}

void Folder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Folder::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.Folder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.folder_id_.ClearToEmpty();
  _impl_.folder_name_.ClearToEmpty();
  _impl_.creator_name_.ClearToEmpty();
  ::memset(&_impl_.create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.creator_) -
      reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.creator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Folder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string folder_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_folder_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Folder.folder_id"));
        } else
          goto handle_unusual;
        continue;
      // string folder_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_folder_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Folder.folder_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 create_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 creator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.creator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_creator_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.Folder.creator_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 total_file_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.total_file_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Folder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.Folder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  // string folder_id = 2;
  if (!this->_internal_folder_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_folder_id().data(), static_cast<int>(this->_internal_folder_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Folder.folder_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_folder_id(), target);
  }

  // string folder_name = 3;
  if (!this->_internal_folder_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_folder_name().data(), static_cast<int>(this->_internal_folder_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Folder.folder_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_folder_name(), target);
  }

  // int64 create_time = 4;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_create_time(), target);
  }

  // int64 creator = 5;
  if (this->_internal_creator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_creator(), target);
  }

  // string creator_name = 6;
  if (!this->_internal_creator_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_name().data(), static_cast<int>(this->_internal_creator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.Folder.creator_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_creator_name(), target);
  }

  // int32 total_file_count = 7;
  if (this->_internal_total_file_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_file_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.Folder)
  return target;
}

size_t Folder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.Folder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string folder_id = 2;
  if (!this->_internal_folder_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_folder_id());
  }

  // string folder_name = 3;
  if (!this->_internal_folder_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_folder_name());
  }

  // string creator_name = 6;
  if (!this->_internal_creator_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_name());
  }

  // int64 create_time = 4;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
  }

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // int32 total_file_count = 7;
  if (this->_internal_total_file_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_file_count());
  }

  // int64 creator = 5;
  if (this->_internal_creator() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creator());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Folder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Folder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Folder::GetClassData() const { return &_class_data_; }


void Folder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Folder*>(&to_msg);
  auto& from = static_cast<const Folder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.Folder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_folder_id().empty()) {
    _this->_internal_set_folder_id(from._internal_folder_id());
  }
  if (!from._internal_folder_name().empty()) {
    _this->_internal_set_folder_name(from._internal_folder_name());
  }
  if (!from._internal_creator_name().empty()) {
    _this->_internal_set_creator_name(from._internal_creator_name());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_total_file_count() != 0) {
    _this->_internal_set_total_file_count(from._internal_total_file_count());
  }
  if (from._internal_creator() != 0) {
    _this->_internal_set_creator(from._internal_creator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Folder::CopyFrom(const Folder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.Folder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Folder::IsInitialized() const {
  return true;
}

void Folder::InternalSwap(Folder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.folder_id_, lhs_arena,
      &other->_impl_.folder_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.folder_name_, lhs_arena,
      &other->_impl_.folder_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_name_, lhs_arena,
      &other->_impl_.creator_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Folder, _impl_.creator_)
      + sizeof(Folder::_impl_.creator_)
      - PROTOBUF_FIELD_OFFSET(Folder, _impl_.create_time_)>(
          reinterpret_cast<char*>(&_impl_.create_time_),
          reinterpret_cast<char*>(&other->_impl_.create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Folder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[8]);
}

// ===================================================================

class ForwardMessage_Data::_Internal {
 public:
};

ForwardMessage_Data::ForwardMessage_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.ForwardMessage.Data)
}
ForwardMessage_Data::ForwardMessage_Data(const ForwardMessage_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForwardMessage_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.uin_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uin().empty()) {
    _this->_impl_.uin_.Set(from._internal_uin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cqhttp.ForwardMessage.Data)
}

inline void ForwardMessage_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.uin_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ForwardMessage_Data::~ForwardMessage_Data() {
  // @@protoc_insertion_point(destructor:cqhttp.ForwardMessage.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardMessage_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.uin_.Destroy();
  _impl_.content_.Destroy();
}

void ForwardMessage_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForwardMessage_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.ForwardMessage.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.uin_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardMessage_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.ForwardMessage.Data.name"));
        } else
          goto handle_unusual;
        continue;
      // string uin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.ForwardMessage.Data.uin"));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.ForwardMessage.Data.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardMessage_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.ForwardMessage.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.ForwardMessage.Data.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string uin = 2;
  if (!this->_internal_uin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uin().data(), static_cast<int>(this->_internal_uin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.ForwardMessage.Data.uin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uin(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.ForwardMessage.Data.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.ForwardMessage.Data)
  return target;
}

size_t ForwardMessage_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.ForwardMessage.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uin = 2;
  if (!this->_internal_uin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uin());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardMessage_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForwardMessage_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardMessage_Data::GetClassData() const { return &_class_data_; }


void ForwardMessage_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForwardMessage_Data*>(&to_msg);
  auto& from = static_cast<const ForwardMessage_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.ForwardMessage.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uin().empty()) {
    _this->_internal_set_uin(from._internal_uin());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardMessage_Data::CopyFrom(const ForwardMessage_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.ForwardMessage.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMessage_Data::IsInitialized() const {
  return true;
}

void ForwardMessage_Data::InternalSwap(ForwardMessage_Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uin_, lhs_arena,
      &other->_impl_.uin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardMessage_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[9]);
}

// ===================================================================

class ForwardMessage::_Internal {
 public:
  static const ::cqhttp::ForwardMessage_Data& data(const ForwardMessage* msg);
};

const ::cqhttp::ForwardMessage_Data&
ForwardMessage::_Internal::data(const ForwardMessage* msg) {
  return *msg->_impl_.data_;
}
ForwardMessage::ForwardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cqhttp.ForwardMessage)
}
ForwardMessage::ForwardMessage(const ForwardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForwardMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::cqhttp::ForwardMessage_Data(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:cqhttp.ForwardMessage)
}

inline void ForwardMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ForwardMessage::~ForwardMessage() {
  // @@protoc_insertion_point(destructor:cqhttp.ForwardMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ForwardMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForwardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cqhttp.ForwardMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cqhttp.ForwardMessage.type"));
        } else
          goto handle_unusual;
        continue;
      // .cqhttp.ForwardMessage.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cqhttp.ForwardMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cqhttp.ForwardMessage.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // .cqhttp.ForwardMessage.Data data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cqhttp.ForwardMessage)
  return target;
}

size_t ForwardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cqhttp.ForwardMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .cqhttp.ForwardMessage.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForwardMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardMessage::GetClassData() const { return &_class_data_; }


void ForwardMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForwardMessage*>(&to_msg);
  auto& from = static_cast<const ForwardMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cqhttp.ForwardMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::cqhttp::ForwardMessage_Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardMessage::CopyFrom(const ForwardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cqhttp.ForwardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMessage::IsInitialized() const {
  return true;
}

void ForwardMessage::InternalSwap(ForwardMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cqhttp_5fbase_2eproto_getter, &descriptor_table_cqhttp_5fbase_2eproto_once,
      file_level_metadata_cqhttp_5fbase_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cqhttp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cqhttp::Sender*
Arena::CreateMaybeMessage< ::cqhttp::Sender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::Sender >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::Anonymous*
Arena::CreateMaybeMessage< ::cqhttp::Anonymous >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::Anonymous >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::Status_Statistics*
Arena::CreateMaybeMessage< ::cqhttp::Status_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::Status_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::Status*
Arena::CreateMaybeMessage< ::cqhttp::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::OfflineFile*
Arena::CreateMaybeMessage< ::cqhttp::OfflineFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::OfflineFile >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::GroupFile*
Arena::CreateMaybeMessage< ::cqhttp::GroupFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::GroupFile >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::Device*
Arena::CreateMaybeMessage< ::cqhttp::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::File*
Arena::CreateMaybeMessage< ::cqhttp::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::File >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::Folder*
Arena::CreateMaybeMessage< ::cqhttp::Folder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::Folder >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::ForwardMessage_Data*
Arena::CreateMaybeMessage< ::cqhttp::ForwardMessage_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::ForwardMessage_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::cqhttp::ForwardMessage*
Arena::CreateMaybeMessage< ::cqhttp::ForwardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cqhttp::ForwardMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
