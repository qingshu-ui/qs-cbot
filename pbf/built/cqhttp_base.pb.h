// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cqhttp_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cqhttp_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cqhttp_5fbase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cqhttp_5fbase_2eproto;
namespace cqhttp {
class Anonymous;
struct AnonymousDefaultTypeInternal;
extern AnonymousDefaultTypeInternal _Anonymous_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Folder;
struct FolderDefaultTypeInternal;
extern FolderDefaultTypeInternal _Folder_default_instance_;
class ForwardMessage;
struct ForwardMessageDefaultTypeInternal;
extern ForwardMessageDefaultTypeInternal _ForwardMessage_default_instance_;
class ForwardMessage_Data;
struct ForwardMessage_DataDefaultTypeInternal;
extern ForwardMessage_DataDefaultTypeInternal _ForwardMessage_Data_default_instance_;
class GroupFile;
struct GroupFileDefaultTypeInternal;
extern GroupFileDefaultTypeInternal _GroupFile_default_instance_;
class OfflineFile;
struct OfflineFileDefaultTypeInternal;
extern OfflineFileDefaultTypeInternal _OfflineFile_default_instance_;
class Sender;
struct SenderDefaultTypeInternal;
extern SenderDefaultTypeInternal _Sender_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Status_Statistics;
struct Status_StatisticsDefaultTypeInternal;
extern Status_StatisticsDefaultTypeInternal _Status_Statistics_default_instance_;
}  // namespace cqhttp
PROTOBUF_NAMESPACE_OPEN
template<> ::cqhttp::Anonymous* Arena::CreateMaybeMessage<::cqhttp::Anonymous>(Arena*);
template<> ::cqhttp::Device* Arena::CreateMaybeMessage<::cqhttp::Device>(Arena*);
template<> ::cqhttp::File* Arena::CreateMaybeMessage<::cqhttp::File>(Arena*);
template<> ::cqhttp::Folder* Arena::CreateMaybeMessage<::cqhttp::Folder>(Arena*);
template<> ::cqhttp::ForwardMessage* Arena::CreateMaybeMessage<::cqhttp::ForwardMessage>(Arena*);
template<> ::cqhttp::ForwardMessage_Data* Arena::CreateMaybeMessage<::cqhttp::ForwardMessage_Data>(Arena*);
template<> ::cqhttp::GroupFile* Arena::CreateMaybeMessage<::cqhttp::GroupFile>(Arena*);
template<> ::cqhttp::OfflineFile* Arena::CreateMaybeMessage<::cqhttp::OfflineFile>(Arena*);
template<> ::cqhttp::Sender* Arena::CreateMaybeMessage<::cqhttp::Sender>(Arena*);
template<> ::cqhttp::Status* Arena::CreateMaybeMessage<::cqhttp::Status>(Arena*);
template<> ::cqhttp::Status_Statistics* Arena::CreateMaybeMessage<::cqhttp::Status_Statistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cqhttp {

enum CQHTTP_TYPE : int {
  message = 0,
  request = 1,
  notice = 2,
  meta_event = 3,
  private_ = 4,
  group = 5,
  friend_ = 6,
  normal = 7,
  anonymous = 8,
  group_self = 9,
  group_upload = 10,
  group_admin = 11,
  group_decrease = 12,
  group_increase = 13,
  group_ban = 14,
  friend_add = 15,
  group_recall = 16,
  friend_recall = 17,
  group_card = 18,
  offline_file = 19,
  client_status = 20,
  essence = 21,
  notify = 22,
  honor = 23,
  poke = 24,
  lucky_king = 25,
  title = 26,
  lifecycle = 27,
  heartbeat = 28,
  enable = 29,
  disable = 39,
  connect = 31,
  CQHTTP_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CQHTTP_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CQHTTP_TYPE_IsValid(int value);
constexpr CQHTTP_TYPE CQHTTP_TYPE_MIN = message;
constexpr CQHTTP_TYPE CQHTTP_TYPE_MAX = disable;
constexpr int CQHTTP_TYPE_ARRAYSIZE = CQHTTP_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CQHTTP_TYPE_descriptor();
template<typename T>
inline const std::string& CQHTTP_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CQHTTP_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CQHTTP_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CQHTTP_TYPE_descriptor(), enum_t_value);
}
inline bool CQHTTP_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CQHTTP_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CQHTTP_TYPE>(
    CQHTTP_TYPE_descriptor(), name, value);
}
// ===================================================================

class Sender final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.Sender) */ {
 public:
  inline Sender() : Sender(nullptr) {}
  ~Sender() override;
  explicit PROTOBUF_CONSTEXPR Sender(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sender(const Sender& from);
  Sender(Sender&& from) noexcept
    : Sender() {
    *this = ::std::move(from);
  }

  inline Sender& operator=(const Sender& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sender& operator=(Sender&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sender& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sender* internal_default_instance() {
    return reinterpret_cast<const Sender*>(
               &_Sender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sender& a, Sender& b) {
    a.Swap(&b);
  }
  inline void Swap(Sender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sender>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sender& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sender& from) {
    Sender::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sender* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.Sender";
  }
  protected:
  explicit Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kSexFieldNumber = 3,
    kCardFieldNumber = 5,
    kAreaFieldNumber = 6,
    kLevelFieldNumber = 7,
    kRoleFieldNumber = 8,
    kTitleFieldNumber = 9,
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 4,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sex();
  PROTOBUF_NODISCARD std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string card = 5;
  void clear_card();
  const std::string& card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card();
  PROTOBUF_NODISCARD std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string area = 6;
  void clear_area();
  const std::string& area() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_area(ArgT0&& arg0, ArgT... args);
  std::string* mutable_area();
  PROTOBUF_NODISCARD std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string level = 7;
  void clear_level();
  const std::string& level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level();
  PROTOBUF_NODISCARD std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string role = 8;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string title = 9;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 age = 4;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.Sender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int64_t user_id_;
    int32_t age_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class Anonymous final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.Anonymous) */ {
 public:
  inline Anonymous() : Anonymous(nullptr) {}
  ~Anonymous() override;
  explicit PROTOBUF_CONSTEXPR Anonymous(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Anonymous(const Anonymous& from);
  Anonymous(Anonymous&& from) noexcept
    : Anonymous() {
    *this = ::std::move(from);
  }

  inline Anonymous& operator=(const Anonymous& from) {
    CopyFrom(from);
    return *this;
  }
  inline Anonymous& operator=(Anonymous&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Anonymous& default_instance() {
    return *internal_default_instance();
  }
  static inline const Anonymous* internal_default_instance() {
    return reinterpret_cast<const Anonymous*>(
               &_Anonymous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Anonymous& a, Anonymous& b) {
    a.Swap(&b);
  }
  inline void Swap(Anonymous* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Anonymous* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Anonymous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Anonymous>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Anonymous& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Anonymous& from) {
    Anonymous::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Anonymous* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.Anonymous";
  }
  protected:
  explicit Anonymous(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFlagFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string flag = 3;
  void clear_flag();
  const std::string& flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag();
  PROTOBUF_NODISCARD std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.Anonymous)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class Status_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.Status_Statistics) */ {
 public:
  inline Status_Statistics() : Status_Statistics(nullptr) {}
  ~Status_Statistics() override;
  explicit PROTOBUF_CONSTEXPR Status_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status_Statistics(const Status_Statistics& from);
  Status_Statistics(Status_Statistics&& from) noexcept
    : Status_Statistics() {
    *this = ::std::move(from);
  }

  inline Status_Statistics& operator=(const Status_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status_Statistics& operator=(Status_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status_Statistics* internal_default_instance() {
    return reinterpret_cast<const Status_Statistics*>(
               &_Status_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status_Statistics& a, Status_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Status_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status_Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status_Statistics& from) {
    Status_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.Status_Statistics";
  }
  protected:
  explicit Status_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketReceivedFieldNumber = 1,
    kPacketSentFieldNumber = 2,
    kPacketLostFieldNumber = 3,
    kMessageReceivedFieldNumber = 4,
    kMessageSentFieldNumber = 5,
    kDisconnectTimesFieldNumber = 6,
    kLostTimesFieldNumber = 7,
    kLastMessageTimeFieldNumber = 8,
  };
  // uint64 PacketReceived = 1;
  void clear_packetreceived();
  uint64_t packetreceived() const;
  void set_packetreceived(uint64_t value);
  private:
  uint64_t _internal_packetreceived() const;
  void _internal_set_packetreceived(uint64_t value);
  public:

  // uint64 PacketSent = 2;
  void clear_packetsent();
  uint64_t packetsent() const;
  void set_packetsent(uint64_t value);
  private:
  uint64_t _internal_packetsent() const;
  void _internal_set_packetsent(uint64_t value);
  public:

  // uint64 PacketLost = 3;
  void clear_packetlost();
  uint64_t packetlost() const;
  void set_packetlost(uint64_t value);
  private:
  uint64_t _internal_packetlost() const;
  void _internal_set_packetlost(uint64_t value);
  public:

  // uint64 MessageReceived = 4;
  void clear_messagereceived();
  uint64_t messagereceived() const;
  void set_messagereceived(uint64_t value);
  private:
  uint64_t _internal_messagereceived() const;
  void _internal_set_messagereceived(uint64_t value);
  public:

  // uint64 MessageSent = 5;
  void clear_messagesent();
  uint64_t messagesent() const;
  void set_messagesent(uint64_t value);
  private:
  uint64_t _internal_messagesent() const;
  void _internal_set_messagesent(uint64_t value);
  public:

  // uint32 DisconnectTimes = 6;
  void clear_disconnecttimes();
  uint32_t disconnecttimes() const;
  void set_disconnecttimes(uint32_t value);
  private:
  uint32_t _internal_disconnecttimes() const;
  void _internal_set_disconnecttimes(uint32_t value);
  public:

  // uint32 LostTimes = 7;
  void clear_losttimes();
  uint32_t losttimes() const;
  void set_losttimes(uint32_t value);
  private:
  uint32_t _internal_losttimes() const;
  void _internal_set_losttimes(uint32_t value);
  public:

  // int64 LastMessageTime = 8;
  void clear_lastmessagetime();
  int64_t lastmessagetime() const;
  void set_lastmessagetime(int64_t value);
  private:
  int64_t _internal_lastmessagetime() const;
  void _internal_set_lastmessagetime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.Status_Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t packetreceived_;
    uint64_t packetsent_;
    uint64_t packetlost_;
    uint64_t messagereceived_;
    uint64_t messagesent_;
    uint32_t disconnecttimes_;
    uint32_t losttimes_;
    int64_t lastmessagetime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatFieldNumber = 6,
    kAppInitializedFieldNumber = 1,
    kAppEnabledFieldNumber = 2,
    kPluginsGoodFieldNumber = 3,
    kAppGoodFieldNumber = 4,
    kOnlineFieldNumber = 5,
  };
  // .cqhttp.Status_Statistics stat = 6;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::cqhttp::Status_Statistics& stat() const;
  PROTOBUF_NODISCARD ::cqhttp::Status_Statistics* release_stat();
  ::cqhttp::Status_Statistics* mutable_stat();
  void set_allocated_stat(::cqhttp::Status_Statistics* stat);
  private:
  const ::cqhttp::Status_Statistics& _internal_stat() const;
  ::cqhttp::Status_Statistics* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::cqhttp::Status_Statistics* stat);
  ::cqhttp::Status_Statistics* unsafe_arena_release_stat();

  // bool app_initialized = 1;
  void clear_app_initialized();
  bool app_initialized() const;
  void set_app_initialized(bool value);
  private:
  bool _internal_app_initialized() const;
  void _internal_set_app_initialized(bool value);
  public:

  // bool app_enabled = 2;
  void clear_app_enabled();
  bool app_enabled() const;
  void set_app_enabled(bool value);
  private:
  bool _internal_app_enabled() const;
  void _internal_set_app_enabled(bool value);
  public:

  // bool plugins_good = 3;
  void clear_plugins_good();
  bool plugins_good() const;
  void set_plugins_good(bool value);
  private:
  bool _internal_plugins_good() const;
  void _internal_set_plugins_good(bool value);
  public:

  // bool app_good = 4;
  void clear_app_good();
  bool app_good() const;
  void set_app_good(bool value);
  private:
  bool _internal_app_good() const;
  void _internal_set_app_good(bool value);
  public:

  // bool online = 5;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::Status_Statistics* stat_;
    bool app_initialized_;
    bool app_enabled_;
    bool plugins_good_;
    bool app_good_;
    bool online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class OfflineFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.OfflineFile) */ {
 public:
  inline OfflineFile() : OfflineFile(nullptr) {}
  ~OfflineFile() override;
  explicit PROTOBUF_CONSTEXPR OfflineFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineFile(const OfflineFile& from);
  OfflineFile(OfflineFile&& from) noexcept
    : OfflineFile() {
    *this = ::std::move(from);
  }

  inline OfflineFile& operator=(const OfflineFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineFile& operator=(OfflineFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineFile* internal_default_instance() {
    return reinterpret_cast<const OfflineFile*>(
               &_OfflineFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OfflineFile& a, OfflineFile& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OfflineFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OfflineFile& from) {
    OfflineFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.OfflineFile";
  }
  protected:
  explicit OfflineFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.OfflineFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    int64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class GroupFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupFile) */ {
 public:
  inline GroupFile() : GroupFile(nullptr) {}
  ~GroupFile() override;
  explicit PROTOBUF_CONSTEXPR GroupFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupFile(const GroupFile& from);
  GroupFile(GroupFile&& from) noexcept
    : GroupFile() {
    *this = ::std::move(from);
  }

  inline GroupFile& operator=(const GroupFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupFile& operator=(GroupFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupFile* internal_default_instance() {
    return reinterpret_cast<const GroupFile*>(
               &_GroupFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupFile& a, GroupFile& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupFile& from) {
    GroupFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupFile";
  }
  protected:
  explicit GroupFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBusidFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 size = 3;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 busid = 4;
  void clear_busid();
  int64_t busid() const;
  void set_busid(int64_t value);
  private:
  int64_t _internal_busid() const;
  void _internal_set_busid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t size_;
    int64_t busid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit PROTOBUF_CONSTEXPR Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Device& from) {
    Device::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 2,
    kDeviceKindFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // string device_name = 2;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string device_kind = 3;
  void clear_device_kind();
  const std::string& device_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_kind();
  PROTOBUF_NODISCARD std::string* release_device_kind();
  void set_allocated_device_kind(std::string* device_kind);
  private:
  const std::string& _internal_device_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_kind(const std::string& value);
  std::string* _internal_mutable_device_kind();
  public:

  // int64 app_id = 1;
  void clear_app_id();
  int64_t app_id() const;
  void set_app_id(int64_t value);
  private:
  int64_t _internal_app_id() const;
  void _internal_set_app_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_kind_;
    int64_t app_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kUploaderNameFieldNumber = 11,
    kGroupIdFieldNumber = 1,
    kBusidFieldNumber = 4,
    kFileSizeFieldNumber = 5,
    kUploadTimeFieldNumber = 6,
    kDeadTimeFieldNumber = 7,
    kModifyTimeFieldNumber = 8,
    kUploaderFieldNumber = 10,
    kDownloadTimesFieldNumber = 9,
  };
  // string file_id = 2;
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string uploader_name = 11;
  void clear_uploader_name();
  const std::string& uploader_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uploader_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uploader_name();
  PROTOBUF_NODISCARD std::string* release_uploader_name();
  void set_allocated_uploader_name(std::string* uploader_name);
  private:
  const std::string& _internal_uploader_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uploader_name(const std::string& value);
  std::string* _internal_mutable_uploader_name();
  public:

  // int32 group_id = 1;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // int32 busid = 4;
  void clear_busid();
  int32_t busid() const;
  void set_busid(int32_t value);
  private:
  int32_t _internal_busid() const;
  void _internal_set_busid(int32_t value);
  public:

  // int64 file_size = 5;
  void clear_file_size();
  int64_t file_size() const;
  void set_file_size(int64_t value);
  private:
  int64_t _internal_file_size() const;
  void _internal_set_file_size(int64_t value);
  public:

  // int64 upload_time = 6;
  void clear_upload_time();
  int64_t upload_time() const;
  void set_upload_time(int64_t value);
  private:
  int64_t _internal_upload_time() const;
  void _internal_set_upload_time(int64_t value);
  public:

  // int64 dead_time = 7;
  void clear_dead_time();
  int64_t dead_time() const;
  void set_dead_time(int64_t value);
  private:
  int64_t _internal_dead_time() const;
  void _internal_set_dead_time(int64_t value);
  public:

  // int64 modify_time = 8;
  void clear_modify_time();
  int64_t modify_time() const;
  void set_modify_time(int64_t value);
  private:
  int64_t _internal_modify_time() const;
  void _internal_set_modify_time(int64_t value);
  public:

  // int64 uploader = 10;
  void clear_uploader();
  int64_t uploader() const;
  void set_uploader(int64_t value);
  private:
  int64_t _internal_uploader() const;
  void _internal_set_uploader(int64_t value);
  public:

  // int32 download_times = 9;
  void clear_download_times();
  int32_t download_times() const;
  void set_download_times(int32_t value);
  private:
  int32_t _internal_download_times() const;
  void _internal_set_download_times(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploader_name_;
    int32_t group_id_;
    int32_t busid_;
    int64_t file_size_;
    int64_t upload_time_;
    int64_t dead_time_;
    int64_t modify_time_;
    int64_t uploader_;
    int32_t download_times_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class Folder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.Folder) */ {
 public:
  inline Folder() : Folder(nullptr) {}
  ~Folder() override;
  explicit PROTOBUF_CONSTEXPR Folder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Folder(const Folder& from);
  Folder(Folder&& from) noexcept
    : Folder() {
    *this = ::std::move(from);
  }

  inline Folder& operator=(const Folder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Folder& operator=(Folder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Folder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Folder* internal_default_instance() {
    return reinterpret_cast<const Folder*>(
               &_Folder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Folder& a, Folder& b) {
    a.Swap(&b);
  }
  inline void Swap(Folder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Folder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Folder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Folder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Folder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Folder& from) {
    Folder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Folder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.Folder";
  }
  protected:
  explicit Folder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 2,
    kFolderNameFieldNumber = 3,
    kCreatorNameFieldNumber = 6,
    kCreateTimeFieldNumber = 4,
    kGroupIdFieldNumber = 1,
    kTotalFileCountFieldNumber = 7,
    kCreatorFieldNumber = 5,
  };
  // string folder_id = 2;
  void clear_folder_id();
  const std::string& folder_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder_id();
  PROTOBUF_NODISCARD std::string* release_folder_id();
  void set_allocated_folder_id(std::string* folder_id);
  private:
  const std::string& _internal_folder_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder_id(const std::string& value);
  std::string* _internal_mutable_folder_id();
  public:

  // string folder_name = 3;
  void clear_folder_name();
  const std::string& folder_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder_name();
  PROTOBUF_NODISCARD std::string* release_folder_name();
  void set_allocated_folder_name(std::string* folder_name);
  private:
  const std::string& _internal_folder_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder_name(const std::string& value);
  std::string* _internal_mutable_folder_name();
  public:

  // string creator_name = 6;
  void clear_creator_name();
  const std::string& creator_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_name();
  PROTOBUF_NODISCARD std::string* release_creator_name();
  void set_allocated_creator_name(std::string* creator_name);
  private:
  const std::string& _internal_creator_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_name(const std::string& value);
  std::string* _internal_mutable_creator_name();
  public:

  // int64 create_time = 4;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // int32 group_id = 1;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // int32 total_file_count = 7;
  void clear_total_file_count();
  int32_t total_file_count() const;
  void set_total_file_count(int32_t value);
  private:
  int32_t _internal_total_file_count() const;
  void _internal_set_total_file_count(int32_t value);
  public:

  // int64 creator = 5;
  void clear_creator();
  int64_t creator() const;
  void set_creator(int64_t value);
  private:
  int64_t _internal_creator() const;
  void _internal_set_creator(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.Folder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_name_;
    int64_t create_time_;
    int32_t group_id_;
    int32_t total_file_count_;
    int64_t creator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class ForwardMessage_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.ForwardMessage.Data) */ {
 public:
  inline ForwardMessage_Data() : ForwardMessage_Data(nullptr) {}
  ~ForwardMessage_Data() override;
  explicit PROTOBUF_CONSTEXPR ForwardMessage_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardMessage_Data(const ForwardMessage_Data& from);
  ForwardMessage_Data(ForwardMessage_Data&& from) noexcept
    : ForwardMessage_Data() {
    *this = ::std::move(from);
  }

  inline ForwardMessage_Data& operator=(const ForwardMessage_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardMessage_Data& operator=(ForwardMessage_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardMessage_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardMessage_Data* internal_default_instance() {
    return reinterpret_cast<const ForwardMessage_Data*>(
               &_ForwardMessage_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ForwardMessage_Data& a, ForwardMessage_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardMessage_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardMessage_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardMessage_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardMessage_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardMessage_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForwardMessage_Data& from) {
    ForwardMessage_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardMessage_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.ForwardMessage.Data";
  }
  protected:
  explicit ForwardMessage_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUinFieldNumber = 2,
    kContentFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uin = 2;
  void clear_uin();
  const std::string& uin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uin();
  PROTOBUF_NODISCARD std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.ForwardMessage.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// -------------------------------------------------------------------

class ForwardMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.ForwardMessage) */ {
 public:
  inline ForwardMessage() : ForwardMessage(nullptr) {}
  ~ForwardMessage() override;
  explicit PROTOBUF_CONSTEXPR ForwardMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardMessage(const ForwardMessage& from);
  ForwardMessage(ForwardMessage&& from) noexcept
    : ForwardMessage() {
    *this = ::std::move(from);
  }

  inline ForwardMessage& operator=(const ForwardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardMessage& operator=(ForwardMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardMessage* internal_default_instance() {
    return reinterpret_cast<const ForwardMessage*>(
               &_ForwardMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ForwardMessage& a, ForwardMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForwardMessage& from) {
    ForwardMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.ForwardMessage";
  }
  protected:
  explicit ForwardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ForwardMessage_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .cqhttp.ForwardMessage.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::cqhttp::ForwardMessage_Data& data() const;
  PROTOBUF_NODISCARD ::cqhttp::ForwardMessage_Data* release_data();
  ::cqhttp::ForwardMessage_Data* mutable_data();
  void set_allocated_data(::cqhttp::ForwardMessage_Data* data);
  private:
  const ::cqhttp::ForwardMessage_Data& _internal_data() const;
  ::cqhttp::ForwardMessage_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::cqhttp::ForwardMessage_Data* data);
  ::cqhttp::ForwardMessage_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:cqhttp.ForwardMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::cqhttp::ForwardMessage_Data* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sender

// int64 user_id = 1;
inline void Sender::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t Sender::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t Sender::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.user_id)
  return _internal_user_id();
}
inline void Sender::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void Sender::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.Sender.user_id)
}

// string nickname = 2;
inline void Sender::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Sender::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.nickname)
}
inline std::string* Sender::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.nickname)
  return _s;
}
inline const std::string& Sender::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void Sender::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.nickname)
  return _impl_.nickname_.Release();
}
inline void Sender::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.nickname)
}

// string sex = 3;
inline void Sender::clear_sex() {
  _impl_.sex_.ClearToEmpty();
}
inline const std::string& Sender::sex() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.sex)
  return _internal_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_sex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.sex)
}
inline std::string* Sender::mutable_sex() {
  std::string* _s = _internal_mutable_sex();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.sex)
  return _s;
}
inline const std::string& Sender::_internal_sex() const {
  return _impl_.sex_.Get();
}
inline void Sender::_internal_set_sex(const std::string& value) {
  
  _impl_.sex_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_sex() {
  
  return _impl_.sex_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_sex() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.sex)
  return _impl_.sex_.Release();
}
inline void Sender::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  _impl_.sex_.SetAllocated(sex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sex_.IsDefault()) {
    _impl_.sex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.sex)
}

// int32 age = 4;
inline void Sender::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t Sender::_internal_age() const {
  return _impl_.age_;
}
inline int32_t Sender::age() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.age)
  return _internal_age();
}
inline void Sender::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void Sender::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:cqhttp.Sender.age)
}

// string card = 5;
inline void Sender::clear_card() {
  _impl_.card_.ClearToEmpty();
}
inline const std::string& Sender::card() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.card)
  return _internal_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_card(ArgT0&& arg0, ArgT... args) {
 
 _impl_.card_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.card)
}
inline std::string* Sender::mutable_card() {
  std::string* _s = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.card)
  return _s;
}
inline const std::string& Sender::_internal_card() const {
  return _impl_.card_.Get();
}
inline void Sender::_internal_set_card(const std::string& value) {
  
  _impl_.card_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_card() {
  
  return _impl_.card_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_card() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.card)
  return _impl_.card_.Release();
}
inline void Sender::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  _impl_.card_.SetAllocated(card, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.card_.IsDefault()) {
    _impl_.card_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.card)
}

// string area = 6;
inline void Sender::clear_area() {
  _impl_.area_.ClearToEmpty();
}
inline const std::string& Sender::area() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.area)
  return _internal_area();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_area(ArgT0&& arg0, ArgT... args) {
 
 _impl_.area_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.area)
}
inline std::string* Sender::mutable_area() {
  std::string* _s = _internal_mutable_area();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.area)
  return _s;
}
inline const std::string& Sender::_internal_area() const {
  return _impl_.area_.Get();
}
inline void Sender::_internal_set_area(const std::string& value) {
  
  _impl_.area_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_area() {
  
  return _impl_.area_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_area() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.area)
  return _impl_.area_.Release();
}
inline void Sender::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  _impl_.area_.SetAllocated(area, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.area_.IsDefault()) {
    _impl_.area_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.area)
}

// string level = 7;
inline void Sender::clear_level() {
  _impl_.level_.ClearToEmpty();
}
inline const std::string& Sender::level() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.level)
  return _internal_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_level(ArgT0&& arg0, ArgT... args) {
 
 _impl_.level_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.level)
}
inline std::string* Sender::mutable_level() {
  std::string* _s = _internal_mutable_level();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.level)
  return _s;
}
inline const std::string& Sender::_internal_level() const {
  return _impl_.level_.Get();
}
inline void Sender::_internal_set_level(const std::string& value) {
  
  _impl_.level_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_level() {
  
  return _impl_.level_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_level() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.level)
  return _impl_.level_.Release();
}
inline void Sender::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  _impl_.level_.SetAllocated(level, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.level_.IsDefault()) {
    _impl_.level_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.level)
}

// string role = 8;
inline void Sender::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& Sender::role() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.role)
}
inline std::string* Sender::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.role)
  return _s;
}
inline const std::string& Sender::_internal_role() const {
  return _impl_.role_.Get();
}
inline void Sender::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_role() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.role)
  return _impl_.role_.Release();
}
inline void Sender::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.role)
}

// string title = 9;
inline void Sender::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Sender::title() const {
  // @@protoc_insertion_point(field_get:cqhttp.Sender.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sender::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Sender.title)
}
inline std::string* Sender::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cqhttp.Sender.title)
  return _s;
}
inline const std::string& Sender::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Sender::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Sender::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Sender::release_title() {
  // @@protoc_insertion_point(field_release:cqhttp.Sender.title)
  return _impl_.title_.Release();
}
inline void Sender::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Sender.title)
}

// -------------------------------------------------------------------

// Anonymous

// int64 id = 1;
inline void Anonymous::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t Anonymous::_internal_id() const {
  return _impl_.id_;
}
inline int64_t Anonymous::id() const {
  // @@protoc_insertion_point(field_get:cqhttp.Anonymous.id)
  return _internal_id();
}
inline void Anonymous::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void Anonymous::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.Anonymous.id)
}

// string name = 2;
inline void Anonymous::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Anonymous::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.Anonymous.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Anonymous::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Anonymous.name)
}
inline std::string* Anonymous::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.Anonymous.name)
  return _s;
}
inline const std::string& Anonymous::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Anonymous::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Anonymous::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Anonymous::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.Anonymous.name)
  return _impl_.name_.Release();
}
inline void Anonymous::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Anonymous.name)
}

// string flag = 3;
inline void Anonymous::clear_flag() {
  _impl_.flag_.ClearToEmpty();
}
inline const std::string& Anonymous::flag() const {
  // @@protoc_insertion_point(field_get:cqhttp.Anonymous.flag)
  return _internal_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Anonymous::set_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Anonymous.flag)
}
inline std::string* Anonymous::mutable_flag() {
  std::string* _s = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:cqhttp.Anonymous.flag)
  return _s;
}
inline const std::string& Anonymous::_internal_flag() const {
  return _impl_.flag_.Get();
}
inline void Anonymous::_internal_set_flag(const std::string& value) {
  
  _impl_.flag_.Set(value, GetArenaForAllocation());
}
inline std::string* Anonymous::_internal_mutable_flag() {
  
  return _impl_.flag_.Mutable(GetArenaForAllocation());
}
inline std::string* Anonymous::release_flag() {
  // @@protoc_insertion_point(field_release:cqhttp.Anonymous.flag)
  return _impl_.flag_.Release();
}
inline void Anonymous::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  _impl_.flag_.SetAllocated(flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_.IsDefault()) {
    _impl_.flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Anonymous.flag)
}

// -------------------------------------------------------------------

// Status_Statistics

// uint64 PacketReceived = 1;
inline void Status_Statistics::clear_packetreceived() {
  _impl_.packetreceived_ = uint64_t{0u};
}
inline uint64_t Status_Statistics::_internal_packetreceived() const {
  return _impl_.packetreceived_;
}
inline uint64_t Status_Statistics::packetreceived() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.PacketReceived)
  return _internal_packetreceived();
}
inline void Status_Statistics::_internal_set_packetreceived(uint64_t value) {
  
  _impl_.packetreceived_ = value;
}
inline void Status_Statistics::set_packetreceived(uint64_t value) {
  _internal_set_packetreceived(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.PacketReceived)
}

// uint64 PacketSent = 2;
inline void Status_Statistics::clear_packetsent() {
  _impl_.packetsent_ = uint64_t{0u};
}
inline uint64_t Status_Statistics::_internal_packetsent() const {
  return _impl_.packetsent_;
}
inline uint64_t Status_Statistics::packetsent() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.PacketSent)
  return _internal_packetsent();
}
inline void Status_Statistics::_internal_set_packetsent(uint64_t value) {
  
  _impl_.packetsent_ = value;
}
inline void Status_Statistics::set_packetsent(uint64_t value) {
  _internal_set_packetsent(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.PacketSent)
}

// uint64 PacketLost = 3;
inline void Status_Statistics::clear_packetlost() {
  _impl_.packetlost_ = uint64_t{0u};
}
inline uint64_t Status_Statistics::_internal_packetlost() const {
  return _impl_.packetlost_;
}
inline uint64_t Status_Statistics::packetlost() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.PacketLost)
  return _internal_packetlost();
}
inline void Status_Statistics::_internal_set_packetlost(uint64_t value) {
  
  _impl_.packetlost_ = value;
}
inline void Status_Statistics::set_packetlost(uint64_t value) {
  _internal_set_packetlost(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.PacketLost)
}

// uint64 MessageReceived = 4;
inline void Status_Statistics::clear_messagereceived() {
  _impl_.messagereceived_ = uint64_t{0u};
}
inline uint64_t Status_Statistics::_internal_messagereceived() const {
  return _impl_.messagereceived_;
}
inline uint64_t Status_Statistics::messagereceived() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.MessageReceived)
  return _internal_messagereceived();
}
inline void Status_Statistics::_internal_set_messagereceived(uint64_t value) {
  
  _impl_.messagereceived_ = value;
}
inline void Status_Statistics::set_messagereceived(uint64_t value) {
  _internal_set_messagereceived(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.MessageReceived)
}

// uint64 MessageSent = 5;
inline void Status_Statistics::clear_messagesent() {
  _impl_.messagesent_ = uint64_t{0u};
}
inline uint64_t Status_Statistics::_internal_messagesent() const {
  return _impl_.messagesent_;
}
inline uint64_t Status_Statistics::messagesent() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.MessageSent)
  return _internal_messagesent();
}
inline void Status_Statistics::_internal_set_messagesent(uint64_t value) {
  
  _impl_.messagesent_ = value;
}
inline void Status_Statistics::set_messagesent(uint64_t value) {
  _internal_set_messagesent(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.MessageSent)
}

// uint32 DisconnectTimes = 6;
inline void Status_Statistics::clear_disconnecttimes() {
  _impl_.disconnecttimes_ = 0u;
}
inline uint32_t Status_Statistics::_internal_disconnecttimes() const {
  return _impl_.disconnecttimes_;
}
inline uint32_t Status_Statistics::disconnecttimes() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.DisconnectTimes)
  return _internal_disconnecttimes();
}
inline void Status_Statistics::_internal_set_disconnecttimes(uint32_t value) {
  
  _impl_.disconnecttimes_ = value;
}
inline void Status_Statistics::set_disconnecttimes(uint32_t value) {
  _internal_set_disconnecttimes(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.DisconnectTimes)
}

// uint32 LostTimes = 7;
inline void Status_Statistics::clear_losttimes() {
  _impl_.losttimes_ = 0u;
}
inline uint32_t Status_Statistics::_internal_losttimes() const {
  return _impl_.losttimes_;
}
inline uint32_t Status_Statistics::losttimes() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.LostTimes)
  return _internal_losttimes();
}
inline void Status_Statistics::_internal_set_losttimes(uint32_t value) {
  
  _impl_.losttimes_ = value;
}
inline void Status_Statistics::set_losttimes(uint32_t value) {
  _internal_set_losttimes(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.LostTimes)
}

// int64 LastMessageTime = 8;
inline void Status_Statistics::clear_lastmessagetime() {
  _impl_.lastmessagetime_ = int64_t{0};
}
inline int64_t Status_Statistics::_internal_lastmessagetime() const {
  return _impl_.lastmessagetime_;
}
inline int64_t Status_Statistics::lastmessagetime() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status_Statistics.LastMessageTime)
  return _internal_lastmessagetime();
}
inline void Status_Statistics::_internal_set_lastmessagetime(int64_t value) {
  
  _impl_.lastmessagetime_ = value;
}
inline void Status_Statistics::set_lastmessagetime(int64_t value) {
  _internal_set_lastmessagetime(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status_Statistics.LastMessageTime)
}

// -------------------------------------------------------------------

// Status

// bool app_initialized = 1;
inline void Status::clear_app_initialized() {
  _impl_.app_initialized_ = false;
}
inline bool Status::_internal_app_initialized() const {
  return _impl_.app_initialized_;
}
inline bool Status::app_initialized() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status.app_initialized)
  return _internal_app_initialized();
}
inline void Status::_internal_set_app_initialized(bool value) {
  
  _impl_.app_initialized_ = value;
}
inline void Status::set_app_initialized(bool value) {
  _internal_set_app_initialized(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status.app_initialized)
}

// bool app_enabled = 2;
inline void Status::clear_app_enabled() {
  _impl_.app_enabled_ = false;
}
inline bool Status::_internal_app_enabled() const {
  return _impl_.app_enabled_;
}
inline bool Status::app_enabled() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status.app_enabled)
  return _internal_app_enabled();
}
inline void Status::_internal_set_app_enabled(bool value) {
  
  _impl_.app_enabled_ = value;
}
inline void Status::set_app_enabled(bool value) {
  _internal_set_app_enabled(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status.app_enabled)
}

// bool plugins_good = 3;
inline void Status::clear_plugins_good() {
  _impl_.plugins_good_ = false;
}
inline bool Status::_internal_plugins_good() const {
  return _impl_.plugins_good_;
}
inline bool Status::plugins_good() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status.plugins_good)
  return _internal_plugins_good();
}
inline void Status::_internal_set_plugins_good(bool value) {
  
  _impl_.plugins_good_ = value;
}
inline void Status::set_plugins_good(bool value) {
  _internal_set_plugins_good(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status.plugins_good)
}

// bool app_good = 4;
inline void Status::clear_app_good() {
  _impl_.app_good_ = false;
}
inline bool Status::_internal_app_good() const {
  return _impl_.app_good_;
}
inline bool Status::app_good() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status.app_good)
  return _internal_app_good();
}
inline void Status::_internal_set_app_good(bool value) {
  
  _impl_.app_good_ = value;
}
inline void Status::set_app_good(bool value) {
  _internal_set_app_good(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status.app_good)
}

// bool online = 5;
inline void Status::clear_online() {
  _impl_.online_ = false;
}
inline bool Status::_internal_online() const {
  return _impl_.online_;
}
inline bool Status::online() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status.online)
  return _internal_online();
}
inline void Status::_internal_set_online(bool value) {
  
  _impl_.online_ = value;
}
inline void Status::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:cqhttp.Status.online)
}

// .cqhttp.Status_Statistics stat = 6;
inline bool Status::_internal_has_stat() const {
  return this != internal_default_instance() && _impl_.stat_ != nullptr;
}
inline bool Status::has_stat() const {
  return _internal_has_stat();
}
inline void Status::clear_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
}
inline const ::cqhttp::Status_Statistics& Status::_internal_stat() const {
  const ::cqhttp::Status_Statistics* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Status_Statistics&>(
      ::cqhttp::_Status_Statistics_default_instance_);
}
inline const ::cqhttp::Status_Statistics& Status::stat() const {
  // @@protoc_insertion_point(field_get:cqhttp.Status.stat)
  return _internal_stat();
}
inline void Status::unsafe_arena_set_allocated_stat(
    ::cqhttp::Status_Statistics* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.Status.stat)
}
inline ::cqhttp::Status_Statistics* Status::release_stat() {
  
  ::cqhttp::Status_Statistics* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Status_Statistics* Status::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:cqhttp.Status.stat)
  
  ::cqhttp::Status_Statistics* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::cqhttp::Status_Statistics* Status::_internal_mutable_stat() {
  
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Status_Statistics>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::cqhttp::Status_Statistics* Status::mutable_stat() {
  ::cqhttp::Status_Statistics* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:cqhttp.Status.stat)
  return _msg;
}
inline void Status::set_allocated_stat(::cqhttp::Status_Statistics* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Status.stat)
}

// -------------------------------------------------------------------

// OfflineFile

// string name = 1;
inline void OfflineFile::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& OfflineFile::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.OfflineFile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OfflineFile::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OfflineFile.name)
}
inline std::string* OfflineFile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.OfflineFile.name)
  return _s;
}
inline const std::string& OfflineFile::_internal_name() const {
  return _impl_.name_.Get();
}
inline void OfflineFile::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* OfflineFile::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* OfflineFile::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.OfflineFile.name)
  return _impl_.name_.Release();
}
inline void OfflineFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OfflineFile.name)
}

// int64 size = 2;
inline void OfflineFile::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t OfflineFile::_internal_size() const {
  return _impl_.size_;
}
inline int64_t OfflineFile::size() const {
  // @@protoc_insertion_point(field_get:cqhttp.OfflineFile.size)
  return _internal_size();
}
inline void OfflineFile::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void OfflineFile::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:cqhttp.OfflineFile.size)
}

// string url = 3;
inline void OfflineFile::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& OfflineFile::url() const {
  // @@protoc_insertion_point(field_get:cqhttp.OfflineFile.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OfflineFile::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OfflineFile.url)
}
inline std::string* OfflineFile::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:cqhttp.OfflineFile.url)
  return _s;
}
inline const std::string& OfflineFile::_internal_url() const {
  return _impl_.url_.Get();
}
inline void OfflineFile::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* OfflineFile::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* OfflineFile::release_url() {
  // @@protoc_insertion_point(field_release:cqhttp.OfflineFile.url)
  return _impl_.url_.Release();
}
inline void OfflineFile::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OfflineFile.url)
}

// -------------------------------------------------------------------

// GroupFile

// string id = 1;
inline void GroupFile::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GroupFile::id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFile.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupFile::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupFile.id)
}
inline std::string* GroupFile::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupFile.id)
  return _s;
}
inline const std::string& GroupFile::_internal_id() const {
  return _impl_.id_.Get();
}
inline void GroupFile::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupFile::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupFile::release_id() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupFile.id)
  return _impl_.id_.Release();
}
inline void GroupFile::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupFile.id)
}

// string name = 2;
inline void GroupFile::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GroupFile::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupFile::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupFile.name)
}
inline std::string* GroupFile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupFile.name)
  return _s;
}
inline const std::string& GroupFile::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GroupFile::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupFile::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupFile::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupFile.name)
  return _impl_.name_.Release();
}
inline void GroupFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupFile.name)
}

// int64 size = 3;
inline void GroupFile::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t GroupFile::_internal_size() const {
  return _impl_.size_;
}
inline int64_t GroupFile::size() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFile.size)
  return _internal_size();
}
inline void GroupFile::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void GroupFile::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFile.size)
}

// int64 busid = 4;
inline void GroupFile::clear_busid() {
  _impl_.busid_ = int64_t{0};
}
inline int64_t GroupFile::_internal_busid() const {
  return _impl_.busid_;
}
inline int64_t GroupFile::busid() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFile.busid)
  return _internal_busid();
}
inline void GroupFile::_internal_set_busid(int64_t value) {
  
  _impl_.busid_ = value;
}
inline void GroupFile::set_busid(int64_t value) {
  _internal_set_busid(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFile.busid)
}

// -------------------------------------------------------------------

// Device

// int64 app_id = 1;
inline void Device::clear_app_id() {
  _impl_.app_id_ = int64_t{0};
}
inline int64_t Device::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int64_t Device::app_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.Device.app_id)
  return _internal_app_id();
}
inline void Device::_internal_set_app_id(int64_t value) {
  
  _impl_.app_id_ = value;
}
inline void Device::set_app_id(int64_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.Device.app_id)
}

// string device_name = 2;
inline void Device::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& Device::device_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.Device.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Device.device_name)
}
inline std::string* Device::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.Device.device_name)
  return _s;
}
inline const std::string& Device::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void Device::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_device_name() {
  // @@protoc_insertion_point(field_release:cqhttp.Device.device_name)
  return _impl_.device_name_.Release();
}
inline void Device::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Device.device_name)
}

// string device_kind = 3;
inline void Device::clear_device_kind() {
  _impl_.device_kind_.ClearToEmpty();
}
inline const std::string& Device::device_kind() const {
  // @@protoc_insertion_point(field_get:cqhttp.Device.device_kind)
  return _internal_device_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_device_kind(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Device.device_kind)
}
inline std::string* Device::mutable_device_kind() {
  std::string* _s = _internal_mutable_device_kind();
  // @@protoc_insertion_point(field_mutable:cqhttp.Device.device_kind)
  return _s;
}
inline const std::string& Device::_internal_device_kind() const {
  return _impl_.device_kind_.Get();
}
inline void Device::_internal_set_device_kind(const std::string& value) {
  
  _impl_.device_kind_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_device_kind() {
  
  return _impl_.device_kind_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_device_kind() {
  // @@protoc_insertion_point(field_release:cqhttp.Device.device_kind)
  return _impl_.device_kind_.Release();
}
inline void Device::set_allocated_device_kind(std::string* device_kind) {
  if (device_kind != nullptr) {
    
  } else {
    
  }
  _impl_.device_kind_.SetAllocated(device_kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_kind_.IsDefault()) {
    _impl_.device_kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Device.device_kind)
}

// -------------------------------------------------------------------

// File

// int32 group_id = 1;
inline void File::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t File::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t File::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.group_id)
  return _internal_group_id();
}
inline void File::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void File::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.group_id)
}

// string file_id = 2;
inline void File::clear_file_id() {
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& File::file_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_file_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.File.file_id)
}
inline std::string* File::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.File.file_id)
  return _s;
}
inline const std::string& File::_internal_file_id() const {
  return _impl_.file_id_.Get();
}
inline void File::_internal_set_file_id(const std::string& value) {
  
  _impl_.file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_file_id() {
  
  return _impl_.file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_file_id() {
  // @@protoc_insertion_point(field_release:cqhttp.File.file_id)
  return _impl_.file_id_.Release();
}
inline void File::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  _impl_.file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.File.file_id)
}

// string file_name = 3;
inline void File::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& File::file_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.File.file_name)
}
inline std::string* File::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.File.file_name)
  return _s;
}
inline const std::string& File::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void File::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_file_name() {
  // @@protoc_insertion_point(field_release:cqhttp.File.file_name)
  return _impl_.file_name_.Release();
}
inline void File::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.File.file_name)
}

// int32 busid = 4;
inline void File::clear_busid() {
  _impl_.busid_ = 0;
}
inline int32_t File::_internal_busid() const {
  return _impl_.busid_;
}
inline int32_t File::busid() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.busid)
  return _internal_busid();
}
inline void File::_internal_set_busid(int32_t value) {
  
  _impl_.busid_ = value;
}
inline void File::set_busid(int32_t value) {
  _internal_set_busid(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.busid)
}

// int64 file_size = 5;
inline void File::clear_file_size() {
  _impl_.file_size_ = int64_t{0};
}
inline int64_t File::_internal_file_size() const {
  return _impl_.file_size_;
}
inline int64_t File::file_size() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.file_size)
  return _internal_file_size();
}
inline void File::_internal_set_file_size(int64_t value) {
  
  _impl_.file_size_ = value;
}
inline void File::set_file_size(int64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.file_size)
}

// int64 upload_time = 6;
inline void File::clear_upload_time() {
  _impl_.upload_time_ = int64_t{0};
}
inline int64_t File::_internal_upload_time() const {
  return _impl_.upload_time_;
}
inline int64_t File::upload_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.upload_time)
  return _internal_upload_time();
}
inline void File::_internal_set_upload_time(int64_t value) {
  
  _impl_.upload_time_ = value;
}
inline void File::set_upload_time(int64_t value) {
  _internal_set_upload_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.upload_time)
}

// int64 dead_time = 7;
inline void File::clear_dead_time() {
  _impl_.dead_time_ = int64_t{0};
}
inline int64_t File::_internal_dead_time() const {
  return _impl_.dead_time_;
}
inline int64_t File::dead_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.dead_time)
  return _internal_dead_time();
}
inline void File::_internal_set_dead_time(int64_t value) {
  
  _impl_.dead_time_ = value;
}
inline void File::set_dead_time(int64_t value) {
  _internal_set_dead_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.dead_time)
}

// int64 modify_time = 8;
inline void File::clear_modify_time() {
  _impl_.modify_time_ = int64_t{0};
}
inline int64_t File::_internal_modify_time() const {
  return _impl_.modify_time_;
}
inline int64_t File::modify_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.modify_time)
  return _internal_modify_time();
}
inline void File::_internal_set_modify_time(int64_t value) {
  
  _impl_.modify_time_ = value;
}
inline void File::set_modify_time(int64_t value) {
  _internal_set_modify_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.modify_time)
}

// int32 download_times = 9;
inline void File::clear_download_times() {
  _impl_.download_times_ = 0;
}
inline int32_t File::_internal_download_times() const {
  return _impl_.download_times_;
}
inline int32_t File::download_times() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.download_times)
  return _internal_download_times();
}
inline void File::_internal_set_download_times(int32_t value) {
  
  _impl_.download_times_ = value;
}
inline void File::set_download_times(int32_t value) {
  _internal_set_download_times(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.download_times)
}

// int64 uploader = 10;
inline void File::clear_uploader() {
  _impl_.uploader_ = int64_t{0};
}
inline int64_t File::_internal_uploader() const {
  return _impl_.uploader_;
}
inline int64_t File::uploader() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.uploader)
  return _internal_uploader();
}
inline void File::_internal_set_uploader(int64_t value) {
  
  _impl_.uploader_ = value;
}
inline void File::set_uploader(int64_t value) {
  _internal_set_uploader(value);
  // @@protoc_insertion_point(field_set:cqhttp.File.uploader)
}

// string uploader_name = 11;
inline void File::clear_uploader_name() {
  _impl_.uploader_name_.ClearToEmpty();
}
inline const std::string& File::uploader_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.File.uploader_name)
  return _internal_uploader_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_uploader_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uploader_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.File.uploader_name)
}
inline std::string* File::mutable_uploader_name() {
  std::string* _s = _internal_mutable_uploader_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.File.uploader_name)
  return _s;
}
inline const std::string& File::_internal_uploader_name() const {
  return _impl_.uploader_name_.Get();
}
inline void File::_internal_set_uploader_name(const std::string& value) {
  
  _impl_.uploader_name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_uploader_name() {
  
  return _impl_.uploader_name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_uploader_name() {
  // @@protoc_insertion_point(field_release:cqhttp.File.uploader_name)
  return _impl_.uploader_name_.Release();
}
inline void File::set_allocated_uploader_name(std::string* uploader_name) {
  if (uploader_name != nullptr) {
    
  } else {
    
  }
  _impl_.uploader_name_.SetAllocated(uploader_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uploader_name_.IsDefault()) {
    _impl_.uploader_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.File.uploader_name)
}

// -------------------------------------------------------------------

// Folder

// int32 group_id = 1;
inline void Folder::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t Folder::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t Folder::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.group_id)
  return _internal_group_id();
}
inline void Folder::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void Folder::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.Folder.group_id)
}

// string folder_id = 2;
inline void Folder::clear_folder_id() {
  _impl_.folder_id_.ClearToEmpty();
}
inline const std::string& Folder::folder_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.folder_id)
  return _internal_folder_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Folder::set_folder_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.folder_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Folder.folder_id)
}
inline std::string* Folder::mutable_folder_id() {
  std::string* _s = _internal_mutable_folder_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.Folder.folder_id)
  return _s;
}
inline const std::string& Folder::_internal_folder_id() const {
  return _impl_.folder_id_.Get();
}
inline void Folder::_internal_set_folder_id(const std::string& value) {
  
  _impl_.folder_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Folder::_internal_mutable_folder_id() {
  
  return _impl_.folder_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Folder::release_folder_id() {
  // @@protoc_insertion_point(field_release:cqhttp.Folder.folder_id)
  return _impl_.folder_id_.Release();
}
inline void Folder::set_allocated_folder_id(std::string* folder_id) {
  if (folder_id != nullptr) {
    
  } else {
    
  }
  _impl_.folder_id_.SetAllocated(folder_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.folder_id_.IsDefault()) {
    _impl_.folder_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Folder.folder_id)
}

// string folder_name = 3;
inline void Folder::clear_folder_name() {
  _impl_.folder_name_.ClearToEmpty();
}
inline const std::string& Folder::folder_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.folder_name)
  return _internal_folder_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Folder::set_folder_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.folder_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Folder.folder_name)
}
inline std::string* Folder::mutable_folder_name() {
  std::string* _s = _internal_mutable_folder_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.Folder.folder_name)
  return _s;
}
inline const std::string& Folder::_internal_folder_name() const {
  return _impl_.folder_name_.Get();
}
inline void Folder::_internal_set_folder_name(const std::string& value) {
  
  _impl_.folder_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Folder::_internal_mutable_folder_name() {
  
  return _impl_.folder_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Folder::release_folder_name() {
  // @@protoc_insertion_point(field_release:cqhttp.Folder.folder_name)
  return _impl_.folder_name_.Release();
}
inline void Folder::set_allocated_folder_name(std::string* folder_name) {
  if (folder_name != nullptr) {
    
  } else {
    
  }
  _impl_.folder_name_.SetAllocated(folder_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.folder_name_.IsDefault()) {
    _impl_.folder_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Folder.folder_name)
}

// int64 create_time = 4;
inline void Folder::clear_create_time() {
  _impl_.create_time_ = int64_t{0};
}
inline int64_t Folder::_internal_create_time() const {
  return _impl_.create_time_;
}
inline int64_t Folder::create_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.create_time)
  return _internal_create_time();
}
inline void Folder::_internal_set_create_time(int64_t value) {
  
  _impl_.create_time_ = value;
}
inline void Folder::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.Folder.create_time)
}

// int64 creator = 5;
inline void Folder::clear_creator() {
  _impl_.creator_ = int64_t{0};
}
inline int64_t Folder::_internal_creator() const {
  return _impl_.creator_;
}
inline int64_t Folder::creator() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.creator)
  return _internal_creator();
}
inline void Folder::_internal_set_creator(int64_t value) {
  
  _impl_.creator_ = value;
}
inline void Folder::set_creator(int64_t value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:cqhttp.Folder.creator)
}

// string creator_name = 6;
inline void Folder::clear_creator_name() {
  _impl_.creator_name_.ClearToEmpty();
}
inline const std::string& Folder::creator_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.creator_name)
  return _internal_creator_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Folder::set_creator_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.Folder.creator_name)
}
inline std::string* Folder::mutable_creator_name() {
  std::string* _s = _internal_mutable_creator_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.Folder.creator_name)
  return _s;
}
inline const std::string& Folder::_internal_creator_name() const {
  return _impl_.creator_name_.Get();
}
inline void Folder::_internal_set_creator_name(const std::string& value) {
  
  _impl_.creator_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Folder::_internal_mutable_creator_name() {
  
  return _impl_.creator_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Folder::release_creator_name() {
  // @@protoc_insertion_point(field_release:cqhttp.Folder.creator_name)
  return _impl_.creator_name_.Release();
}
inline void Folder::set_allocated_creator_name(std::string* creator_name) {
  if (creator_name != nullptr) {
    
  } else {
    
  }
  _impl_.creator_name_.SetAllocated(creator_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_name_.IsDefault()) {
    _impl_.creator_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.Folder.creator_name)
}

// int32 total_file_count = 7;
inline void Folder::clear_total_file_count() {
  _impl_.total_file_count_ = 0;
}
inline int32_t Folder::_internal_total_file_count() const {
  return _impl_.total_file_count_;
}
inline int32_t Folder::total_file_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.Folder.total_file_count)
  return _internal_total_file_count();
}
inline void Folder::_internal_set_total_file_count(int32_t value) {
  
  _impl_.total_file_count_ = value;
}
inline void Folder::set_total_file_count(int32_t value) {
  _internal_set_total_file_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.Folder.total_file_count)
}

// -------------------------------------------------------------------

// ForwardMessage_Data

// string name = 1;
inline void ForwardMessage_Data::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ForwardMessage_Data::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.ForwardMessage.Data.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardMessage_Data::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.ForwardMessage.Data.name)
}
inline std::string* ForwardMessage_Data::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.ForwardMessage.Data.name)
  return _s;
}
inline const std::string& ForwardMessage_Data::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ForwardMessage_Data::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardMessage_Data::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardMessage_Data::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.ForwardMessage.Data.name)
  return _impl_.name_.Release();
}
inline void ForwardMessage_Data::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ForwardMessage.Data.name)
}

// string uin = 2;
inline void ForwardMessage_Data::clear_uin() {
  _impl_.uin_.ClearToEmpty();
}
inline const std::string& ForwardMessage_Data::uin() const {
  // @@protoc_insertion_point(field_get:cqhttp.ForwardMessage.Data.uin)
  return _internal_uin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardMessage_Data::set_uin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.ForwardMessage.Data.uin)
}
inline std::string* ForwardMessage_Data::mutable_uin() {
  std::string* _s = _internal_mutable_uin();
  // @@protoc_insertion_point(field_mutable:cqhttp.ForwardMessage.Data.uin)
  return _s;
}
inline const std::string& ForwardMessage_Data::_internal_uin() const {
  return _impl_.uin_.Get();
}
inline void ForwardMessage_Data::_internal_set_uin(const std::string& value) {
  
  _impl_.uin_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardMessage_Data::_internal_mutable_uin() {
  
  return _impl_.uin_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardMessage_Data::release_uin() {
  // @@protoc_insertion_point(field_release:cqhttp.ForwardMessage.Data.uin)
  return _impl_.uin_.Release();
}
inline void ForwardMessage_Data::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    
  } else {
    
  }
  _impl_.uin_.SetAllocated(uin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uin_.IsDefault()) {
    _impl_.uin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ForwardMessage.Data.uin)
}

// string content = 3;
inline void ForwardMessage_Data::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ForwardMessage_Data::content() const {
  // @@protoc_insertion_point(field_get:cqhttp.ForwardMessage.Data.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardMessage_Data::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.ForwardMessage.Data.content)
}
inline std::string* ForwardMessage_Data::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cqhttp.ForwardMessage.Data.content)
  return _s;
}
inline const std::string& ForwardMessage_Data::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ForwardMessage_Data::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardMessage_Data::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardMessage_Data::release_content() {
  // @@protoc_insertion_point(field_release:cqhttp.ForwardMessage.Data.content)
  return _impl_.content_.Release();
}
inline void ForwardMessage_Data::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ForwardMessage.Data.content)
}

// -------------------------------------------------------------------

// ForwardMessage

// string type = 1;
inline void ForwardMessage::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ForwardMessage::type() const {
  // @@protoc_insertion_point(field_get:cqhttp.ForwardMessage.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardMessage::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.ForwardMessage.type)
}
inline std::string* ForwardMessage::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.ForwardMessage.type)
  return _s;
}
inline const std::string& ForwardMessage::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ForwardMessage::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardMessage::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardMessage::release_type() {
  // @@protoc_insertion_point(field_release:cqhttp.ForwardMessage.type)
  return _impl_.type_.Release();
}
inline void ForwardMessage::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ForwardMessage.type)
}

// .cqhttp.ForwardMessage.Data data = 2;
inline bool ForwardMessage::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool ForwardMessage::has_data() const {
  return _internal_has_data();
}
inline void ForwardMessage::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::cqhttp::ForwardMessage_Data& ForwardMessage::_internal_data() const {
  const ::cqhttp::ForwardMessage_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::ForwardMessage_Data&>(
      ::cqhttp::_ForwardMessage_Data_default_instance_);
}
inline const ::cqhttp::ForwardMessage_Data& ForwardMessage::data() const {
  // @@protoc_insertion_point(field_get:cqhttp.ForwardMessage.data)
  return _internal_data();
}
inline void ForwardMessage::unsafe_arena_set_allocated_data(
    ::cqhttp::ForwardMessage_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.ForwardMessage.data)
}
inline ::cqhttp::ForwardMessage_Data* ForwardMessage::release_data() {
  
  ::cqhttp::ForwardMessage_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::ForwardMessage_Data* ForwardMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:cqhttp.ForwardMessage.data)
  
  ::cqhttp::ForwardMessage_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::cqhttp::ForwardMessage_Data* ForwardMessage::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::ForwardMessage_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::cqhttp::ForwardMessage_Data* ForwardMessage::mutable_data() {
  ::cqhttp::ForwardMessage_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cqhttp.ForwardMessage.data)
  return _msg;
}
inline void ForwardMessage::set_allocated_data(::cqhttp::ForwardMessage_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ForwardMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cqhttp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cqhttp::CQHTTP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cqhttp::CQHTTP_TYPE>() {
  return ::cqhttp::CQHTTP_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fbase_2eproto
