// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cqhttp_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cqhttp_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cqhttp_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cqhttp_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cqhttp_5fevent_2eproto;
namespace cqhttp {
class BaseEvent;
struct BaseEventDefaultTypeInternal;
extern BaseEventDefaultTypeInternal _BaseEvent_default_instance_;
class ClientChangedEvent;
struct ClientChangedEventDefaultTypeInternal;
extern ClientChangedEventDefaultTypeInternal _ClientChangedEvent_default_instance_;
class EssenceMsgChangedEvent;
struct EssenceMsgChangedEventDefaultTypeInternal;
extern EssenceMsgChangedEventDefaultTypeInternal _EssenceMsgChangedEvent_default_instance_;
class FriendAddEvent;
struct FriendAddEventDefaultTypeInternal;
extern FriendAddEventDefaultTypeInternal _FriendAddEvent_default_instance_;
class FriendAddRequestEvent;
struct FriendAddRequestEventDefaultTypeInternal;
extern FriendAddRequestEventDefaultTypeInternal _FriendAddRequestEvent_default_instance_;
class FriendRecallEvent;
struct FriendRecallEventDefaultTypeInternal;
extern FriendRecallEventDefaultTypeInternal _FriendRecallEvent_default_instance_;
class GroupAddRequestEvent;
struct GroupAddRequestEventDefaultTypeInternal;
extern GroupAddRequestEventDefaultTypeInternal _GroupAddRequestEvent_default_instance_;
class GroupAdminChangeEvent;
struct GroupAdminChangeEventDefaultTypeInternal;
extern GroupAdminChangeEventDefaultTypeInternal _GroupAdminChangeEvent_default_instance_;
class GroupBanEvent;
struct GroupBanEventDefaultTypeInternal;
extern GroupBanEventDefaultTypeInternal _GroupBanEvent_default_instance_;
class GroupCardChangedEvent;
struct GroupCardChangedEventDefaultTypeInternal;
extern GroupCardChangedEventDefaultTypeInternal _GroupCardChangedEvent_default_instance_;
class GroupDecreaseEvent;
struct GroupDecreaseEventDefaultTypeInternal;
extern GroupDecreaseEventDefaultTypeInternal _GroupDecreaseEvent_default_instance_;
class GroupFileUploadEvent;
struct GroupFileUploadEventDefaultTypeInternal;
extern GroupFileUploadEventDefaultTypeInternal _GroupFileUploadEvent_default_instance_;
class GroupIncreaseEvent;
struct GroupIncreaseEventDefaultTypeInternal;
extern GroupIncreaseEventDefaultTypeInternal _GroupIncreaseEvent_default_instance_;
class GroupMessageEvent;
struct GroupMessageEventDefaultTypeInternal;
extern GroupMessageEventDefaultTypeInternal _GroupMessageEvent_default_instance_;
class GroupRecallEvent;
struct GroupRecallEventDefaultTypeInternal;
extern GroupRecallEventDefaultTypeInternal _GroupRecallEvent_default_instance_;
class LifecycleEvent;
struct LifecycleEventDefaultTypeInternal;
extern LifecycleEventDefaultTypeInternal _LifecycleEvent_default_instance_;
class MetaEvent;
struct MetaEventDefaultTypeInternal;
extern MetaEventDefaultTypeInternal _MetaEvent_default_instance_;
class NotifyEvent;
struct NotifyEventDefaultTypeInternal;
extern NotifyEventDefaultTypeInternal _NotifyEvent_default_instance_;
class PrivateMessageEvent;
struct PrivateMessageEventDefaultTypeInternal;
extern PrivateMessageEventDefaultTypeInternal _PrivateMessageEvent_default_instance_;
class ReceviedOfflineFileEvent;
struct ReceviedOfflineFileEventDefaultTypeInternal;
extern ReceviedOfflineFileEventDefaultTypeInternal _ReceviedOfflineFileEvent_default_instance_;
}  // namespace cqhttp
PROTOBUF_NAMESPACE_OPEN
template<> ::cqhttp::BaseEvent* Arena::CreateMaybeMessage<::cqhttp::BaseEvent>(Arena*);
template<> ::cqhttp::ClientChangedEvent* Arena::CreateMaybeMessage<::cqhttp::ClientChangedEvent>(Arena*);
template<> ::cqhttp::EssenceMsgChangedEvent* Arena::CreateMaybeMessage<::cqhttp::EssenceMsgChangedEvent>(Arena*);
template<> ::cqhttp::FriendAddEvent* Arena::CreateMaybeMessage<::cqhttp::FriendAddEvent>(Arena*);
template<> ::cqhttp::FriendAddRequestEvent* Arena::CreateMaybeMessage<::cqhttp::FriendAddRequestEvent>(Arena*);
template<> ::cqhttp::FriendRecallEvent* Arena::CreateMaybeMessage<::cqhttp::FriendRecallEvent>(Arena*);
template<> ::cqhttp::GroupAddRequestEvent* Arena::CreateMaybeMessage<::cqhttp::GroupAddRequestEvent>(Arena*);
template<> ::cqhttp::GroupAdminChangeEvent* Arena::CreateMaybeMessage<::cqhttp::GroupAdminChangeEvent>(Arena*);
template<> ::cqhttp::GroupBanEvent* Arena::CreateMaybeMessage<::cqhttp::GroupBanEvent>(Arena*);
template<> ::cqhttp::GroupCardChangedEvent* Arena::CreateMaybeMessage<::cqhttp::GroupCardChangedEvent>(Arena*);
template<> ::cqhttp::GroupDecreaseEvent* Arena::CreateMaybeMessage<::cqhttp::GroupDecreaseEvent>(Arena*);
template<> ::cqhttp::GroupFileUploadEvent* Arena::CreateMaybeMessage<::cqhttp::GroupFileUploadEvent>(Arena*);
template<> ::cqhttp::GroupIncreaseEvent* Arena::CreateMaybeMessage<::cqhttp::GroupIncreaseEvent>(Arena*);
template<> ::cqhttp::GroupMessageEvent* Arena::CreateMaybeMessage<::cqhttp::GroupMessageEvent>(Arena*);
template<> ::cqhttp::GroupRecallEvent* Arena::CreateMaybeMessage<::cqhttp::GroupRecallEvent>(Arena*);
template<> ::cqhttp::LifecycleEvent* Arena::CreateMaybeMessage<::cqhttp::LifecycleEvent>(Arena*);
template<> ::cqhttp::MetaEvent* Arena::CreateMaybeMessage<::cqhttp::MetaEvent>(Arena*);
template<> ::cqhttp::NotifyEvent* Arena::CreateMaybeMessage<::cqhttp::NotifyEvent>(Arena*);
template<> ::cqhttp::PrivateMessageEvent* Arena::CreateMaybeMessage<::cqhttp::PrivateMessageEvent>(Arena*);
template<> ::cqhttp::ReceviedOfflineFileEvent* Arena::CreateMaybeMessage<::cqhttp::ReceviedOfflineFileEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cqhttp {

// ===================================================================

class BaseEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.BaseEvent) */ {
 public:
  inline BaseEvent() : BaseEvent(nullptr) {}
  ~BaseEvent() override;
  explicit PROTOBUF_CONSTEXPR BaseEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseEvent(const BaseEvent& from);
  BaseEvent(BaseEvent&& from) noexcept
    : BaseEvent() {
    *this = ::std::move(from);
  }

  inline BaseEvent& operator=(const BaseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseEvent& operator=(BaseEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseEvent* internal_default_instance() {
    return reinterpret_cast<const BaseEvent*>(
               &_BaseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseEvent& a, BaseEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseEvent& from) {
    BaseEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.BaseEvent";
  }
  protected:
  explicit BaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
    kNoticeTypeFieldNumber = 3,
    kRequestTypeFieldNumber = 4,
    kMetaEventTypeFieldNumber = 5,
  };
  // .cqhttp.CQHTTP_TYPE post_type = 1;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE message_type = 2;
  void clear_message_type();
  ::cqhttp::CQHTTP_TYPE message_type() const;
  void set_message_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_message_type() const;
  void _internal_set_message_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 3;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  void clear_request_type();
  ::cqhttp::CQHTTP_TYPE request_type() const;
  void set_request_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_request_type() const;
  void _internal_set_request_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE meta_event_type = 5;
  void clear_meta_event_type();
  ::cqhttp::CQHTTP_TYPE meta_event_type() const;
  void set_meta_event_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_meta_event_type() const;
  void _internal_set_meta_event_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.BaseEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int post_type_;
    int message_type_;
    int notice_type_;
    int request_type_;
    int meta_event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class PrivateMessageEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.PrivateMessageEvent) */ {
 public:
  inline PrivateMessageEvent() : PrivateMessageEvent(nullptr) {}
  ~PrivateMessageEvent() override;
  explicit PROTOBUF_CONSTEXPR PrivateMessageEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMessageEvent(const PrivateMessageEvent& from);
  PrivateMessageEvent(PrivateMessageEvent&& from) noexcept
    : PrivateMessageEvent() {
    *this = ::std::move(from);
  }

  inline PrivateMessageEvent& operator=(const PrivateMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMessageEvent& operator=(PrivateMessageEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivateMessageEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMessageEvent* internal_default_instance() {
    return reinterpret_cast<const PrivateMessageEvent*>(
               &_PrivateMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrivateMessageEvent& a, PrivateMessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMessageEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMessageEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrivateMessageEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrivateMessageEvent& from) {
    PrivateMessageEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateMessageEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.PrivateMessageEvent";
  }
  protected:
  explicit PrivateMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 8,
    kRawMessageFieldNumber = 9,
    kSenderFieldNumber = 11,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kMessageIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
    kFontFieldNumber = 10,
    kTempSourceFieldNumber = 12,
  };
  // string message = 8;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string raw_message = 9;
  void clear_raw_message();
  const std::string& raw_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_message();
  PROTOBUF_NODISCARD std::string* release_raw_message();
  void set_allocated_raw_message(std::string* raw_message);
  private:
  const std::string& _internal_raw_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_message(const std::string& value);
  std::string* _internal_mutable_raw_message();
  public:

  // .cqhttp.Sender sender = 11;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::cqhttp::Sender& sender() const;
  PROTOBUF_NODISCARD ::cqhttp::Sender* release_sender();
  ::cqhttp::Sender* mutable_sender();
  void set_allocated_sender(::cqhttp::Sender* sender);
  private:
  const ::cqhttp::Sender& _internal_sender() const;
  ::cqhttp::Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::cqhttp::Sender* sender);
  ::cqhttp::Sender* unsafe_arena_release_sender();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE message_type = 4;
  void clear_message_type();
  ::cqhttp::CQHTTP_TYPE message_type() const;
  void set_message_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_message_type() const;
  void _internal_set_message_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  void clear_sub_type();
  ::cqhttp::CQHTTP_TYPE sub_type() const;
  void set_sub_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_sub_type() const;
  void _internal_set_sub_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int32 message_id = 6;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 font = 10;
  void clear_font();
  int32_t font() const;
  void set_font(int32_t value);
  private:
  int32_t _internal_font() const;
  void _internal_set_font(int32_t value);
  public:

  // int32 temp_source = 12;
  void clear_temp_source();
  int32_t temp_source() const;
  void set_temp_source(int32_t value);
  private:
  int32_t _internal_temp_source() const;
  void _internal_set_temp_source(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.PrivateMessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_message_;
    ::cqhttp::Sender* sender_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int message_type_;
    int sub_type_;
    int32_t message_id_;
    int64_t user_id_;
    int32_t font_;
    int32_t temp_source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupMessageEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupMessageEvent) */ {
 public:
  inline GroupMessageEvent() : GroupMessageEvent(nullptr) {}
  ~GroupMessageEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupMessageEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMessageEvent(const GroupMessageEvent& from);
  GroupMessageEvent(GroupMessageEvent&& from) noexcept
    : GroupMessageEvent() {
    *this = ::std::move(from);
  }

  inline GroupMessageEvent& operator=(const GroupMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessageEvent& operator=(GroupMessageEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMessageEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMessageEvent* internal_default_instance() {
    return reinterpret_cast<const GroupMessageEvent*>(
               &_GroupMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupMessageEvent& a, GroupMessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessageEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMessageEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMessageEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMessageEvent& from) {
    GroupMessageEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessageEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupMessageEvent";
  }
  protected:
  explicit GroupMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 8,
    kRawMessageFieldNumber = 9,
    kSenderFieldNumber = 11,
    kAnonymousFieldNumber = 13,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kMessageIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
    kGroupIdFieldNumber = 12,
    kFontFieldNumber = 10,
  };
  // string message = 8;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string raw_message = 9;
  void clear_raw_message();
  const std::string& raw_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_message();
  PROTOBUF_NODISCARD std::string* release_raw_message();
  void set_allocated_raw_message(std::string* raw_message);
  private:
  const std::string& _internal_raw_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_message(const std::string& value);
  std::string* _internal_mutable_raw_message();
  public:

  // .cqhttp.Sender sender = 11;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::cqhttp::Sender& sender() const;
  PROTOBUF_NODISCARD ::cqhttp::Sender* release_sender();
  ::cqhttp::Sender* mutable_sender();
  void set_allocated_sender(::cqhttp::Sender* sender);
  private:
  const ::cqhttp::Sender& _internal_sender() const;
  ::cqhttp::Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::cqhttp::Sender* sender);
  ::cqhttp::Sender* unsafe_arena_release_sender();

  // .cqhttp.Anonymous anonymous = 13;
  bool has_anonymous() const;
  private:
  bool _internal_has_anonymous() const;
  public:
  void clear_anonymous();
  const ::cqhttp::Anonymous& anonymous() const;
  PROTOBUF_NODISCARD ::cqhttp::Anonymous* release_anonymous();
  ::cqhttp::Anonymous* mutable_anonymous();
  void set_allocated_anonymous(::cqhttp::Anonymous* anonymous);
  private:
  const ::cqhttp::Anonymous& _internal_anonymous() const;
  ::cqhttp::Anonymous* _internal_mutable_anonymous();
  public:
  void unsafe_arena_set_allocated_anonymous(
      ::cqhttp::Anonymous* anonymous);
  ::cqhttp::Anonymous* unsafe_arena_release_anonymous();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE message_type = 4;
  void clear_message_type();
  ::cqhttp::CQHTTP_TYPE message_type() const;
  void set_message_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_message_type() const;
  void _internal_set_message_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  void clear_sub_type();
  ::cqhttp::CQHTTP_TYPE sub_type() const;
  void set_sub_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_sub_type() const;
  void _internal_set_sub_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int32 message_id = 6;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 group_id = 12;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int32 font = 10;
  void clear_font();
  int32_t font() const;
  void set_font(int32_t value);
  private:
  int32_t _internal_font() const;
  void _internal_set_font(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupMessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_message_;
    ::cqhttp::Sender* sender_;
    ::cqhttp::Anonymous* anonymous_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int message_type_;
    int sub_type_;
    int32_t message_id_;
    int64_t user_id_;
    int64_t group_id_;
    int32_t font_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FriendRecallEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.FriendRecallEvent) */ {
 public:
  inline FriendRecallEvent() : FriendRecallEvent(nullptr) {}
  ~FriendRecallEvent() override;
  explicit PROTOBUF_CONSTEXPR FriendRecallEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRecallEvent(const FriendRecallEvent& from);
  FriendRecallEvent(FriendRecallEvent&& from) noexcept
    : FriendRecallEvent() {
    *this = ::std::move(from);
  }

  inline FriendRecallEvent& operator=(const FriendRecallEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRecallEvent& operator=(FriendRecallEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRecallEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRecallEvent* internal_default_instance() {
    return reinterpret_cast<const FriendRecallEvent*>(
               &_FriendRecallEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendRecallEvent& a, FriendRecallEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRecallEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRecallEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRecallEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRecallEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRecallEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendRecallEvent& from) {
    FriendRecallEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRecallEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.FriendRecallEvent";
  }
  protected:
  explicit FriendRecallEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kMessageIdFieldNumber = 6,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 message_id = 6;
  void clear_message_id();
  int64_t message_id() const;
  void set_message_id(int64_t value);
  private:
  int64_t _internal_message_id() const;
  void _internal_set_message_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.FriendRecallEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t user_id_;
    int64_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupRecallEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupRecallEvent) */ {
 public:
  inline GroupRecallEvent() : GroupRecallEvent(nullptr) {}
  ~GroupRecallEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupRecallEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRecallEvent(const GroupRecallEvent& from);
  GroupRecallEvent(GroupRecallEvent&& from) noexcept
    : GroupRecallEvent() {
    *this = ::std::move(from);
  }

  inline GroupRecallEvent& operator=(const GroupRecallEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRecallEvent& operator=(GroupRecallEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRecallEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRecallEvent* internal_default_instance() {
    return reinterpret_cast<const GroupRecallEvent*>(
               &_GroupRecallEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupRecallEvent& a, GroupRecallEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRecallEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRecallEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRecallEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRecallEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRecallEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRecallEvent& from) {
    GroupRecallEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRecallEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupRecallEvent";
  }
  protected:
  explicit GroupRecallEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kMessageIdFieldNumber = 8,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 5;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 6;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  int64_t operator_id() const;
  void set_operator_id(int64_t value);
  private:
  int64_t _internal_operator_id() const;
  void _internal_set_operator_id(int64_t value);
  public:

  // int64 message_id = 8;
  void clear_message_id();
  int64_t message_id() const;
  void set_message_id(int64_t value);
  private:
  int64_t _internal_message_id() const;
  void _internal_set_message_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupRecallEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t user_id_;
    int64_t operator_id_;
    int64_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupIncreaseEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupIncreaseEvent) */ {
 public:
  inline GroupIncreaseEvent() : GroupIncreaseEvent(nullptr) {}
  ~GroupIncreaseEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupIncreaseEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupIncreaseEvent(const GroupIncreaseEvent& from);
  GroupIncreaseEvent(GroupIncreaseEvent&& from) noexcept
    : GroupIncreaseEvent() {
    *this = ::std::move(from);
  }

  inline GroupIncreaseEvent& operator=(const GroupIncreaseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupIncreaseEvent& operator=(GroupIncreaseEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupIncreaseEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupIncreaseEvent* internal_default_instance() {
    return reinterpret_cast<const GroupIncreaseEvent*>(
               &_GroupIncreaseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupIncreaseEvent& a, GroupIncreaseEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupIncreaseEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupIncreaseEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupIncreaseEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupIncreaseEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupIncreaseEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupIncreaseEvent& from) {
    GroupIncreaseEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupIncreaseEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupIncreaseEvent";
  }
  protected:
  explicit GroupIncreaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
  };
  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  int64_t operator_id() const;
  void set_operator_id(int64_t value);
  private:
  int64_t _internal_operator_id() const;
  void _internal_set_operator_id(int64_t value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupIncreaseEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t operator_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupDecreaseEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupDecreaseEvent) */ {
 public:
  inline GroupDecreaseEvent() : GroupDecreaseEvent(nullptr) {}
  ~GroupDecreaseEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupDecreaseEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupDecreaseEvent(const GroupDecreaseEvent& from);
  GroupDecreaseEvent(GroupDecreaseEvent&& from) noexcept
    : GroupDecreaseEvent() {
    *this = ::std::move(from);
  }

  inline GroupDecreaseEvent& operator=(const GroupDecreaseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupDecreaseEvent& operator=(GroupDecreaseEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupDecreaseEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupDecreaseEvent* internal_default_instance() {
    return reinterpret_cast<const GroupDecreaseEvent*>(
               &_GroupDecreaseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupDecreaseEvent& a, GroupDecreaseEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupDecreaseEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupDecreaseEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupDecreaseEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupDecreaseEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupDecreaseEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupDecreaseEvent& from) {
    GroupDecreaseEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupDecreaseEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupDecreaseEvent";
  }
  protected:
  explicit GroupDecreaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
  };
  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  int64_t operator_id() const;
  void set_operator_id(int64_t value);
  private:
  int64_t _internal_operator_id() const;
  void _internal_set_operator_id(int64_t value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupDecreaseEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t operator_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupAdminChangeEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupAdminChangeEvent) */ {
 public:
  inline GroupAdminChangeEvent() : GroupAdminChangeEvent(nullptr) {}
  ~GroupAdminChangeEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupAdminChangeEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupAdminChangeEvent(const GroupAdminChangeEvent& from);
  GroupAdminChangeEvent(GroupAdminChangeEvent&& from) noexcept
    : GroupAdminChangeEvent() {
    *this = ::std::move(from);
  }

  inline GroupAdminChangeEvent& operator=(const GroupAdminChangeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupAdminChangeEvent& operator=(GroupAdminChangeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupAdminChangeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupAdminChangeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupAdminChangeEvent*>(
               &_GroupAdminChangeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupAdminChangeEvent& a, GroupAdminChangeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupAdminChangeEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupAdminChangeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupAdminChangeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupAdminChangeEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupAdminChangeEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupAdminChangeEvent& from) {
    GroupAdminChangeEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupAdminChangeEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupAdminChangeEvent";
  }
  protected:
  explicit GroupAdminChangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
  };
  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupAdminChangeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupFileUploadEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupFileUploadEvent) */ {
 public:
  inline GroupFileUploadEvent() : GroupFileUploadEvent(nullptr) {}
  ~GroupFileUploadEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupFileUploadEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupFileUploadEvent(const GroupFileUploadEvent& from);
  GroupFileUploadEvent(GroupFileUploadEvent&& from) noexcept
    : GroupFileUploadEvent() {
    *this = ::std::move(from);
  }

  inline GroupFileUploadEvent& operator=(const GroupFileUploadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupFileUploadEvent& operator=(GroupFileUploadEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupFileUploadEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupFileUploadEvent* internal_default_instance() {
    return reinterpret_cast<const GroupFileUploadEvent*>(
               &_GroupFileUploadEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupFileUploadEvent& a, GroupFileUploadEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupFileUploadEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupFileUploadEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupFileUploadEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupFileUploadEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupFileUploadEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupFileUploadEvent& from) {
    GroupFileUploadEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupFileUploadEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupFileUploadEvent";
  }
  protected:
  explicit GroupFileUploadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 7,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
  };
  // .cqhttp.GroupFile file = 7;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::cqhttp::GroupFile& file() const;
  PROTOBUF_NODISCARD ::cqhttp::GroupFile* release_file();
  ::cqhttp::GroupFile* mutable_file();
  void set_allocated_file(::cqhttp::GroupFile* file);
  private:
  const ::cqhttp::GroupFile& _internal_file() const;
  ::cqhttp::GroupFile* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::cqhttp::GroupFile* file);
  ::cqhttp::GroupFile* unsafe_arena_release_file();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 5;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 6;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupFileUploadEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::GroupFile* file_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupBanEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupBanEvent) */ {
 public:
  inline GroupBanEvent() : GroupBanEvent(nullptr) {}
  ~GroupBanEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupBanEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupBanEvent(const GroupBanEvent& from);
  GroupBanEvent(GroupBanEvent&& from) noexcept
    : GroupBanEvent() {
    *this = ::std::move(from);
  }

  inline GroupBanEvent& operator=(const GroupBanEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupBanEvent& operator=(GroupBanEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupBanEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupBanEvent* internal_default_instance() {
    return reinterpret_cast<const GroupBanEvent*>(
               &_GroupBanEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupBanEvent& a, GroupBanEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupBanEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupBanEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupBanEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupBanEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupBanEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupBanEvent& from) {
    GroupBanEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupBanEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupBanEvent";
  }
  protected:
  explicit GroupBanEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
    kDurationFieldNumber = 9,
  };
  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  int64_t operator_id() const;
  void set_operator_id(int64_t value);
  private:
  int64_t _internal_operator_id() const;
  void _internal_set_operator_id(int64_t value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 duration = 9;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupBanEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t operator_id_;
    int64_t user_id_;
    int64_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FriendAddEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.FriendAddEvent) */ {
 public:
  inline FriendAddEvent() : FriendAddEvent(nullptr) {}
  ~FriendAddEvent() override;
  explicit PROTOBUF_CONSTEXPR FriendAddEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendAddEvent(const FriendAddEvent& from);
  FriendAddEvent(FriendAddEvent&& from) noexcept
    : FriendAddEvent() {
    *this = ::std::move(from);
  }

  inline FriendAddEvent& operator=(const FriendAddEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddEvent& operator=(FriendAddEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendAddEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendAddEvent* internal_default_instance() {
    return reinterpret_cast<const FriendAddEvent*>(
               &_FriendAddEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FriendAddEvent& a, FriendAddEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendAddEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendAddEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendAddEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendAddEvent& from) {
    FriendAddEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.FriendAddEvent";
  }
  protected:
  explicit FriendAddEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kUserIdFieldNumber = 5,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.FriendAddEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class NotifyEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.NotifyEvent) */ {
 public:
  inline NotifyEvent() : NotifyEvent(nullptr) {}
  ~NotifyEvent() override;
  explicit PROTOBUF_CONSTEXPR NotifyEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyEvent(const NotifyEvent& from);
  NotifyEvent(NotifyEvent&& from) noexcept
    : NotifyEvent() {
    *this = ::std::move(from);
  }

  inline NotifyEvent& operator=(const NotifyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyEvent& operator=(NotifyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyEvent* internal_default_instance() {
    return reinterpret_cast<const NotifyEvent*>(
               &_NotifyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NotifyEvent& a, NotifyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyEvent& from) {
    NotifyEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.NotifyEvent";
  }
  protected:
  explicit NotifyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHonorTypeFieldNumber = 10,
    kTitleFieldNumber = 11,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kSenderIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
    kTargetIdFieldNumber = 8,
    kGroupIdFieldNumber = 9,
    kSubTypeFieldNumber = 5,
  };
  // string honor_type = 10;
  void clear_honor_type();
  const std::string& honor_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_honor_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_honor_type();
  PROTOBUF_NODISCARD std::string* release_honor_type();
  void set_allocated_honor_type(std::string* honor_type);
  private:
  const std::string& _internal_honor_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_honor_type(const std::string& value);
  std::string* _internal_mutable_honor_type();
  public:

  // string title = 11;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 sender_id = 6;
  void clear_sender_id();
  int64_t sender_id() const;
  void set_sender_id(int64_t value);
  private:
  int64_t _internal_sender_id() const;
  void _internal_set_sender_id(int64_t value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 target_id = 8;
  void clear_target_id();
  int64_t target_id() const;
  void set_target_id(int64_t value);
  private:
  int64_t _internal_target_id() const;
  void _internal_set_target_id(int64_t value);
  public:

  // int64 group_id = 9;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE sub_type = 5;
  void clear_sub_type();
  ::cqhttp::CQHTTP_TYPE sub_type() const;
  void set_sub_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_sub_type() const;
  void _internal_set_sub_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.NotifyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr honor_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t sender_id_;
    int64_t user_id_;
    int64_t target_id_;
    int64_t group_id_;
    int sub_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupCardChangedEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupCardChangedEvent) */ {
 public:
  inline GroupCardChangedEvent() : GroupCardChangedEvent(nullptr) {}
  ~GroupCardChangedEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupCardChangedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCardChangedEvent(const GroupCardChangedEvent& from);
  GroupCardChangedEvent(GroupCardChangedEvent&& from) noexcept
    : GroupCardChangedEvent() {
    *this = ::std::move(from);
  }

  inline GroupCardChangedEvent& operator=(const GroupCardChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCardChangedEvent& operator=(GroupCardChangedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCardChangedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCardChangedEvent* internal_default_instance() {
    return reinterpret_cast<const GroupCardChangedEvent*>(
               &_GroupCardChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GroupCardChangedEvent& a, GroupCardChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCardChangedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCardChangedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCardChangedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCardChangedEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupCardChangedEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupCardChangedEvent& from) {
    GroupCardChangedEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCardChangedEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupCardChangedEvent";
  }
  protected:
  explicit GroupCardChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardNewFieldNumber = 7,
    kCardOldFieldNumber = 8,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
  };
  // string card_new = 7;
  void clear_card_new();
  const std::string& card_new() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_new(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_new();
  PROTOBUF_NODISCARD std::string* release_card_new();
  void set_allocated_card_new(std::string* card_new);
  private:
  const std::string& _internal_card_new() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_new(const std::string& value);
  std::string* _internal_mutable_card_new();
  public:

  // string card_old = 8;
  void clear_card_old();
  const std::string& card_old() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_old(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_old();
  PROTOBUF_NODISCARD std::string* release_card_old();
  void set_allocated_card_old(std::string* card_old);
  private:
  const std::string& _internal_card_old() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_old(const std::string& value);
  std::string* _internal_mutable_card_old();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 5;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 6;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupCardChangedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_new_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_old_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ReceviedOfflineFileEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.ReceviedOfflineFileEvent) */ {
 public:
  inline ReceviedOfflineFileEvent() : ReceviedOfflineFileEvent(nullptr) {}
  ~ReceviedOfflineFileEvent() override;
  explicit PROTOBUF_CONSTEXPR ReceviedOfflineFileEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceviedOfflineFileEvent(const ReceviedOfflineFileEvent& from);
  ReceviedOfflineFileEvent(ReceviedOfflineFileEvent&& from) noexcept
    : ReceviedOfflineFileEvent() {
    *this = ::std::move(from);
  }

  inline ReceviedOfflineFileEvent& operator=(const ReceviedOfflineFileEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceviedOfflineFileEvent& operator=(ReceviedOfflineFileEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceviedOfflineFileEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceviedOfflineFileEvent* internal_default_instance() {
    return reinterpret_cast<const ReceviedOfflineFileEvent*>(
               &_ReceviedOfflineFileEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReceviedOfflineFileEvent& a, ReceviedOfflineFileEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceviedOfflineFileEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceviedOfflineFileEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceviedOfflineFileEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceviedOfflineFileEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceviedOfflineFileEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceviedOfflineFileEvent& from) {
    ReceviedOfflineFileEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceviedOfflineFileEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.ReceviedOfflineFileEvent";
  }
  protected:
  explicit ReceviedOfflineFileEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 6,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kUserIdFieldNumber = 5,
  };
  // .cqhttp.OfflineFile file = 6;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::cqhttp::OfflineFile& file() const;
  PROTOBUF_NODISCARD ::cqhttp::OfflineFile* release_file();
  ::cqhttp::OfflineFile* mutable_file();
  void set_allocated_file(::cqhttp::OfflineFile* file);
  private:
  const ::cqhttp::OfflineFile& _internal_file() const;
  ::cqhttp::OfflineFile* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::cqhttp::OfflineFile* file);
  ::cqhttp::OfflineFile* unsafe_arena_release_file();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.ReceviedOfflineFileEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::OfflineFile* file_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ClientChangedEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.ClientChangedEvent) */ {
 public:
  inline ClientChangedEvent() : ClientChangedEvent(nullptr) {}
  ~ClientChangedEvent() override;
  explicit PROTOBUF_CONSTEXPR ClientChangedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientChangedEvent(const ClientChangedEvent& from);
  ClientChangedEvent(ClientChangedEvent&& from) noexcept
    : ClientChangedEvent() {
    *this = ::std::move(from);
  }

  inline ClientChangedEvent& operator=(const ClientChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientChangedEvent& operator=(ClientChangedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientChangedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientChangedEvent* internal_default_instance() {
    return reinterpret_cast<const ClientChangedEvent*>(
               &_ClientChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ClientChangedEvent& a, ClientChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientChangedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientChangedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientChangedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientChangedEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientChangedEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientChangedEvent& from) {
    ClientChangedEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientChangedEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.ClientChangedEvent";
  }
  protected:
  explicit ClientChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 3,
    kPostTypeFieldNumber = 1,
    kNoticeTypeFieldNumber = 2,
    kOnlineFieldNumber = 4,
  };
  // .cqhttp.Device client = 3;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::cqhttp::Device& client() const;
  PROTOBUF_NODISCARD ::cqhttp::Device* release_client();
  ::cqhttp::Device* mutable_client();
  void set_allocated_client(::cqhttp::Device* client);
  private:
  const ::cqhttp::Device& _internal_client() const;
  ::cqhttp::Device* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::cqhttp::Device* client);
  ::cqhttp::Device* unsafe_arena_release_client();

  // .cqhttp.CQHTTP_TYPE post_type = 1;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 2;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // bool online = 4;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.ClientChangedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::Device* client_;
    int post_type_;
    int notice_type_;
    bool online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class EssenceMsgChangedEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.EssenceMsgChangedEvent) */ {
 public:
  inline EssenceMsgChangedEvent() : EssenceMsgChangedEvent(nullptr) {}
  ~EssenceMsgChangedEvent() override;
  explicit PROTOBUF_CONSTEXPR EssenceMsgChangedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EssenceMsgChangedEvent(const EssenceMsgChangedEvent& from);
  EssenceMsgChangedEvent(EssenceMsgChangedEvent&& from) noexcept
    : EssenceMsgChangedEvent() {
    *this = ::std::move(from);
  }

  inline EssenceMsgChangedEvent& operator=(const EssenceMsgChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EssenceMsgChangedEvent& operator=(EssenceMsgChangedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EssenceMsgChangedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const EssenceMsgChangedEvent* internal_default_instance() {
    return reinterpret_cast<const EssenceMsgChangedEvent*>(
               &_EssenceMsgChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EssenceMsgChangedEvent& a, EssenceMsgChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EssenceMsgChangedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EssenceMsgChangedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EssenceMsgChangedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EssenceMsgChangedEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EssenceMsgChangedEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EssenceMsgChangedEvent& from) {
    EssenceMsgChangedEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EssenceMsgChangedEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.EssenceMsgChangedEvent";
  }
  protected:
  explicit EssenceMsgChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kSenderIdFieldNumber = 7,
    kOperatorIdFieldNumber = 8,
    kMessageIdFieldNumber = 9,
  };
  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE notice_type = 4;
  void clear_notice_type();
  ::cqhttp::CQHTTP_TYPE notice_type() const;
  void set_notice_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_notice_type() const;
  void _internal_set_notice_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 sender_id = 7;
  void clear_sender_id();
  int64_t sender_id() const;
  void set_sender_id(int64_t value);
  private:
  int64_t _internal_sender_id() const;
  void _internal_set_sender_id(int64_t value);
  public:

  // int64 operator_id = 8;
  void clear_operator_id();
  int64_t operator_id() const;
  void set_operator_id(int64_t value);
  private:
  int64_t _internal_operator_id() const;
  void _internal_set_operator_id(int64_t value);
  public:

  // int32 message_id = 9;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.EssenceMsgChangedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int notice_type_;
    int64_t group_id_;
    int64_t sender_id_;
    int64_t operator_id_;
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FriendAddRequestEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.FriendAddRequestEvent) */ {
 public:
  inline FriendAddRequestEvent() : FriendAddRequestEvent(nullptr) {}
  ~FriendAddRequestEvent() override;
  explicit PROTOBUF_CONSTEXPR FriendAddRequestEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendAddRequestEvent(const FriendAddRequestEvent& from);
  FriendAddRequestEvent(FriendAddRequestEvent&& from) noexcept
    : FriendAddRequestEvent() {
    *this = ::std::move(from);
  }

  inline FriendAddRequestEvent& operator=(const FriendAddRequestEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddRequestEvent& operator=(FriendAddRequestEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendAddRequestEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendAddRequestEvent* internal_default_instance() {
    return reinterpret_cast<const FriendAddRequestEvent*>(
               &_FriendAddRequestEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FriendAddRequestEvent& a, FriendAddRequestEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddRequestEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddRequestEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendAddRequestEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendAddRequestEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendAddRequestEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendAddRequestEvent& from) {
    FriendAddRequestEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddRequestEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.FriendAddRequestEvent";
  }
  protected:
  explicit FriendAddRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 6,
    kFlagFieldNumber = 7,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kRequestTypeFieldNumber = 4,
    kUserIdFieldNumber = 5,
  };
  // string comment = 6;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string flag = 7;
  void clear_flag();
  const std::string& flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag();
  PROTOBUF_NODISCARD std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  void clear_request_type();
  ::cqhttp::CQHTTP_TYPE request_type() const;
  void set_request_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_request_type() const;
  void _internal_set_request_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.FriendAddRequestEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int request_type_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupAddRequestEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GroupAddRequestEvent) */ {
 public:
  inline GroupAddRequestEvent() : GroupAddRequestEvent(nullptr) {}
  ~GroupAddRequestEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupAddRequestEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupAddRequestEvent(const GroupAddRequestEvent& from);
  GroupAddRequestEvent(GroupAddRequestEvent&& from) noexcept
    : GroupAddRequestEvent() {
    *this = ::std::move(from);
  }

  inline GroupAddRequestEvent& operator=(const GroupAddRequestEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupAddRequestEvent& operator=(GroupAddRequestEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupAddRequestEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupAddRequestEvent* internal_default_instance() {
    return reinterpret_cast<const GroupAddRequestEvent*>(
               &_GroupAddRequestEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GroupAddRequestEvent& a, GroupAddRequestEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupAddRequestEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupAddRequestEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupAddRequestEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupAddRequestEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupAddRequestEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupAddRequestEvent& from) {
    GroupAddRequestEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupAddRequestEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GroupAddRequestEvent";
  }
  protected:
  explicit GroupAddRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 5,
    kCommentFieldNumber = 8,
    kFlagFieldNumber = 9,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kRequestTypeFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
  };
  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // string comment = 8;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string flag = 9;
  void clear_flag();
  const std::string& flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag();
  PROTOBUF_NODISCARD std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE request_type = 4;
  void clear_request_type();
  ::cqhttp::CQHTTP_TYPE request_type() const;
  void set_request_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_request_type() const;
  void _internal_set_request_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GroupAddRequestEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int request_type_;
    int64_t group_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class MetaEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.MetaEvent) */ {
 public:
  inline MetaEvent() : MetaEvent(nullptr) {}
  ~MetaEvent() override;
  explicit PROTOBUF_CONSTEXPR MetaEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaEvent(const MetaEvent& from);
  MetaEvent(MetaEvent&& from) noexcept
    : MetaEvent() {
    *this = ::std::move(from);
  }

  inline MetaEvent& operator=(const MetaEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaEvent& operator=(MetaEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaEvent* internal_default_instance() {
    return reinterpret_cast<const MetaEvent*>(
               &_MetaEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MetaEvent& a, MetaEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetaEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetaEvent& from) {
    MetaEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.MetaEvent";
  }
  protected:
  explicit MetaEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kMetaEventTypeFieldNumber = 4,
    kIntervalFieldNumber = 6,
  };
  // .cqhttp.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::cqhttp::Status& status() const;
  PROTOBUF_NODISCARD ::cqhttp::Status* release_status();
  ::cqhttp::Status* mutable_status();
  void set_allocated_status(::cqhttp::Status* status);
  private:
  const ::cqhttp::Status& _internal_status() const;
  ::cqhttp::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::cqhttp::Status* status);
  ::cqhttp::Status* unsafe_arena_release_status();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
  void clear_meta_event_type();
  ::cqhttp::CQHTTP_TYPE meta_event_type() const;
  void set_meta_event_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_meta_event_type() const;
  void _internal_set_meta_event_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 interval = 6;
  void clear_interval();
  int64_t interval() const;
  void set_interval(int64_t value);
  private:
  int64_t _internal_interval() const;
  void _internal_set_interval(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.MetaEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::Status* status_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int meta_event_type_;
    int64_t interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class LifecycleEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.LifecycleEvent) */ {
 public:
  inline LifecycleEvent() : LifecycleEvent(nullptr) {}
  ~LifecycleEvent() override;
  explicit PROTOBUF_CONSTEXPR LifecycleEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LifecycleEvent(const LifecycleEvent& from);
  LifecycleEvent(LifecycleEvent&& from) noexcept
    : LifecycleEvent() {
    *this = ::std::move(from);
  }

  inline LifecycleEvent& operator=(const LifecycleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LifecycleEvent& operator=(LifecycleEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LifecycleEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LifecycleEvent* internal_default_instance() {
    return reinterpret_cast<const LifecycleEvent*>(
               &_LifecycleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LifecycleEvent& a, LifecycleEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LifecycleEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LifecycleEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LifecycleEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LifecycleEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LifecycleEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LifecycleEvent& from) {
    LifecycleEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LifecycleEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.LifecycleEvent";
  }
  protected:
  explicit LifecycleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kMetaEventTypeFieldNumber = 4,
    kIntervalFieldNumber = 6,
    kSubTypeFieldNumber = 7,
  };
  // .cqhttp.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::cqhttp::Status& status() const;
  PROTOBUF_NODISCARD ::cqhttp::Status* release_status();
  ::cqhttp::Status* mutable_status();
  void set_allocated_status(::cqhttp::Status* status);
  private:
  const ::cqhttp::Status& _internal_status() const;
  ::cqhttp::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::cqhttp::Status* status);
  ::cqhttp::Status* unsafe_arena_release_status();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  int64_t self_id() const;
  void set_self_id(int64_t value);
  private:
  int64_t _internal_self_id() const;
  void _internal_set_self_id(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE post_type = 3;
  void clear_post_type();
  ::cqhttp::CQHTTP_TYPE post_type() const;
  void set_post_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_post_type() const;
  void _internal_set_post_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // .cqhttp.CQHTTP_TYPE meta_event_type = 4;
  void clear_meta_event_type();
  ::cqhttp::CQHTTP_TYPE meta_event_type() const;
  void set_meta_event_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_meta_event_type() const;
  void _internal_set_meta_event_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // int64 interval = 6;
  void clear_interval();
  int64_t interval() const;
  void set_interval(int64_t value);
  private:
  int64_t _internal_interval() const;
  void _internal_set_interval(int64_t value);
  public:

  // .cqhttp.CQHTTP_TYPE sub_type = 7;
  void clear_sub_type();
  ::cqhttp::CQHTTP_TYPE sub_type() const;
  void set_sub_type(::cqhttp::CQHTTP_TYPE value);
  private:
  ::cqhttp::CQHTTP_TYPE _internal_sub_type() const;
  void _internal_set_sub_type(::cqhttp::CQHTTP_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.LifecycleEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::Status* status_;
    int64_t time_;
    int64_t self_id_;
    int post_type_;
    int meta_event_type_;
    int64_t interval_;
    int sub_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseEvent

// .cqhttp.CQHTTP_TYPE post_type = 1;
inline void BaseEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.BaseEvent.post_type)
  return _internal_post_type();
}
inline void BaseEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void BaseEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.BaseEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE message_type = 2;
inline void BaseEvent::clear_message_type() {
  _impl_.message_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::_internal_message_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.message_type_);
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::message_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.BaseEvent.message_type)
  return _internal_message_type();
}
inline void BaseEvent::_internal_set_message_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.message_type_ = value;
}
inline void BaseEvent::set_message_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.BaseEvent.message_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 3;
inline void BaseEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.BaseEvent.notice_type)
  return _internal_notice_type();
}
inline void BaseEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void BaseEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.BaseEvent.notice_type)
}

// .cqhttp.CQHTTP_TYPE request_type = 4;
inline void BaseEvent::clear_request_type() {
  _impl_.request_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::_internal_request_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.request_type_);
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::request_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.BaseEvent.request_type)
  return _internal_request_type();
}
inline void BaseEvent::_internal_set_request_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.request_type_ = value;
}
inline void BaseEvent::set_request_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.BaseEvent.request_type)
}

// .cqhttp.CQHTTP_TYPE meta_event_type = 5;
inline void BaseEvent::clear_meta_event_type() {
  _impl_.meta_event_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::_internal_meta_event_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.meta_event_type_);
}
inline ::cqhttp::CQHTTP_TYPE BaseEvent::meta_event_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.BaseEvent.meta_event_type)
  return _internal_meta_event_type();
}
inline void BaseEvent::_internal_set_meta_event_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.meta_event_type_ = value;
}
inline void BaseEvent::set_meta_event_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_meta_event_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.BaseEvent.meta_event_type)
}

// -------------------------------------------------------------------

// PrivateMessageEvent

// int64 time = 1;
inline void PrivateMessageEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t PrivateMessageEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t PrivateMessageEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.time)
  return _internal_time();
}
inline void PrivateMessageEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void PrivateMessageEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.time)
}

// int64 self_id = 2;
inline void PrivateMessageEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t PrivateMessageEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t PrivateMessageEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.self_id)
  return _internal_self_id();
}
inline void PrivateMessageEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void PrivateMessageEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void PrivateMessageEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE PrivateMessageEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE PrivateMessageEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.post_type)
  return _internal_post_type();
}
inline void PrivateMessageEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void PrivateMessageEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE message_type = 4;
inline void PrivateMessageEvent::clear_message_type() {
  _impl_.message_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE PrivateMessageEvent::_internal_message_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.message_type_);
}
inline ::cqhttp::CQHTTP_TYPE PrivateMessageEvent::message_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.message_type)
  return _internal_message_type();
}
inline void PrivateMessageEvent::_internal_set_message_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.message_type_ = value;
}
inline void PrivateMessageEvent::set_message_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.message_type)
}

// .cqhttp.CQHTTP_TYPE sub_type = 5;
inline void PrivateMessageEvent::clear_sub_type() {
  _impl_.sub_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE PrivateMessageEvent::_internal_sub_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.sub_type_);
}
inline ::cqhttp::CQHTTP_TYPE PrivateMessageEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.sub_type)
  return _internal_sub_type();
}
inline void PrivateMessageEvent::_internal_set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.sub_type_ = value;
}
inline void PrivateMessageEvent::set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.sub_type)
}

// int32 message_id = 6;
inline void PrivateMessageEvent::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t PrivateMessageEvent::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t PrivateMessageEvent::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.message_id)
  return _internal_message_id();
}
inline void PrivateMessageEvent::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void PrivateMessageEvent::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.message_id)
}

// int64 user_id = 7;
inline void PrivateMessageEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t PrivateMessageEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t PrivateMessageEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.user_id)
  return _internal_user_id();
}
inline void PrivateMessageEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void PrivateMessageEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.user_id)
}

// string message = 8;
inline void PrivateMessageEvent::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PrivateMessageEvent::message() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMessageEvent::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.message)
}
inline std::string* PrivateMessageEvent::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.PrivateMessageEvent.message)
  return _s;
}
inline const std::string& PrivateMessageEvent::_internal_message() const {
  return _impl_.message_.Get();
}
inline void PrivateMessageEvent::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMessageEvent::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMessageEvent::release_message() {
  // @@protoc_insertion_point(field_release:cqhttp.PrivateMessageEvent.message)
  return _impl_.message_.Release();
}
inline void PrivateMessageEvent::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.PrivateMessageEvent.message)
}

// string raw_message = 9;
inline void PrivateMessageEvent::clear_raw_message() {
  _impl_.raw_message_.ClearToEmpty();
}
inline const std::string& PrivateMessageEvent::raw_message() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.raw_message)
  return _internal_raw_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMessageEvent::set_raw_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.raw_message)
}
inline std::string* PrivateMessageEvent::mutable_raw_message() {
  std::string* _s = _internal_mutable_raw_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.PrivateMessageEvent.raw_message)
  return _s;
}
inline const std::string& PrivateMessageEvent::_internal_raw_message() const {
  return _impl_.raw_message_.Get();
}
inline void PrivateMessageEvent::_internal_set_raw_message(const std::string& value) {
  
  _impl_.raw_message_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMessageEvent::_internal_mutable_raw_message() {
  
  return _impl_.raw_message_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMessageEvent::release_raw_message() {
  // @@protoc_insertion_point(field_release:cqhttp.PrivateMessageEvent.raw_message)
  return _impl_.raw_message_.Release();
}
inline void PrivateMessageEvent::set_allocated_raw_message(std::string* raw_message) {
  if (raw_message != nullptr) {
    
  } else {
    
  }
  _impl_.raw_message_.SetAllocated(raw_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_message_.IsDefault()) {
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.PrivateMessageEvent.raw_message)
}

// int32 font = 10;
inline void PrivateMessageEvent::clear_font() {
  _impl_.font_ = 0;
}
inline int32_t PrivateMessageEvent::_internal_font() const {
  return _impl_.font_;
}
inline int32_t PrivateMessageEvent::font() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.font)
  return _internal_font();
}
inline void PrivateMessageEvent::_internal_set_font(int32_t value) {
  
  _impl_.font_ = value;
}
inline void PrivateMessageEvent::set_font(int32_t value) {
  _internal_set_font(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.font)
}

// .cqhttp.Sender sender = 11;
inline bool PrivateMessageEvent::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool PrivateMessageEvent::has_sender() const {
  return _internal_has_sender();
}
inline const ::cqhttp::Sender& PrivateMessageEvent::_internal_sender() const {
  const ::cqhttp::Sender* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Sender&>(
      ::cqhttp::_Sender_default_instance_);
}
inline const ::cqhttp::Sender& PrivateMessageEvent::sender() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.sender)
  return _internal_sender();
}
inline void PrivateMessageEvent::unsafe_arena_set_allocated_sender(
    ::cqhttp::Sender* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.PrivateMessageEvent.sender)
}
inline ::cqhttp::Sender* PrivateMessageEvent::release_sender() {
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Sender* PrivateMessageEvent::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:cqhttp.PrivateMessageEvent.sender)
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::cqhttp::Sender* PrivateMessageEvent::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Sender>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::cqhttp::Sender* PrivateMessageEvent::mutable_sender() {
  ::cqhttp::Sender* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:cqhttp.PrivateMessageEvent.sender)
  return _msg;
}
inline void PrivateMessageEvent::set_allocated_sender(::cqhttp::Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.PrivateMessageEvent.sender)
}

// int32 temp_source = 12;
inline void PrivateMessageEvent::clear_temp_source() {
  _impl_.temp_source_ = 0;
}
inline int32_t PrivateMessageEvent::_internal_temp_source() const {
  return _impl_.temp_source_;
}
inline int32_t PrivateMessageEvent::temp_source() const {
  // @@protoc_insertion_point(field_get:cqhttp.PrivateMessageEvent.temp_source)
  return _internal_temp_source();
}
inline void PrivateMessageEvent::_internal_set_temp_source(int32_t value) {
  
  _impl_.temp_source_ = value;
}
inline void PrivateMessageEvent::set_temp_source(int32_t value) {
  _internal_set_temp_source(value);
  // @@protoc_insertion_point(field_set:cqhttp.PrivateMessageEvent.temp_source)
}

// -------------------------------------------------------------------

// GroupMessageEvent

// int64 time = 1;
inline void GroupMessageEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupMessageEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupMessageEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.time)
  return _internal_time();
}
inline void GroupMessageEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupMessageEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.time)
}

// int64 self_id = 2;
inline void GroupMessageEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupMessageEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupMessageEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.self_id)
  return _internal_self_id();
}
inline void GroupMessageEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupMessageEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupMessageEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupMessageEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupMessageEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.post_type)
  return _internal_post_type();
}
inline void GroupMessageEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupMessageEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE message_type = 4;
inline void GroupMessageEvent::clear_message_type() {
  _impl_.message_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupMessageEvent::_internal_message_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.message_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupMessageEvent::message_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.message_type)
  return _internal_message_type();
}
inline void GroupMessageEvent::_internal_set_message_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.message_type_ = value;
}
inline void GroupMessageEvent::set_message_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.message_type)
}

// .cqhttp.CQHTTP_TYPE sub_type = 5;
inline void GroupMessageEvent::clear_sub_type() {
  _impl_.sub_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupMessageEvent::_internal_sub_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.sub_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupMessageEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupMessageEvent::_internal_set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.sub_type_ = value;
}
inline void GroupMessageEvent::set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.sub_type)
}

// int32 message_id = 6;
inline void GroupMessageEvent::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t GroupMessageEvent::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t GroupMessageEvent::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.message_id)
  return _internal_message_id();
}
inline void GroupMessageEvent::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void GroupMessageEvent::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.message_id)
}

// int64 user_id = 7;
inline void GroupMessageEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupMessageEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupMessageEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.user_id)
  return _internal_user_id();
}
inline void GroupMessageEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupMessageEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.user_id)
}

// string message = 8;
inline void GroupMessageEvent::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GroupMessageEvent::message() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMessageEvent::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.message)
}
inline std::string* GroupMessageEvent::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupMessageEvent.message)
  return _s;
}
inline const std::string& GroupMessageEvent::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GroupMessageEvent::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMessageEvent::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMessageEvent::release_message() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupMessageEvent.message)
  return _impl_.message_.Release();
}
inline void GroupMessageEvent::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupMessageEvent.message)
}

// string raw_message = 9;
inline void GroupMessageEvent::clear_raw_message() {
  _impl_.raw_message_.ClearToEmpty();
}
inline const std::string& GroupMessageEvent::raw_message() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.raw_message)
  return _internal_raw_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMessageEvent::set_raw_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.raw_message)
}
inline std::string* GroupMessageEvent::mutable_raw_message() {
  std::string* _s = _internal_mutable_raw_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupMessageEvent.raw_message)
  return _s;
}
inline const std::string& GroupMessageEvent::_internal_raw_message() const {
  return _impl_.raw_message_.Get();
}
inline void GroupMessageEvent::_internal_set_raw_message(const std::string& value) {
  
  _impl_.raw_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMessageEvent::_internal_mutable_raw_message() {
  
  return _impl_.raw_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMessageEvent::release_raw_message() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupMessageEvent.raw_message)
  return _impl_.raw_message_.Release();
}
inline void GroupMessageEvent::set_allocated_raw_message(std::string* raw_message) {
  if (raw_message != nullptr) {
    
  } else {
    
  }
  _impl_.raw_message_.SetAllocated(raw_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_message_.IsDefault()) {
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupMessageEvent.raw_message)
}

// int32 font = 10;
inline void GroupMessageEvent::clear_font() {
  _impl_.font_ = 0;
}
inline int32_t GroupMessageEvent::_internal_font() const {
  return _impl_.font_;
}
inline int32_t GroupMessageEvent::font() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.font)
  return _internal_font();
}
inline void GroupMessageEvent::_internal_set_font(int32_t value) {
  
  _impl_.font_ = value;
}
inline void GroupMessageEvent::set_font(int32_t value) {
  _internal_set_font(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.font)
}

// .cqhttp.Sender sender = 11;
inline bool GroupMessageEvent::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool GroupMessageEvent::has_sender() const {
  return _internal_has_sender();
}
inline const ::cqhttp::Sender& GroupMessageEvent::_internal_sender() const {
  const ::cqhttp::Sender* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Sender&>(
      ::cqhttp::_Sender_default_instance_);
}
inline const ::cqhttp::Sender& GroupMessageEvent::sender() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.sender)
  return _internal_sender();
}
inline void GroupMessageEvent::unsafe_arena_set_allocated_sender(
    ::cqhttp::Sender* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GroupMessageEvent.sender)
}
inline ::cqhttp::Sender* GroupMessageEvent::release_sender() {
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Sender* GroupMessageEvent::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupMessageEvent.sender)
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::cqhttp::Sender* GroupMessageEvent::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Sender>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::cqhttp::Sender* GroupMessageEvent::mutable_sender() {
  ::cqhttp::Sender* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupMessageEvent.sender)
  return _msg;
}
inline void GroupMessageEvent::set_allocated_sender(::cqhttp::Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupMessageEvent.sender)
}

// int64 group_id = 12;
inline void GroupMessageEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupMessageEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupMessageEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.group_id)
  return _internal_group_id();
}
inline void GroupMessageEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupMessageEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupMessageEvent.group_id)
}

// .cqhttp.Anonymous anonymous = 13;
inline bool GroupMessageEvent::_internal_has_anonymous() const {
  return this != internal_default_instance() && _impl_.anonymous_ != nullptr;
}
inline bool GroupMessageEvent::has_anonymous() const {
  return _internal_has_anonymous();
}
inline const ::cqhttp::Anonymous& GroupMessageEvent::_internal_anonymous() const {
  const ::cqhttp::Anonymous* p = _impl_.anonymous_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Anonymous&>(
      ::cqhttp::_Anonymous_default_instance_);
}
inline const ::cqhttp::Anonymous& GroupMessageEvent::anonymous() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupMessageEvent.anonymous)
  return _internal_anonymous();
}
inline void GroupMessageEvent::unsafe_arena_set_allocated_anonymous(
    ::cqhttp::Anonymous* anonymous) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymous_);
  }
  _impl_.anonymous_ = anonymous;
  if (anonymous) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GroupMessageEvent.anonymous)
}
inline ::cqhttp::Anonymous* GroupMessageEvent::release_anonymous() {
  
  ::cqhttp::Anonymous* temp = _impl_.anonymous_;
  _impl_.anonymous_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Anonymous* GroupMessageEvent::unsafe_arena_release_anonymous() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupMessageEvent.anonymous)
  
  ::cqhttp::Anonymous* temp = _impl_.anonymous_;
  _impl_.anonymous_ = nullptr;
  return temp;
}
inline ::cqhttp::Anonymous* GroupMessageEvent::_internal_mutable_anonymous() {
  
  if (_impl_.anonymous_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Anonymous>(GetArenaForAllocation());
    _impl_.anonymous_ = p;
  }
  return _impl_.anonymous_;
}
inline ::cqhttp::Anonymous* GroupMessageEvent::mutable_anonymous() {
  ::cqhttp::Anonymous* _msg = _internal_mutable_anonymous();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupMessageEvent.anonymous)
  return _msg;
}
inline void GroupMessageEvent::set_allocated_anonymous(::cqhttp::Anonymous* anonymous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymous_);
  }
  if (anonymous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anonymous));
    if (message_arena != submessage_arena) {
      anonymous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymous, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anonymous_ = anonymous;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupMessageEvent.anonymous)
}

// -------------------------------------------------------------------

// FriendRecallEvent

// int64 time = 1;
inline void FriendRecallEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t FriendRecallEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t FriendRecallEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendRecallEvent.time)
  return _internal_time();
}
inline void FriendRecallEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void FriendRecallEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendRecallEvent.time)
}

// int64 self_id = 2;
inline void FriendRecallEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t FriendRecallEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t FriendRecallEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendRecallEvent.self_id)
  return _internal_self_id();
}
inline void FriendRecallEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void FriendRecallEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendRecallEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void FriendRecallEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE FriendRecallEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE FriendRecallEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendRecallEvent.post_type)
  return _internal_post_type();
}
inline void FriendRecallEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void FriendRecallEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendRecallEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void FriendRecallEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE FriendRecallEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE FriendRecallEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendRecallEvent.notice_type)
  return _internal_notice_type();
}
inline void FriendRecallEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void FriendRecallEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendRecallEvent.notice_type)
}

// int64 user_id = 5;
inline void FriendRecallEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t FriendRecallEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t FriendRecallEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendRecallEvent.user_id)
  return _internal_user_id();
}
inline void FriendRecallEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void FriendRecallEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendRecallEvent.user_id)
}

// int64 message_id = 6;
inline void FriendRecallEvent::clear_message_id() {
  _impl_.message_id_ = int64_t{0};
}
inline int64_t FriendRecallEvent::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int64_t FriendRecallEvent::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendRecallEvent.message_id)
  return _internal_message_id();
}
inline void FriendRecallEvent::_internal_set_message_id(int64_t value) {
  
  _impl_.message_id_ = value;
}
inline void FriendRecallEvent::set_message_id(int64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendRecallEvent.message_id)
}

// -------------------------------------------------------------------

// GroupRecallEvent

// int64 time = 1;
inline void GroupRecallEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupRecallEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupRecallEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.time)
  return _internal_time();
}
inline void GroupRecallEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupRecallEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.time)
}

// int64 self_id = 2;
inline void GroupRecallEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupRecallEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupRecallEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.self_id)
  return _internal_self_id();
}
inline void GroupRecallEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupRecallEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupRecallEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupRecallEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupRecallEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.post_type)
  return _internal_post_type();
}
inline void GroupRecallEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupRecallEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupRecallEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupRecallEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupRecallEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupRecallEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupRecallEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.notice_type)
}

// int64 group_id = 5;
inline void GroupRecallEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupRecallEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupRecallEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.group_id)
  return _internal_group_id();
}
inline void GroupRecallEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupRecallEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.group_id)
}

// int64 user_id = 6;
inline void GroupRecallEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupRecallEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupRecallEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.user_id)
  return _internal_user_id();
}
inline void GroupRecallEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupRecallEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.user_id)
}

// int64 operator_id = 7;
inline void GroupRecallEvent::clear_operator_id() {
  _impl_.operator_id_ = int64_t{0};
}
inline int64_t GroupRecallEvent::_internal_operator_id() const {
  return _impl_.operator_id_;
}
inline int64_t GroupRecallEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupRecallEvent::_internal_set_operator_id(int64_t value) {
  
  _impl_.operator_id_ = value;
}
inline void GroupRecallEvent::set_operator_id(int64_t value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.operator_id)
}

// int64 message_id = 8;
inline void GroupRecallEvent::clear_message_id() {
  _impl_.message_id_ = int64_t{0};
}
inline int64_t GroupRecallEvent::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int64_t GroupRecallEvent::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupRecallEvent.message_id)
  return _internal_message_id();
}
inline void GroupRecallEvent::_internal_set_message_id(int64_t value) {
  
  _impl_.message_id_ = value;
}
inline void GroupRecallEvent::set_message_id(int64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupRecallEvent.message_id)
}

// -------------------------------------------------------------------

// GroupIncreaseEvent

// int64 time = 1;
inline void GroupIncreaseEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupIncreaseEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupIncreaseEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.time)
  return _internal_time();
}
inline void GroupIncreaseEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupIncreaseEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.time)
}

// int64 self_id = 2;
inline void GroupIncreaseEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupIncreaseEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupIncreaseEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.self_id)
  return _internal_self_id();
}
inline void GroupIncreaseEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupIncreaseEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupIncreaseEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupIncreaseEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupIncreaseEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.post_type)
  return _internal_post_type();
}
inline void GroupIncreaseEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupIncreaseEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupIncreaseEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupIncreaseEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupIncreaseEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupIncreaseEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupIncreaseEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.notice_type)
}

// string sub_type = 5;
inline void GroupIncreaseEvent::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& GroupIncreaseEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupIncreaseEvent::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.sub_type)
}
inline std::string* GroupIncreaseEvent::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupIncreaseEvent.sub_type)
  return _s;
}
inline const std::string& GroupIncreaseEvent::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void GroupIncreaseEvent::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupIncreaseEvent::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupIncreaseEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupIncreaseEvent.sub_type)
  return _impl_.sub_type_.Release();
}
inline void GroupIncreaseEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupIncreaseEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupIncreaseEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupIncreaseEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupIncreaseEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.group_id)
  return _internal_group_id();
}
inline void GroupIncreaseEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupIncreaseEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.group_id)
}

// int64 operator_id = 7;
inline void GroupIncreaseEvent::clear_operator_id() {
  _impl_.operator_id_ = int64_t{0};
}
inline int64_t GroupIncreaseEvent::_internal_operator_id() const {
  return _impl_.operator_id_;
}
inline int64_t GroupIncreaseEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupIncreaseEvent::_internal_set_operator_id(int64_t value) {
  
  _impl_.operator_id_ = value;
}
inline void GroupIncreaseEvent::set_operator_id(int64_t value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.operator_id)
}

// int64 user_id = 8;
inline void GroupIncreaseEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupIncreaseEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupIncreaseEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupIncreaseEvent.user_id)
  return _internal_user_id();
}
inline void GroupIncreaseEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupIncreaseEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupIncreaseEvent.user_id)
}

// -------------------------------------------------------------------

// GroupDecreaseEvent

// int64 time = 1;
inline void GroupDecreaseEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupDecreaseEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupDecreaseEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.time)
  return _internal_time();
}
inline void GroupDecreaseEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupDecreaseEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.time)
}

// int64 self_id = 2;
inline void GroupDecreaseEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupDecreaseEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupDecreaseEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.self_id)
  return _internal_self_id();
}
inline void GroupDecreaseEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupDecreaseEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupDecreaseEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupDecreaseEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupDecreaseEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.post_type)
  return _internal_post_type();
}
inline void GroupDecreaseEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupDecreaseEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupDecreaseEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupDecreaseEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupDecreaseEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupDecreaseEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupDecreaseEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.notice_type)
}

// string sub_type = 5;
inline void GroupDecreaseEvent::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& GroupDecreaseEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupDecreaseEvent::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.sub_type)
}
inline std::string* GroupDecreaseEvent::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupDecreaseEvent.sub_type)
  return _s;
}
inline const std::string& GroupDecreaseEvent::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void GroupDecreaseEvent::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupDecreaseEvent::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupDecreaseEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupDecreaseEvent.sub_type)
  return _impl_.sub_type_.Release();
}
inline void GroupDecreaseEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupDecreaseEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupDecreaseEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupDecreaseEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupDecreaseEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.group_id)
  return _internal_group_id();
}
inline void GroupDecreaseEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupDecreaseEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.group_id)
}

// int64 operator_id = 7;
inline void GroupDecreaseEvent::clear_operator_id() {
  _impl_.operator_id_ = int64_t{0};
}
inline int64_t GroupDecreaseEvent::_internal_operator_id() const {
  return _impl_.operator_id_;
}
inline int64_t GroupDecreaseEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupDecreaseEvent::_internal_set_operator_id(int64_t value) {
  
  _impl_.operator_id_ = value;
}
inline void GroupDecreaseEvent::set_operator_id(int64_t value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.operator_id)
}

// int64 user_id = 8;
inline void GroupDecreaseEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupDecreaseEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupDecreaseEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupDecreaseEvent.user_id)
  return _internal_user_id();
}
inline void GroupDecreaseEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupDecreaseEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupDecreaseEvent.user_id)
}

// -------------------------------------------------------------------

// GroupAdminChangeEvent

// int64 time = 1;
inline void GroupAdminChangeEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupAdminChangeEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupAdminChangeEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.time)
  return _internal_time();
}
inline void GroupAdminChangeEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupAdminChangeEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.time)
}

// int64 self_id = 2;
inline void GroupAdminChangeEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupAdminChangeEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupAdminChangeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.self_id)
  return _internal_self_id();
}
inline void GroupAdminChangeEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupAdminChangeEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupAdminChangeEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupAdminChangeEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupAdminChangeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.post_type)
  return _internal_post_type();
}
inline void GroupAdminChangeEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupAdminChangeEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupAdminChangeEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupAdminChangeEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupAdminChangeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupAdminChangeEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupAdminChangeEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.notice_type)
}

// string sub_type = 5;
inline void GroupAdminChangeEvent::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& GroupAdminChangeEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupAdminChangeEvent::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.sub_type)
}
inline std::string* GroupAdminChangeEvent::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupAdminChangeEvent.sub_type)
  return _s;
}
inline const std::string& GroupAdminChangeEvent::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void GroupAdminChangeEvent::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupAdminChangeEvent::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupAdminChangeEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupAdminChangeEvent.sub_type)
  return _impl_.sub_type_.Release();
}
inline void GroupAdminChangeEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupAdminChangeEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupAdminChangeEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupAdminChangeEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupAdminChangeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.group_id)
  return _internal_group_id();
}
inline void GroupAdminChangeEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupAdminChangeEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.group_id)
}

// int64 user_id = 7;
inline void GroupAdminChangeEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupAdminChangeEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupAdminChangeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAdminChangeEvent.user_id)
  return _internal_user_id();
}
inline void GroupAdminChangeEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupAdminChangeEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAdminChangeEvent.user_id)
}

// -------------------------------------------------------------------

// GroupFileUploadEvent

// int64 time = 1;
inline void GroupFileUploadEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupFileUploadEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupFileUploadEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.time)
  return _internal_time();
}
inline void GroupFileUploadEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupFileUploadEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFileUploadEvent.time)
}

// int64 self_id = 2;
inline void GroupFileUploadEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupFileUploadEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupFileUploadEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.self_id)
  return _internal_self_id();
}
inline void GroupFileUploadEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupFileUploadEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFileUploadEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupFileUploadEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupFileUploadEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupFileUploadEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.post_type)
  return _internal_post_type();
}
inline void GroupFileUploadEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupFileUploadEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFileUploadEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupFileUploadEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupFileUploadEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupFileUploadEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupFileUploadEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupFileUploadEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFileUploadEvent.notice_type)
}

// int64 group_id = 5;
inline void GroupFileUploadEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupFileUploadEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupFileUploadEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.group_id)
  return _internal_group_id();
}
inline void GroupFileUploadEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupFileUploadEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFileUploadEvent.group_id)
}

// int64 user_id = 6;
inline void GroupFileUploadEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupFileUploadEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupFileUploadEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.user_id)
  return _internal_user_id();
}
inline void GroupFileUploadEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupFileUploadEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupFileUploadEvent.user_id)
}

// .cqhttp.GroupFile file = 7;
inline bool GroupFileUploadEvent::_internal_has_file() const {
  return this != internal_default_instance() && _impl_.file_ != nullptr;
}
inline bool GroupFileUploadEvent::has_file() const {
  return _internal_has_file();
}
inline const ::cqhttp::GroupFile& GroupFileUploadEvent::_internal_file() const {
  const ::cqhttp::GroupFile* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GroupFile&>(
      ::cqhttp::_GroupFile_default_instance_);
}
inline const ::cqhttp::GroupFile& GroupFileUploadEvent::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupFileUploadEvent.file)
  return _internal_file();
}
inline void GroupFileUploadEvent::unsafe_arena_set_allocated_file(
    ::cqhttp::GroupFile* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GroupFileUploadEvent.file)
}
inline ::cqhttp::GroupFile* GroupFileUploadEvent::release_file() {
  
  ::cqhttp::GroupFile* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GroupFile* GroupFileUploadEvent::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupFileUploadEvent.file)
  
  ::cqhttp::GroupFile* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::cqhttp::GroupFile* GroupFileUploadEvent::_internal_mutable_file() {
  
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GroupFile>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::cqhttp::GroupFile* GroupFileUploadEvent::mutable_file() {
  ::cqhttp::GroupFile* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupFileUploadEvent.file)
  return _msg;
}
inline void GroupFileUploadEvent::set_allocated_file(::cqhttp::GroupFile* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file));
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupFileUploadEvent.file)
}

// -------------------------------------------------------------------

// GroupBanEvent

// int64 time = 1;
inline void GroupBanEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupBanEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupBanEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.time)
  return _internal_time();
}
inline void GroupBanEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupBanEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.time)
}

// int64 self_id = 2;
inline void GroupBanEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupBanEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupBanEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.self_id)
  return _internal_self_id();
}
inline void GroupBanEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupBanEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupBanEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupBanEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupBanEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.post_type)
  return _internal_post_type();
}
inline void GroupBanEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupBanEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupBanEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupBanEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupBanEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupBanEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupBanEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.notice_type)
}

// string sub_type = 5;
inline void GroupBanEvent::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& GroupBanEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupBanEvent::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.sub_type)
}
inline std::string* GroupBanEvent::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupBanEvent.sub_type)
  return _s;
}
inline const std::string& GroupBanEvent::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void GroupBanEvent::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupBanEvent::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupBanEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupBanEvent.sub_type)
  return _impl_.sub_type_.Release();
}
inline void GroupBanEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupBanEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupBanEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupBanEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupBanEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.group_id)
  return _internal_group_id();
}
inline void GroupBanEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupBanEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.group_id)
}

// int64 operator_id = 7;
inline void GroupBanEvent::clear_operator_id() {
  _impl_.operator_id_ = int64_t{0};
}
inline int64_t GroupBanEvent::_internal_operator_id() const {
  return _impl_.operator_id_;
}
inline int64_t GroupBanEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupBanEvent::_internal_set_operator_id(int64_t value) {
  
  _impl_.operator_id_ = value;
}
inline void GroupBanEvent::set_operator_id(int64_t value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.operator_id)
}

// int64 user_id = 8;
inline void GroupBanEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupBanEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupBanEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.user_id)
  return _internal_user_id();
}
inline void GroupBanEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupBanEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.user_id)
}

// int64 duration = 9;
inline void GroupBanEvent::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t GroupBanEvent::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t GroupBanEvent::duration() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupBanEvent.duration)
  return _internal_duration();
}
inline void GroupBanEvent::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void GroupBanEvent::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupBanEvent.duration)
}

// -------------------------------------------------------------------

// FriendAddEvent

// int64 time = 1;
inline void FriendAddEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t FriendAddEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t FriendAddEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddEvent.time)
  return _internal_time();
}
inline void FriendAddEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void FriendAddEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddEvent.time)
}

// int64 self_id = 2;
inline void FriendAddEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t FriendAddEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t FriendAddEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddEvent.self_id)
  return _internal_self_id();
}
inline void FriendAddEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void FriendAddEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void FriendAddEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE FriendAddEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE FriendAddEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddEvent.post_type)
  return _internal_post_type();
}
inline void FriendAddEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void FriendAddEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void FriendAddEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE FriendAddEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE FriendAddEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddEvent.notice_type)
  return _internal_notice_type();
}
inline void FriendAddEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void FriendAddEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddEvent.notice_type)
}

// int64 user_id = 5;
inline void FriendAddEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t FriendAddEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t FriendAddEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddEvent.user_id)
  return _internal_user_id();
}
inline void FriendAddEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void FriendAddEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddEvent.user_id)
}

// -------------------------------------------------------------------

// NotifyEvent

// int64 time = 1;
inline void NotifyEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t NotifyEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t NotifyEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.time)
  return _internal_time();
}
inline void NotifyEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void NotifyEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.time)
}

// int64 self_id = 2;
inline void NotifyEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t NotifyEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t NotifyEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.self_id)
  return _internal_self_id();
}
inline void NotifyEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void NotifyEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void NotifyEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE NotifyEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE NotifyEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.post_type)
  return _internal_post_type();
}
inline void NotifyEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void NotifyEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void NotifyEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE NotifyEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE NotifyEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.notice_type)
  return _internal_notice_type();
}
inline void NotifyEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void NotifyEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.notice_type)
}

// .cqhttp.CQHTTP_TYPE sub_type = 5;
inline void NotifyEvent::clear_sub_type() {
  _impl_.sub_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE NotifyEvent::_internal_sub_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.sub_type_);
}
inline ::cqhttp::CQHTTP_TYPE NotifyEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.sub_type)
  return _internal_sub_type();
}
inline void NotifyEvent::_internal_set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.sub_type_ = value;
}
inline void NotifyEvent::set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.sub_type)
}

// int64 sender_id = 6;
inline void NotifyEvent::clear_sender_id() {
  _impl_.sender_id_ = int64_t{0};
}
inline int64_t NotifyEvent::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int64_t NotifyEvent::sender_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.sender_id)
  return _internal_sender_id();
}
inline void NotifyEvent::_internal_set_sender_id(int64_t value) {
  
  _impl_.sender_id_ = value;
}
inline void NotifyEvent::set_sender_id(int64_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.sender_id)
}

// int64 user_id = 7;
inline void NotifyEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t NotifyEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t NotifyEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.user_id)
  return _internal_user_id();
}
inline void NotifyEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void NotifyEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.user_id)
}

// int64 target_id = 8;
inline void NotifyEvent::clear_target_id() {
  _impl_.target_id_ = int64_t{0};
}
inline int64_t NotifyEvent::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int64_t NotifyEvent::target_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.target_id)
  return _internal_target_id();
}
inline void NotifyEvent::_internal_set_target_id(int64_t value) {
  
  _impl_.target_id_ = value;
}
inline void NotifyEvent::set_target_id(int64_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.target_id)
}

// int64 group_id = 9;
inline void NotifyEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t NotifyEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t NotifyEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.group_id)
  return _internal_group_id();
}
inline void NotifyEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void NotifyEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.group_id)
}

// string honor_type = 10;
inline void NotifyEvent::clear_honor_type() {
  _impl_.honor_type_.ClearToEmpty();
}
inline const std::string& NotifyEvent::honor_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.honor_type)
  return _internal_honor_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyEvent::set_honor_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.honor_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.honor_type)
}
inline std::string* NotifyEvent::mutable_honor_type() {
  std::string* _s = _internal_mutable_honor_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.NotifyEvent.honor_type)
  return _s;
}
inline const std::string& NotifyEvent::_internal_honor_type() const {
  return _impl_.honor_type_.Get();
}
inline void NotifyEvent::_internal_set_honor_type(const std::string& value) {
  
  _impl_.honor_type_.Set(value, GetArenaForAllocation());
}
inline std::string* NotifyEvent::_internal_mutable_honor_type() {
  
  return _impl_.honor_type_.Mutable(GetArenaForAllocation());
}
inline std::string* NotifyEvent::release_honor_type() {
  // @@protoc_insertion_point(field_release:cqhttp.NotifyEvent.honor_type)
  return _impl_.honor_type_.Release();
}
inline void NotifyEvent::set_allocated_honor_type(std::string* honor_type) {
  if (honor_type != nullptr) {
    
  } else {
    
  }
  _impl_.honor_type_.SetAllocated(honor_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.honor_type_.IsDefault()) {
    _impl_.honor_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.NotifyEvent.honor_type)
}

// string title = 11;
inline void NotifyEvent::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& NotifyEvent::title() const {
  // @@protoc_insertion_point(field_get:cqhttp.NotifyEvent.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyEvent::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.NotifyEvent.title)
}
inline std::string* NotifyEvent::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cqhttp.NotifyEvent.title)
  return _s;
}
inline const std::string& NotifyEvent::_internal_title() const {
  return _impl_.title_.Get();
}
inline void NotifyEvent::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* NotifyEvent::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* NotifyEvent::release_title() {
  // @@protoc_insertion_point(field_release:cqhttp.NotifyEvent.title)
  return _impl_.title_.Release();
}
inline void NotifyEvent::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.NotifyEvent.title)
}

// -------------------------------------------------------------------

// GroupCardChangedEvent

// int64 time = 1;
inline void GroupCardChangedEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupCardChangedEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupCardChangedEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.time)
  return _internal_time();
}
inline void GroupCardChangedEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupCardChangedEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.time)
}

// int64 self_id = 2;
inline void GroupCardChangedEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupCardChangedEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupCardChangedEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.self_id)
  return _internal_self_id();
}
inline void GroupCardChangedEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupCardChangedEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupCardChangedEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupCardChangedEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupCardChangedEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.post_type)
  return _internal_post_type();
}
inline void GroupCardChangedEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupCardChangedEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void GroupCardChangedEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupCardChangedEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupCardChangedEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupCardChangedEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void GroupCardChangedEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.notice_type)
}

// int64 group_id = 5;
inline void GroupCardChangedEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupCardChangedEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupCardChangedEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.group_id)
  return _internal_group_id();
}
inline void GroupCardChangedEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupCardChangedEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.group_id)
}

// int64 user_id = 6;
inline void GroupCardChangedEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupCardChangedEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupCardChangedEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.user_id)
  return _internal_user_id();
}
inline void GroupCardChangedEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupCardChangedEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.user_id)
}

// string card_new = 7;
inline void GroupCardChangedEvent::clear_card_new() {
  _impl_.card_new_.ClearToEmpty();
}
inline const std::string& GroupCardChangedEvent::card_new() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.card_new)
  return _internal_card_new();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCardChangedEvent::set_card_new(ArgT0&& arg0, ArgT... args) {
 
 _impl_.card_new_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.card_new)
}
inline std::string* GroupCardChangedEvent::mutable_card_new() {
  std::string* _s = _internal_mutable_card_new();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupCardChangedEvent.card_new)
  return _s;
}
inline const std::string& GroupCardChangedEvent::_internal_card_new() const {
  return _impl_.card_new_.Get();
}
inline void GroupCardChangedEvent::_internal_set_card_new(const std::string& value) {
  
  _impl_.card_new_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCardChangedEvent::_internal_mutable_card_new() {
  
  return _impl_.card_new_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCardChangedEvent::release_card_new() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupCardChangedEvent.card_new)
  return _impl_.card_new_.Release();
}
inline void GroupCardChangedEvent::set_allocated_card_new(std::string* card_new) {
  if (card_new != nullptr) {
    
  } else {
    
  }
  _impl_.card_new_.SetAllocated(card_new, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.card_new_.IsDefault()) {
    _impl_.card_new_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupCardChangedEvent.card_new)
}

// string card_old = 8;
inline void GroupCardChangedEvent::clear_card_old() {
  _impl_.card_old_.ClearToEmpty();
}
inline const std::string& GroupCardChangedEvent::card_old() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupCardChangedEvent.card_old)
  return _internal_card_old();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCardChangedEvent::set_card_old(ArgT0&& arg0, ArgT... args) {
 
 _impl_.card_old_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupCardChangedEvent.card_old)
}
inline std::string* GroupCardChangedEvent::mutable_card_old() {
  std::string* _s = _internal_mutable_card_old();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupCardChangedEvent.card_old)
  return _s;
}
inline const std::string& GroupCardChangedEvent::_internal_card_old() const {
  return _impl_.card_old_.Get();
}
inline void GroupCardChangedEvent::_internal_set_card_old(const std::string& value) {
  
  _impl_.card_old_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCardChangedEvent::_internal_mutable_card_old() {
  
  return _impl_.card_old_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCardChangedEvent::release_card_old() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupCardChangedEvent.card_old)
  return _impl_.card_old_.Release();
}
inline void GroupCardChangedEvent::set_allocated_card_old(std::string* card_old) {
  if (card_old != nullptr) {
    
  } else {
    
  }
  _impl_.card_old_.SetAllocated(card_old, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.card_old_.IsDefault()) {
    _impl_.card_old_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupCardChangedEvent.card_old)
}

// -------------------------------------------------------------------

// ReceviedOfflineFileEvent

// int64 time = 1;
inline void ReceviedOfflineFileEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t ReceviedOfflineFileEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t ReceviedOfflineFileEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReceviedOfflineFileEvent.time)
  return _internal_time();
}
inline void ReceviedOfflineFileEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void ReceviedOfflineFileEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.ReceviedOfflineFileEvent.time)
}

// int64 self_id = 2;
inline void ReceviedOfflineFileEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t ReceviedOfflineFileEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t ReceviedOfflineFileEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReceviedOfflineFileEvent.self_id)
  return _internal_self_id();
}
inline void ReceviedOfflineFileEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void ReceviedOfflineFileEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.ReceviedOfflineFileEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void ReceviedOfflineFileEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE ReceviedOfflineFileEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE ReceviedOfflineFileEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReceviedOfflineFileEvent.post_type)
  return _internal_post_type();
}
inline void ReceviedOfflineFileEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void ReceviedOfflineFileEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.ReceviedOfflineFileEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void ReceviedOfflineFileEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE ReceviedOfflineFileEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE ReceviedOfflineFileEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReceviedOfflineFileEvent.notice_type)
  return _internal_notice_type();
}
inline void ReceviedOfflineFileEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void ReceviedOfflineFileEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.ReceviedOfflineFileEvent.notice_type)
}

// int64 user_id = 5;
inline void ReceviedOfflineFileEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t ReceviedOfflineFileEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t ReceviedOfflineFileEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReceviedOfflineFileEvent.user_id)
  return _internal_user_id();
}
inline void ReceviedOfflineFileEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void ReceviedOfflineFileEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.ReceviedOfflineFileEvent.user_id)
}

// .cqhttp.OfflineFile file = 6;
inline bool ReceviedOfflineFileEvent::_internal_has_file() const {
  return this != internal_default_instance() && _impl_.file_ != nullptr;
}
inline bool ReceviedOfflineFileEvent::has_file() const {
  return _internal_has_file();
}
inline const ::cqhttp::OfflineFile& ReceviedOfflineFileEvent::_internal_file() const {
  const ::cqhttp::OfflineFile* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::OfflineFile&>(
      ::cqhttp::_OfflineFile_default_instance_);
}
inline const ::cqhttp::OfflineFile& ReceviedOfflineFileEvent::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReceviedOfflineFileEvent.file)
  return _internal_file();
}
inline void ReceviedOfflineFileEvent::unsafe_arena_set_allocated_file(
    ::cqhttp::OfflineFile* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.ReceviedOfflineFileEvent.file)
}
inline ::cqhttp::OfflineFile* ReceviedOfflineFileEvent::release_file() {
  
  ::cqhttp::OfflineFile* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::OfflineFile* ReceviedOfflineFileEvent::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.ReceviedOfflineFileEvent.file)
  
  ::cqhttp::OfflineFile* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::cqhttp::OfflineFile* ReceviedOfflineFileEvent::_internal_mutable_file() {
  
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::OfflineFile>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::cqhttp::OfflineFile* ReceviedOfflineFileEvent::mutable_file() {
  ::cqhttp::OfflineFile* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.ReceviedOfflineFileEvent.file)
  return _msg;
}
inline void ReceviedOfflineFileEvent::set_allocated_file(::cqhttp::OfflineFile* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file));
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ReceviedOfflineFileEvent.file)
}

// -------------------------------------------------------------------

// ClientChangedEvent

// .cqhttp.CQHTTP_TYPE post_type = 1;
inline void ClientChangedEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE ClientChangedEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE ClientChangedEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.ClientChangedEvent.post_type)
  return _internal_post_type();
}
inline void ClientChangedEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void ClientChangedEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.ClientChangedEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 2;
inline void ClientChangedEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE ClientChangedEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE ClientChangedEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.ClientChangedEvent.notice_type)
  return _internal_notice_type();
}
inline void ClientChangedEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void ClientChangedEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.ClientChangedEvent.notice_type)
}

// .cqhttp.Device client = 3;
inline bool ClientChangedEvent::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool ClientChangedEvent::has_client() const {
  return _internal_has_client();
}
inline const ::cqhttp::Device& ClientChangedEvent::_internal_client() const {
  const ::cqhttp::Device* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Device&>(
      ::cqhttp::_Device_default_instance_);
}
inline const ::cqhttp::Device& ClientChangedEvent::client() const {
  // @@protoc_insertion_point(field_get:cqhttp.ClientChangedEvent.client)
  return _internal_client();
}
inline void ClientChangedEvent::unsafe_arena_set_allocated_client(
    ::cqhttp::Device* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.ClientChangedEvent.client)
}
inline ::cqhttp::Device* ClientChangedEvent::release_client() {
  
  ::cqhttp::Device* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Device* ClientChangedEvent::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:cqhttp.ClientChangedEvent.client)
  
  ::cqhttp::Device* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::cqhttp::Device* ClientChangedEvent::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Device>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::cqhttp::Device* ClientChangedEvent::mutable_client() {
  ::cqhttp::Device* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:cqhttp.ClientChangedEvent.client)
  return _msg;
}
inline void ClientChangedEvent::set_allocated_client(::cqhttp::Device* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client));
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ClientChangedEvent.client)
}

// bool online = 4;
inline void ClientChangedEvent::clear_online() {
  _impl_.online_ = false;
}
inline bool ClientChangedEvent::_internal_online() const {
  return _impl_.online_;
}
inline bool ClientChangedEvent::online() const {
  // @@protoc_insertion_point(field_get:cqhttp.ClientChangedEvent.online)
  return _internal_online();
}
inline void ClientChangedEvent::_internal_set_online(bool value) {
  
  _impl_.online_ = value;
}
inline void ClientChangedEvent::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:cqhttp.ClientChangedEvent.online)
}

// -------------------------------------------------------------------

// EssenceMsgChangedEvent

// int64 time = 1;
inline void EssenceMsgChangedEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t EssenceMsgChangedEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t EssenceMsgChangedEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.time)
  return _internal_time();
}
inline void EssenceMsgChangedEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void EssenceMsgChangedEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.time)
}

// int64 self_id = 2;
inline void EssenceMsgChangedEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t EssenceMsgChangedEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t EssenceMsgChangedEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.self_id)
  return _internal_self_id();
}
inline void EssenceMsgChangedEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void EssenceMsgChangedEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void EssenceMsgChangedEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE EssenceMsgChangedEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE EssenceMsgChangedEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.post_type)
  return _internal_post_type();
}
inline void EssenceMsgChangedEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void EssenceMsgChangedEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE notice_type = 4;
inline void EssenceMsgChangedEvent::clear_notice_type() {
  _impl_.notice_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE EssenceMsgChangedEvent::_internal_notice_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.notice_type_);
}
inline ::cqhttp::CQHTTP_TYPE EssenceMsgChangedEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.notice_type)
  return _internal_notice_type();
}
inline void EssenceMsgChangedEvent::_internal_set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.notice_type_ = value;
}
inline void EssenceMsgChangedEvent::set_notice_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.notice_type)
}

// string sub_type = 5;
inline void EssenceMsgChangedEvent::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& EssenceMsgChangedEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EssenceMsgChangedEvent::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.sub_type)
}
inline std::string* EssenceMsgChangedEvent::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.EssenceMsgChangedEvent.sub_type)
  return _s;
}
inline const std::string& EssenceMsgChangedEvent::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void EssenceMsgChangedEvent::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* EssenceMsgChangedEvent::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* EssenceMsgChangedEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.EssenceMsgChangedEvent.sub_type)
  return _impl_.sub_type_.Release();
}
inline void EssenceMsgChangedEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.EssenceMsgChangedEvent.sub_type)
}

// int64 group_id = 6;
inline void EssenceMsgChangedEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t EssenceMsgChangedEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t EssenceMsgChangedEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.group_id)
  return _internal_group_id();
}
inline void EssenceMsgChangedEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void EssenceMsgChangedEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.group_id)
}

// int64 sender_id = 7;
inline void EssenceMsgChangedEvent::clear_sender_id() {
  _impl_.sender_id_ = int64_t{0};
}
inline int64_t EssenceMsgChangedEvent::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int64_t EssenceMsgChangedEvent::sender_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.sender_id)
  return _internal_sender_id();
}
inline void EssenceMsgChangedEvent::_internal_set_sender_id(int64_t value) {
  
  _impl_.sender_id_ = value;
}
inline void EssenceMsgChangedEvent::set_sender_id(int64_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.sender_id)
}

// int64 operator_id = 8;
inline void EssenceMsgChangedEvent::clear_operator_id() {
  _impl_.operator_id_ = int64_t{0};
}
inline int64_t EssenceMsgChangedEvent::_internal_operator_id() const {
  return _impl_.operator_id_;
}
inline int64_t EssenceMsgChangedEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.operator_id)
  return _internal_operator_id();
}
inline void EssenceMsgChangedEvent::_internal_set_operator_id(int64_t value) {
  
  _impl_.operator_id_ = value;
}
inline void EssenceMsgChangedEvent::set_operator_id(int64_t value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.operator_id)
}

// int32 message_id = 9;
inline void EssenceMsgChangedEvent::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t EssenceMsgChangedEvent::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t EssenceMsgChangedEvent::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.EssenceMsgChangedEvent.message_id)
  return _internal_message_id();
}
inline void EssenceMsgChangedEvent::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void EssenceMsgChangedEvent::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.EssenceMsgChangedEvent.message_id)
}

// -------------------------------------------------------------------

// FriendAddRequestEvent

// int64 time = 1;
inline void FriendAddRequestEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t FriendAddRequestEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t FriendAddRequestEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.time)
  return _internal_time();
}
inline void FriendAddRequestEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void FriendAddRequestEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.time)
}

// int64 self_id = 2;
inline void FriendAddRequestEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t FriendAddRequestEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t FriendAddRequestEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.self_id)
  return _internal_self_id();
}
inline void FriendAddRequestEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void FriendAddRequestEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void FriendAddRequestEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE FriendAddRequestEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE FriendAddRequestEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.post_type)
  return _internal_post_type();
}
inline void FriendAddRequestEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void FriendAddRequestEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE request_type = 4;
inline void FriendAddRequestEvent::clear_request_type() {
  _impl_.request_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE FriendAddRequestEvent::_internal_request_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.request_type_);
}
inline ::cqhttp::CQHTTP_TYPE FriendAddRequestEvent::request_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.request_type)
  return _internal_request_type();
}
inline void FriendAddRequestEvent::_internal_set_request_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.request_type_ = value;
}
inline void FriendAddRequestEvent::set_request_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.request_type)
}

// int64 user_id = 5;
inline void FriendAddRequestEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t FriendAddRequestEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t FriendAddRequestEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.user_id)
  return _internal_user_id();
}
inline void FriendAddRequestEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void FriendAddRequestEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.user_id)
}

// string comment = 6;
inline void FriendAddRequestEvent::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& FriendAddRequestEvent::comment() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddRequestEvent::set_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.comment)
}
inline std::string* FriendAddRequestEvent::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:cqhttp.FriendAddRequestEvent.comment)
  return _s;
}
inline const std::string& FriendAddRequestEvent::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void FriendAddRequestEvent::_internal_set_comment(const std::string& value) {
  
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddRequestEvent::_internal_mutable_comment() {
  
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddRequestEvent::release_comment() {
  // @@protoc_insertion_point(field_release:cqhttp.FriendAddRequestEvent.comment)
  return _impl_.comment_.Release();
}
inline void FriendAddRequestEvent::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.FriendAddRequestEvent.comment)
}

// string flag = 7;
inline void FriendAddRequestEvent::clear_flag() {
  _impl_.flag_.ClearToEmpty();
}
inline const std::string& FriendAddRequestEvent::flag() const {
  // @@protoc_insertion_point(field_get:cqhttp.FriendAddRequestEvent.flag)
  return _internal_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddRequestEvent::set_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.FriendAddRequestEvent.flag)
}
inline std::string* FriendAddRequestEvent::mutable_flag() {
  std::string* _s = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:cqhttp.FriendAddRequestEvent.flag)
  return _s;
}
inline const std::string& FriendAddRequestEvent::_internal_flag() const {
  return _impl_.flag_.Get();
}
inline void FriendAddRequestEvent::_internal_set_flag(const std::string& value) {
  
  _impl_.flag_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddRequestEvent::_internal_mutable_flag() {
  
  return _impl_.flag_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddRequestEvent::release_flag() {
  // @@protoc_insertion_point(field_release:cqhttp.FriendAddRequestEvent.flag)
  return _impl_.flag_.Release();
}
inline void FriendAddRequestEvent::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  _impl_.flag_.SetAllocated(flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_.IsDefault()) {
    _impl_.flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.FriendAddRequestEvent.flag)
}

// -------------------------------------------------------------------

// GroupAddRequestEvent

// int64 time = 1;
inline void GroupAddRequestEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GroupAddRequestEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GroupAddRequestEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.time)
  return _internal_time();
}
inline void GroupAddRequestEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GroupAddRequestEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.time)
}

// int64 self_id = 2;
inline void GroupAddRequestEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t GroupAddRequestEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t GroupAddRequestEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.self_id)
  return _internal_self_id();
}
inline void GroupAddRequestEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void GroupAddRequestEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void GroupAddRequestEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupAddRequestEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupAddRequestEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.post_type)
  return _internal_post_type();
}
inline void GroupAddRequestEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void GroupAddRequestEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE request_type = 4;
inline void GroupAddRequestEvent::clear_request_type() {
  _impl_.request_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE GroupAddRequestEvent::_internal_request_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.request_type_);
}
inline ::cqhttp::CQHTTP_TYPE GroupAddRequestEvent::request_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.request_type)
  return _internal_request_type();
}
inline void GroupAddRequestEvent::_internal_set_request_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.request_type_ = value;
}
inline void GroupAddRequestEvent::set_request_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.request_type)
}

// string sub_type = 5;
inline void GroupAddRequestEvent::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& GroupAddRequestEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupAddRequestEvent::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.sub_type)
}
inline std::string* GroupAddRequestEvent::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupAddRequestEvent.sub_type)
  return _s;
}
inline const std::string& GroupAddRequestEvent::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void GroupAddRequestEvent::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupAddRequestEvent::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupAddRequestEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupAddRequestEvent.sub_type)
  return _impl_.sub_type_.Release();
}
inline void GroupAddRequestEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupAddRequestEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupAddRequestEvent::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GroupAddRequestEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GroupAddRequestEvent::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.group_id)
  return _internal_group_id();
}
inline void GroupAddRequestEvent::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupAddRequestEvent::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.group_id)
}

// int64 user_id = 7;
inline void GroupAddRequestEvent::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GroupAddRequestEvent::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GroupAddRequestEvent::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.user_id)
  return _internal_user_id();
}
inline void GroupAddRequestEvent::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GroupAddRequestEvent::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.user_id)
}

// string comment = 8;
inline void GroupAddRequestEvent::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& GroupAddRequestEvent::comment() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupAddRequestEvent::set_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.comment)
}
inline std::string* GroupAddRequestEvent::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupAddRequestEvent.comment)
  return _s;
}
inline const std::string& GroupAddRequestEvent::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void GroupAddRequestEvent::_internal_set_comment(const std::string& value) {
  
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupAddRequestEvent::_internal_mutable_comment() {
  
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupAddRequestEvent::release_comment() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupAddRequestEvent.comment)
  return _impl_.comment_.Release();
}
inline void GroupAddRequestEvent::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupAddRequestEvent.comment)
}

// string flag = 9;
inline void GroupAddRequestEvent::clear_flag() {
  _impl_.flag_.ClearToEmpty();
}
inline const std::string& GroupAddRequestEvent::flag() const {
  // @@protoc_insertion_point(field_get:cqhttp.GroupAddRequestEvent.flag)
  return _internal_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupAddRequestEvent::set_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GroupAddRequestEvent.flag)
}
inline std::string* GroupAddRequestEvent::mutable_flag() {
  std::string* _s = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:cqhttp.GroupAddRequestEvent.flag)
  return _s;
}
inline const std::string& GroupAddRequestEvent::_internal_flag() const {
  return _impl_.flag_.Get();
}
inline void GroupAddRequestEvent::_internal_set_flag(const std::string& value) {
  
  _impl_.flag_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupAddRequestEvent::_internal_mutable_flag() {
  
  return _impl_.flag_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupAddRequestEvent::release_flag() {
  // @@protoc_insertion_point(field_release:cqhttp.GroupAddRequestEvent.flag)
  return _impl_.flag_.Release();
}
inline void GroupAddRequestEvent::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  _impl_.flag_.SetAllocated(flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_.IsDefault()) {
    _impl_.flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GroupAddRequestEvent.flag)
}

// -------------------------------------------------------------------

// MetaEvent

// int64 time = 1;
inline void MetaEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t MetaEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t MetaEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.MetaEvent.time)
  return _internal_time();
}
inline void MetaEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void MetaEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.MetaEvent.time)
}

// int64 self_id = 2;
inline void MetaEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t MetaEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t MetaEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.MetaEvent.self_id)
  return _internal_self_id();
}
inline void MetaEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void MetaEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.MetaEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void MetaEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE MetaEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE MetaEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.MetaEvent.post_type)
  return _internal_post_type();
}
inline void MetaEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void MetaEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.MetaEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE meta_event_type = 4;
inline void MetaEvent::clear_meta_event_type() {
  _impl_.meta_event_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE MetaEvent::_internal_meta_event_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.meta_event_type_);
}
inline ::cqhttp::CQHTTP_TYPE MetaEvent::meta_event_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.MetaEvent.meta_event_type)
  return _internal_meta_event_type();
}
inline void MetaEvent::_internal_set_meta_event_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.meta_event_type_ = value;
}
inline void MetaEvent::set_meta_event_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_meta_event_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.MetaEvent.meta_event_type)
}

// .cqhttp.Status status = 5;
inline bool MetaEvent::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool MetaEvent::has_status() const {
  return _internal_has_status();
}
inline const ::cqhttp::Status& MetaEvent::_internal_status() const {
  const ::cqhttp::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Status&>(
      ::cqhttp::_Status_default_instance_);
}
inline const ::cqhttp::Status& MetaEvent::status() const {
  // @@protoc_insertion_point(field_get:cqhttp.MetaEvent.status)
  return _internal_status();
}
inline void MetaEvent::unsafe_arena_set_allocated_status(
    ::cqhttp::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.MetaEvent.status)
}
inline ::cqhttp::Status* MetaEvent::release_status() {
  
  ::cqhttp::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Status* MetaEvent::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:cqhttp.MetaEvent.status)
  
  ::cqhttp::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::cqhttp::Status* MetaEvent::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::cqhttp::Status* MetaEvent::mutable_status() {
  ::cqhttp::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:cqhttp.MetaEvent.status)
  return _msg;
}
inline void MetaEvent::set_allocated_status(::cqhttp::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.MetaEvent.status)
}

// int64 interval = 6;
inline void MetaEvent::clear_interval() {
  _impl_.interval_ = int64_t{0};
}
inline int64_t MetaEvent::_internal_interval() const {
  return _impl_.interval_;
}
inline int64_t MetaEvent::interval() const {
  // @@protoc_insertion_point(field_get:cqhttp.MetaEvent.interval)
  return _internal_interval();
}
inline void MetaEvent::_internal_set_interval(int64_t value) {
  
  _impl_.interval_ = value;
}
inline void MetaEvent::set_interval(int64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:cqhttp.MetaEvent.interval)
}

// -------------------------------------------------------------------

// LifecycleEvent

// int64 time = 1;
inline void LifecycleEvent::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t LifecycleEvent::_internal_time() const {
  return _impl_.time_;
}
inline int64_t LifecycleEvent::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.time)
  return _internal_time();
}
inline void LifecycleEvent::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void LifecycleEvent::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.LifecycleEvent.time)
}

// int64 self_id = 2;
inline void LifecycleEvent::clear_self_id() {
  _impl_.self_id_ = int64_t{0};
}
inline int64_t LifecycleEvent::_internal_self_id() const {
  return _impl_.self_id_;
}
inline int64_t LifecycleEvent::self_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.self_id)
  return _internal_self_id();
}
inline void LifecycleEvent::_internal_set_self_id(int64_t value) {
  
  _impl_.self_id_ = value;
}
inline void LifecycleEvent::set_self_id(int64_t value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.LifecycleEvent.self_id)
}

// .cqhttp.CQHTTP_TYPE post_type = 3;
inline void LifecycleEvent::clear_post_type() {
  _impl_.post_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE LifecycleEvent::_internal_post_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.post_type_);
}
inline ::cqhttp::CQHTTP_TYPE LifecycleEvent::post_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.post_type)
  return _internal_post_type();
}
inline void LifecycleEvent::_internal_set_post_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.post_type_ = value;
}
inline void LifecycleEvent::set_post_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.LifecycleEvent.post_type)
}

// .cqhttp.CQHTTP_TYPE meta_event_type = 4;
inline void LifecycleEvent::clear_meta_event_type() {
  _impl_.meta_event_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE LifecycleEvent::_internal_meta_event_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.meta_event_type_);
}
inline ::cqhttp::CQHTTP_TYPE LifecycleEvent::meta_event_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.meta_event_type)
  return _internal_meta_event_type();
}
inline void LifecycleEvent::_internal_set_meta_event_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.meta_event_type_ = value;
}
inline void LifecycleEvent::set_meta_event_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_meta_event_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.LifecycleEvent.meta_event_type)
}

// .cqhttp.Status status = 5;
inline bool LifecycleEvent::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool LifecycleEvent::has_status() const {
  return _internal_has_status();
}
inline const ::cqhttp::Status& LifecycleEvent::_internal_status() const {
  const ::cqhttp::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Status&>(
      ::cqhttp::_Status_default_instance_);
}
inline const ::cqhttp::Status& LifecycleEvent::status() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.status)
  return _internal_status();
}
inline void LifecycleEvent::unsafe_arena_set_allocated_status(
    ::cqhttp::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.LifecycleEvent.status)
}
inline ::cqhttp::Status* LifecycleEvent::release_status() {
  
  ::cqhttp::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Status* LifecycleEvent::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:cqhttp.LifecycleEvent.status)
  
  ::cqhttp::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::cqhttp::Status* LifecycleEvent::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::cqhttp::Status* LifecycleEvent::mutable_status() {
  ::cqhttp::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:cqhttp.LifecycleEvent.status)
  return _msg;
}
inline void LifecycleEvent::set_allocated_status(::cqhttp::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.LifecycleEvent.status)
}

// int64 interval = 6;
inline void LifecycleEvent::clear_interval() {
  _impl_.interval_ = int64_t{0};
}
inline int64_t LifecycleEvent::_internal_interval() const {
  return _impl_.interval_;
}
inline int64_t LifecycleEvent::interval() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.interval)
  return _internal_interval();
}
inline void LifecycleEvent::_internal_set_interval(int64_t value) {
  
  _impl_.interval_ = value;
}
inline void LifecycleEvent::set_interval(int64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:cqhttp.LifecycleEvent.interval)
}

// .cqhttp.CQHTTP_TYPE sub_type = 7;
inline void LifecycleEvent::clear_sub_type() {
  _impl_.sub_type_ = 0;
}
inline ::cqhttp::CQHTTP_TYPE LifecycleEvent::_internal_sub_type() const {
  return static_cast< ::cqhttp::CQHTTP_TYPE >(_impl_.sub_type_);
}
inline ::cqhttp::CQHTTP_TYPE LifecycleEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.LifecycleEvent.sub_type)
  return _internal_sub_type();
}
inline void LifecycleEvent::_internal_set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  
  _impl_.sub_type_ = value;
}
inline void LifecycleEvent::set_sub_type(::cqhttp::CQHTTP_TYPE value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:cqhttp.LifecycleEvent.sub_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cqhttp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fevent_2eproto
