// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cqhttp_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cqhttp_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cqhttp_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cqhttp_5fapi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cqhttp_5fapi_2eproto;
namespace cqhttp {
class CanSendImage;
struct CanSendImageDefaultTypeInternal;
extern CanSendImageDefaultTypeInternal _CanSendImage_default_instance_;
class CanSendImageResp;
struct CanSendImageRespDefaultTypeInternal;
extern CanSendImageRespDefaultTypeInternal _CanSendImageResp_default_instance_;
class CanSendRecord;
struct CanSendRecordDefaultTypeInternal;
extern CanSendRecordDefaultTypeInternal _CanSendRecord_default_instance_;
class CanSendRecordResp;
struct CanSendRecordRespDefaultTypeInternal;
extern CanSendRecordRespDefaultTypeInternal _CanSendRecordResp_default_instance_;
class CheckUlrSafely;
struct CheckUlrSafelyDefaultTypeInternal;
extern CheckUlrSafelyDefaultTypeInternal _CheckUlrSafely_default_instance_;
class CheckUlrSafelyResp;
struct CheckUlrSafelyRespDefaultTypeInternal;
extern CheckUlrSafelyRespDefaultTypeInternal _CheckUlrSafelyResp_default_instance_;
class CheckUlrSafely_Params;
struct CheckUlrSafely_ParamsDefaultTypeInternal;
extern CheckUlrSafely_ParamsDefaultTypeInternal _CheckUlrSafely_Params_default_instance_;
class CleanCache;
struct CleanCacheDefaultTypeInternal;
extern CleanCacheDefaultTypeInternal _CleanCache_default_instance_;
class CreateGroupFileFolder;
struct CreateGroupFileFolderDefaultTypeInternal;
extern CreateGroupFileFolderDefaultTypeInternal _CreateGroupFileFolder_default_instance_;
class CreateGroupFileFolder_Params;
struct CreateGroupFileFolder_ParamsDefaultTypeInternal;
extern CreateGroupFileFolder_ParamsDefaultTypeInternal _CreateGroupFileFolder_Params_default_instance_;
class DeleteEssenceMsg;
struct DeleteEssenceMsgDefaultTypeInternal;
extern DeleteEssenceMsgDefaultTypeInternal _DeleteEssenceMsg_default_instance_;
class DeleteEssenceMsg_Params;
struct DeleteEssenceMsg_ParamsDefaultTypeInternal;
extern DeleteEssenceMsg_ParamsDefaultTypeInternal _DeleteEssenceMsg_Params_default_instance_;
class DeleteFriend;
struct DeleteFriendDefaultTypeInternal;
extern DeleteFriendDefaultTypeInternal _DeleteFriend_default_instance_;
class DeleteFriend_Params;
struct DeleteFriend_ParamsDefaultTypeInternal;
extern DeleteFriend_ParamsDefaultTypeInternal _DeleteFriend_Params_default_instance_;
class DeleteGroupFile;
struct DeleteGroupFileDefaultTypeInternal;
extern DeleteGroupFileDefaultTypeInternal _DeleteGroupFile_default_instance_;
class DeleteGroupFile_Params;
struct DeleteGroupFile_ParamsDefaultTypeInternal;
extern DeleteGroupFile_ParamsDefaultTypeInternal _DeleteGroupFile_Params_default_instance_;
class DeleteGroupFolder;
struct DeleteGroupFolderDefaultTypeInternal;
extern DeleteGroupFolderDefaultTypeInternal _DeleteGroupFolder_default_instance_;
class DeleteGroupFolder_Params;
struct DeleteGroupFolder_ParamsDefaultTypeInternal;
extern DeleteGroupFolder_ParamsDefaultTypeInternal _DeleteGroupFolder_Params_default_instance_;
class DeleteMsg;
struct DeleteMsgDefaultTypeInternal;
extern DeleteMsgDefaultTypeInternal _DeleteMsg_default_instance_;
class DeleteMsg_Params;
struct DeleteMsg_ParamsDefaultTypeInternal;
extern DeleteMsg_ParamsDefaultTypeInternal _DeleteMsg_Params_default_instance_;
class DeleteUnidirectionalFriend;
struct DeleteUnidirectionalFriendDefaultTypeInternal;
extern DeleteUnidirectionalFriendDefaultTypeInternal _DeleteUnidirectionalFriend_default_instance_;
class DeleteUnidirectionalFriend_Params;
struct DeleteUnidirectionalFriend_ParamsDefaultTypeInternal;
extern DeleteUnidirectionalFriend_ParamsDefaultTypeInternal _DeleteUnidirectionalFriend_Params_default_instance_;
class DownloadFile;
struct DownloadFileDefaultTypeInternal;
extern DownloadFileDefaultTypeInternal _DownloadFile_default_instance_;
class DownloadFileResp;
struct DownloadFileRespDefaultTypeInternal;
extern DownloadFileRespDefaultTypeInternal _DownloadFileResp_default_instance_;
class DownloadFile_Params;
struct DownloadFile_ParamsDefaultTypeInternal;
extern DownloadFile_ParamsDefaultTypeInternal _DownloadFile_Params_default_instance_;
class GetCoolies;
struct GetCooliesDefaultTypeInternal;
extern GetCooliesDefaultTypeInternal _GetCoolies_default_instance_;
class GetCooliesResp;
struct GetCooliesRespDefaultTypeInternal;
extern GetCooliesRespDefaultTypeInternal _GetCooliesResp_default_instance_;
class GetCoolies_Params;
struct GetCoolies_ParamsDefaultTypeInternal;
extern GetCoolies_ParamsDefaultTypeInternal _GetCoolies_Params_default_instance_;
class GetCredentials;
struct GetCredentialsDefaultTypeInternal;
extern GetCredentialsDefaultTypeInternal _GetCredentials_default_instance_;
class GetCredentialsResp;
struct GetCredentialsRespDefaultTypeInternal;
extern GetCredentialsRespDefaultTypeInternal _GetCredentialsResp_default_instance_;
class GetCredentials_Params;
struct GetCredentials_ParamsDefaultTypeInternal;
extern GetCredentials_ParamsDefaultTypeInternal _GetCredentials_Params_default_instance_;
class GetCsrfToken;
struct GetCsrfTokenDefaultTypeInternal;
extern GetCsrfTokenDefaultTypeInternal _GetCsrfToken_default_instance_;
class GetCsrfTokenResp;
struct GetCsrfTokenRespDefaultTypeInternal;
extern GetCsrfTokenRespDefaultTypeInternal _GetCsrfTokenResp_default_instance_;
class GetEssenceMsgList;
struct GetEssenceMsgListDefaultTypeInternal;
extern GetEssenceMsgListDefaultTypeInternal _GetEssenceMsgList_default_instance_;
class GetEssenceMsgListResp;
struct GetEssenceMsgListRespDefaultTypeInternal;
extern GetEssenceMsgListRespDefaultTypeInternal _GetEssenceMsgListResp_default_instance_;
class GetEssenceMsgList_Params;
struct GetEssenceMsgList_ParamsDefaultTypeInternal;
extern GetEssenceMsgList_ParamsDefaultTypeInternal _GetEssenceMsgList_Params_default_instance_;
class GetForwardMsg;
struct GetForwardMsgDefaultTypeInternal;
extern GetForwardMsgDefaultTypeInternal _GetForwardMsg_default_instance_;
class GetForwardMsgResp;
struct GetForwardMsgRespDefaultTypeInternal;
extern GetForwardMsgRespDefaultTypeInternal _GetForwardMsgResp_default_instance_;
class GetForwardMsgResp_Messages;
struct GetForwardMsgResp_MessagesDefaultTypeInternal;
extern GetForwardMsgResp_MessagesDefaultTypeInternal _GetForwardMsgResp_Messages_default_instance_;
class GetForwardMsg_Params;
struct GetForwardMsg_ParamsDefaultTypeInternal;
extern GetForwardMsg_ParamsDefaultTypeInternal _GetForwardMsg_Params_default_instance_;
class GetFriendList;
struct GetFriendListDefaultTypeInternal;
extern GetFriendListDefaultTypeInternal _GetFriendList_default_instance_;
class GetFriendListResp;
struct GetFriendListRespDefaultTypeInternal;
extern GetFriendListRespDefaultTypeInternal _GetFriendListResp_default_instance_;
class GetFriendListResp_Friend;
struct GetFriendListResp_FriendDefaultTypeInternal;
extern GetFriendListResp_FriendDefaultTypeInternal _GetFriendListResp_Friend_default_instance_;
class GetGroupAtAllRemain;
struct GetGroupAtAllRemainDefaultTypeInternal;
extern GetGroupAtAllRemainDefaultTypeInternal _GetGroupAtAllRemain_default_instance_;
class GetGroupAtAllRemainResp;
struct GetGroupAtAllRemainRespDefaultTypeInternal;
extern GetGroupAtAllRemainRespDefaultTypeInternal _GetGroupAtAllRemainResp_default_instance_;
class GetGroupAtAllRemain_Params;
struct GetGroupAtAllRemain_ParamsDefaultTypeInternal;
extern GetGroupAtAllRemain_ParamsDefaultTypeInternal _GetGroupAtAllRemain_Params_default_instance_;
class GetGroupFileSystemInfo;
struct GetGroupFileSystemInfoDefaultTypeInternal;
extern GetGroupFileSystemInfoDefaultTypeInternal _GetGroupFileSystemInfo_default_instance_;
class GetGroupFileSystemInfoResp;
struct GetGroupFileSystemInfoRespDefaultTypeInternal;
extern GetGroupFileSystemInfoRespDefaultTypeInternal _GetGroupFileSystemInfoResp_default_instance_;
class GetGroupFileSystemInfo_Params;
struct GetGroupFileSystemInfo_ParamsDefaultTypeInternal;
extern GetGroupFileSystemInfo_ParamsDefaultTypeInternal _GetGroupFileSystemInfo_Params_default_instance_;
class GetGroupFileUrl;
struct GetGroupFileUrlDefaultTypeInternal;
extern GetGroupFileUrlDefaultTypeInternal _GetGroupFileUrl_default_instance_;
class GetGroupFileUrlResp;
struct GetGroupFileUrlRespDefaultTypeInternal;
extern GetGroupFileUrlRespDefaultTypeInternal _GetGroupFileUrlResp_default_instance_;
class GetGroupFileUrl_Params;
struct GetGroupFileUrl_ParamsDefaultTypeInternal;
extern GetGroupFileUrl_ParamsDefaultTypeInternal _GetGroupFileUrl_Params_default_instance_;
class GetGroupHonorInfo;
struct GetGroupHonorInfoDefaultTypeInternal;
extern GetGroupHonorInfoDefaultTypeInternal _GetGroupHonorInfo_default_instance_;
class GetGroupHonorInfoResp;
struct GetGroupHonorInfoRespDefaultTypeInternal;
extern GetGroupHonorInfoRespDefaultTypeInternal _GetGroupHonorInfoResp_default_instance_;
class GetGroupHonorInfoResp_Talkative;
struct GetGroupHonorInfoResp_TalkativeDefaultTypeInternal;
extern GetGroupHonorInfoResp_TalkativeDefaultTypeInternal _GetGroupHonorInfoResp_Talkative_default_instance_;
class GetGroupHonorInfo_Params;
struct GetGroupHonorInfo_ParamsDefaultTypeInternal;
extern GetGroupHonorInfo_ParamsDefaultTypeInternal _GetGroupHonorInfo_Params_default_instance_;
class GetGroupInfo;
struct GetGroupInfoDefaultTypeInternal;
extern GetGroupInfoDefaultTypeInternal _GetGroupInfo_default_instance_;
class GetGroupInfoResp;
struct GetGroupInfoRespDefaultTypeInternal;
extern GetGroupInfoRespDefaultTypeInternal _GetGroupInfoResp_default_instance_;
class GetGroupInfo_Params;
struct GetGroupInfo_ParamsDefaultTypeInternal;
extern GetGroupInfo_ParamsDefaultTypeInternal _GetGroupInfo_Params_default_instance_;
class GetGroupList;
struct GetGroupListDefaultTypeInternal;
extern GetGroupListDefaultTypeInternal _GetGroupList_default_instance_;
class GetGroupListResp;
struct GetGroupListRespDefaultTypeInternal;
extern GetGroupListRespDefaultTypeInternal _GetGroupListResp_default_instance_;
class GetGroupList_Params;
struct GetGroupList_ParamsDefaultTypeInternal;
extern GetGroupList_ParamsDefaultTypeInternal _GetGroupList_Params_default_instance_;
class GetGroupMemberInfo;
struct GetGroupMemberInfoDefaultTypeInternal;
extern GetGroupMemberInfoDefaultTypeInternal _GetGroupMemberInfo_default_instance_;
class GetGroupMemberInfoResp;
struct GetGroupMemberInfoRespDefaultTypeInternal;
extern GetGroupMemberInfoRespDefaultTypeInternal _GetGroupMemberInfoResp_default_instance_;
class GetGroupMemberInfo_Params;
struct GetGroupMemberInfo_ParamsDefaultTypeInternal;
extern GetGroupMemberInfo_ParamsDefaultTypeInternal _GetGroupMemberInfo_Params_default_instance_;
class GetGroupMemberList;
struct GetGroupMemberListDefaultTypeInternal;
extern GetGroupMemberListDefaultTypeInternal _GetGroupMemberList_default_instance_;
class GetGroupMemberListResp;
struct GetGroupMemberListRespDefaultTypeInternal;
extern GetGroupMemberListRespDefaultTypeInternal _GetGroupMemberListResp_default_instance_;
class GetGroupMemberList_Params;
struct GetGroupMemberList_ParamsDefaultTypeInternal;
extern GetGroupMemberList_ParamsDefaultTypeInternal _GetGroupMemberList_Params_default_instance_;
class GetGroupMsgHistory;
struct GetGroupMsgHistoryDefaultTypeInternal;
extern GetGroupMsgHistoryDefaultTypeInternal _GetGroupMsgHistory_default_instance_;
class GetGroupMsgHistoryResp;
struct GetGroupMsgHistoryRespDefaultTypeInternal;
extern GetGroupMsgHistoryRespDefaultTypeInternal _GetGroupMsgHistoryResp_default_instance_;
class GetGroupMsgHistory_Params;
struct GetGroupMsgHistory_ParamsDefaultTypeInternal;
extern GetGroupMsgHistory_ParamsDefaultTypeInternal _GetGroupMsgHistory_Params_default_instance_;
class GetGroupNotice;
struct GetGroupNoticeDefaultTypeInternal;
extern GetGroupNoticeDefaultTypeInternal _GetGroupNotice_default_instance_;
class GetGroupNoticeResp;
struct GetGroupNoticeRespDefaultTypeInternal;
extern GetGroupNoticeRespDefaultTypeInternal _GetGroupNoticeResp_default_instance_;
class GetGroupNoticeResp_Notice;
struct GetGroupNoticeResp_NoticeDefaultTypeInternal;
extern GetGroupNoticeResp_NoticeDefaultTypeInternal _GetGroupNoticeResp_Notice_default_instance_;
class GetGroupNoticeResp_Notice_NoticeMessage;
struct GetGroupNoticeResp_Notice_NoticeMessageDefaultTypeInternal;
extern GetGroupNoticeResp_Notice_NoticeMessageDefaultTypeInternal _GetGroupNoticeResp_Notice_NoticeMessage_default_instance_;
class GetGroupNoticeResp_Notice_NoticeMessage_Image;
struct GetGroupNoticeResp_Notice_NoticeMessage_ImageDefaultTypeInternal;
extern GetGroupNoticeResp_Notice_NoticeMessage_ImageDefaultTypeInternal _GetGroupNoticeResp_Notice_NoticeMessage_Image_default_instance_;
class GetGroupNotice_Params;
struct GetGroupNotice_ParamsDefaultTypeInternal;
extern GetGroupNotice_ParamsDefaultTypeInternal _GetGroupNotice_Params_default_instance_;
class GetGroupRootFiles;
struct GetGroupRootFilesDefaultTypeInternal;
extern GetGroupRootFilesDefaultTypeInternal _GetGroupRootFiles_default_instance_;
class GetGroupRootFilesResp;
struct GetGroupRootFilesRespDefaultTypeInternal;
extern GetGroupRootFilesRespDefaultTypeInternal _GetGroupRootFilesResp_default_instance_;
class GetGroupRootFiles_Params;
struct GetGroupRootFiles_ParamsDefaultTypeInternal;
extern GetGroupRootFiles_ParamsDefaultTypeInternal _GetGroupRootFiles_Params_default_instance_;
class GetGroupSystemMsg;
struct GetGroupSystemMsgDefaultTypeInternal;
extern GetGroupSystemMsgDefaultTypeInternal _GetGroupSystemMsg_default_instance_;
class GetGroupSystemMsgResp;
struct GetGroupSystemMsgRespDefaultTypeInternal;
extern GetGroupSystemMsgRespDefaultTypeInternal _GetGroupSystemMsgResp_default_instance_;
class GetGroupSystemMsgResp_InvitedRequest;
struct GetGroupSystemMsgResp_InvitedRequestDefaultTypeInternal;
extern GetGroupSystemMsgResp_InvitedRequestDefaultTypeInternal _GetGroupSystemMsgResp_InvitedRequest_default_instance_;
class GetGroupSystemMsgResp_JoinRequest;
struct GetGroupSystemMsgResp_JoinRequestDefaultTypeInternal;
extern GetGroupSystemMsgResp_JoinRequestDefaultTypeInternal _GetGroupSystemMsgResp_JoinRequest_default_instance_;
class GetImage;
struct GetImageDefaultTypeInternal;
extern GetImageDefaultTypeInternal _GetImage_default_instance_;
class GetImageResp;
struct GetImageRespDefaultTypeInternal;
extern GetImageRespDefaultTypeInternal _GetImageResp_default_instance_;
class GetImage_Params;
struct GetImage_ParamsDefaultTypeInternal;
extern GetImage_ParamsDefaultTypeInternal _GetImage_Params_default_instance_;
class GetLoginInfo;
struct GetLoginInfoDefaultTypeInternal;
extern GetLoginInfoDefaultTypeInternal _GetLoginInfo_default_instance_;
class GetLoginInfoResp;
struct GetLoginInfoRespDefaultTypeInternal;
extern GetLoginInfoRespDefaultTypeInternal _GetLoginInfoResp_default_instance_;
class GetLoginInfo_Params;
struct GetLoginInfo_ParamsDefaultTypeInternal;
extern GetLoginInfo_ParamsDefaultTypeInternal _GetLoginInfo_Params_default_instance_;
class GetModelShow;
struct GetModelShowDefaultTypeInternal;
extern GetModelShowDefaultTypeInternal _GetModelShow_default_instance_;
class GetModelShowResp;
struct GetModelShowRespDefaultTypeInternal;
extern GetModelShowRespDefaultTypeInternal _GetModelShowResp_default_instance_;
class GetModelShowResp_Variant;
struct GetModelShowResp_VariantDefaultTypeInternal;
extern GetModelShowResp_VariantDefaultTypeInternal _GetModelShowResp_Variant_default_instance_;
class GetModelShow_Params;
struct GetModelShow_ParamsDefaultTypeInternal;
extern GetModelShow_ParamsDefaultTypeInternal _GetModelShow_Params_default_instance_;
class GetOnlineClients;
struct GetOnlineClientsDefaultTypeInternal;
extern GetOnlineClientsDefaultTypeInternal _GetOnlineClients_default_instance_;
class GetOnlineClientsResp;
struct GetOnlineClientsRespDefaultTypeInternal;
extern GetOnlineClientsRespDefaultTypeInternal _GetOnlineClientsResp_default_instance_;
class GetOnlineClients_Params;
struct GetOnlineClients_ParamsDefaultTypeInternal;
extern GetOnlineClients_ParamsDefaultTypeInternal _GetOnlineClients_Params_default_instance_;
class GetRecord;
struct GetRecordDefaultTypeInternal;
extern GetRecordDefaultTypeInternal _GetRecord_default_instance_;
class GetRecordResp;
struct GetRecordRespDefaultTypeInternal;
extern GetRecordRespDefaultTypeInternal _GetRecordResp_default_instance_;
class GetRecord_Params;
struct GetRecord_ParamsDefaultTypeInternal;
extern GetRecord_ParamsDefaultTypeInternal _GetRecord_Params_default_instance_;
class GetStatus;
struct GetStatusDefaultTypeInternal;
extern GetStatusDefaultTypeInternal _GetStatus_default_instance_;
class GetStatusResp;
struct GetStatusRespDefaultTypeInternal;
extern GetStatusRespDefaultTypeInternal _GetStatusResp_default_instance_;
class GetStatusResp_Statistics;
struct GetStatusResp_StatisticsDefaultTypeInternal;
extern GetStatusResp_StatisticsDefaultTypeInternal _GetStatusResp_Statistics_default_instance_;
class GetStrangerInfo;
struct GetStrangerInfoDefaultTypeInternal;
extern GetStrangerInfoDefaultTypeInternal _GetStrangerInfo_default_instance_;
class GetStrangerInfoResp;
struct GetStrangerInfoRespDefaultTypeInternal;
extern GetStrangerInfoRespDefaultTypeInternal _GetStrangerInfoResp_default_instance_;
class GetStrangerInfo_Params;
struct GetStrangerInfo_ParamsDefaultTypeInternal;
extern GetStrangerInfo_ParamsDefaultTypeInternal _GetStrangerInfo_Params_default_instance_;
class GetVersionInfo;
struct GetVersionInfoDefaultTypeInternal;
extern GetVersionInfoDefaultTypeInternal _GetVersionInfo_default_instance_;
class GetVersionInfoResp;
struct GetVersionInfoRespDefaultTypeInternal;
extern GetVersionInfoRespDefaultTypeInternal _GetVersionInfoResp_default_instance_;
class GetWordSlices;
struct GetWordSlicesDefaultTypeInternal;
extern GetWordSlicesDefaultTypeInternal _GetWordSlices_default_instance_;
class GetWordSlicesResp;
struct GetWordSlicesRespDefaultTypeInternal;
extern GetWordSlicesRespDefaultTypeInternal _GetWordSlicesResp_default_instance_;
class GetWordSlices_Params;
struct GetWordSlices_ParamsDefaultTypeInternal;
extern GetWordSlices_ParamsDefaultTypeInternal _GetWordSlices_Params_default_instance_;
class HandleQuickOperation;
struct HandleQuickOperationDefaultTypeInternal;
extern HandleQuickOperationDefaultTypeInternal _HandleQuickOperation_default_instance_;
class HandleQuickOperation_Params;
struct HandleQuickOperation_ParamsDefaultTypeInternal;
extern HandleQuickOperation_ParamsDefaultTypeInternal _HandleQuickOperation_Params_default_instance_;
class MarkMsgAsRead;
struct MarkMsgAsReadDefaultTypeInternal;
extern MarkMsgAsReadDefaultTypeInternal _MarkMsgAsRead_default_instance_;
class MarkMsgAsRead_Params;
struct MarkMsgAsRead_ParamsDefaultTypeInternal;
extern MarkMsgAsRead_ParamsDefaultTypeInternal _MarkMsgAsRead_Params_default_instance_;
class OcrImage;
struct OcrImageDefaultTypeInternal;
extern OcrImageDefaultTypeInternal _OcrImage_default_instance_;
class OcrImageResp;
struct OcrImageRespDefaultTypeInternal;
extern OcrImageRespDefaultTypeInternal _OcrImageResp_default_instance_;
class OcrImageResp_TextDetection;
struct OcrImageResp_TextDetectionDefaultTypeInternal;
extern OcrImageResp_TextDetectionDefaultTypeInternal _OcrImageResp_TextDetection_default_instance_;
class OcrImage_Params;
struct OcrImage_ParamsDefaultTypeInternal;
extern OcrImage_ParamsDefaultTypeInternal _OcrImage_Params_default_instance_;
class QiDianGetAccountInfo;
struct QiDianGetAccountInfoDefaultTypeInternal;
extern QiDianGetAccountInfoDefaultTypeInternal _QiDianGetAccountInfo_default_instance_;
class QiDianGetAccountInfoResp;
struct QiDianGetAccountInfoRespDefaultTypeInternal;
extern QiDianGetAccountInfoRespDefaultTypeInternal _QiDianGetAccountInfoResp_default_instance_;
class ReloadEventFilter;
struct ReloadEventFilterDefaultTypeInternal;
extern ReloadEventFilterDefaultTypeInternal _ReloadEventFilter_default_instance_;
class ReloadEventFilter_Params;
struct ReloadEventFilter_ParamsDefaultTypeInternal;
extern ReloadEventFilter_ParamsDefaultTypeInternal _ReloadEventFilter_Params_default_instance_;
class SendGroupForwardMsg;
struct SendGroupForwardMsgDefaultTypeInternal;
extern SendGroupForwardMsgDefaultTypeInternal _SendGroupForwardMsg_default_instance_;
class SendGroupForwardMsgResp;
struct SendGroupForwardMsgRespDefaultTypeInternal;
extern SendGroupForwardMsgRespDefaultTypeInternal _SendGroupForwardMsgResp_default_instance_;
class SendGroupForwardMsg_Params;
struct SendGroupForwardMsg_ParamsDefaultTypeInternal;
extern SendGroupForwardMsg_ParamsDefaultTypeInternal _SendGroupForwardMsg_Params_default_instance_;
class SendGroupMsg;
struct SendGroupMsgDefaultTypeInternal;
extern SendGroupMsgDefaultTypeInternal _SendGroupMsg_default_instance_;
class SendGroupMsgResp;
struct SendGroupMsgRespDefaultTypeInternal;
extern SendGroupMsgRespDefaultTypeInternal _SendGroupMsgResp_default_instance_;
class SendGroupMsg_Params;
struct SendGroupMsg_ParamsDefaultTypeInternal;
extern SendGroupMsg_ParamsDefaultTypeInternal _SendGroupMsg_Params_default_instance_;
class SendGroupNotice;
struct SendGroupNoticeDefaultTypeInternal;
extern SendGroupNoticeDefaultTypeInternal _SendGroupNotice_default_instance_;
class SendGroupNotice_Params;
struct SendGroupNotice_ParamsDefaultTypeInternal;
extern SendGroupNotice_ParamsDefaultTypeInternal _SendGroupNotice_Params_default_instance_;
class SendGroupSign;
struct SendGroupSignDefaultTypeInternal;
extern SendGroupSignDefaultTypeInternal _SendGroupSign_default_instance_;
class SendGroupSign_Params;
struct SendGroupSign_ParamsDefaultTypeInternal;
extern SendGroupSign_ParamsDefaultTypeInternal _SendGroupSign_Params_default_instance_;
class SendMessage;
struct SendMessageDefaultTypeInternal;
extern SendMessageDefaultTypeInternal _SendMessage_default_instance_;
class SendMessageResp;
struct SendMessageRespDefaultTypeInternal;
extern SendMessageRespDefaultTypeInternal _SendMessageResp_default_instance_;
class SendMessage_Params;
struct SendMessage_ParamsDefaultTypeInternal;
extern SendMessage_ParamsDefaultTypeInternal _SendMessage_Params_default_instance_;
class SendPrivateForwardMsg;
struct SendPrivateForwardMsgDefaultTypeInternal;
extern SendPrivateForwardMsgDefaultTypeInternal _SendPrivateForwardMsg_default_instance_;
class SendPrivateForwardMsgResp;
struct SendPrivateForwardMsgRespDefaultTypeInternal;
extern SendPrivateForwardMsgRespDefaultTypeInternal _SendPrivateForwardMsgResp_default_instance_;
class SendPrivateForwardMsg_Params;
struct SendPrivateForwardMsg_ParamsDefaultTypeInternal;
extern SendPrivateForwardMsg_ParamsDefaultTypeInternal _SendPrivateForwardMsg_Params_default_instance_;
class SendPrivateMsg;
struct SendPrivateMsgDefaultTypeInternal;
extern SendPrivateMsgDefaultTypeInternal _SendPrivateMsg_default_instance_;
class SendPrivateMsgResp;
struct SendPrivateMsgRespDefaultTypeInternal;
extern SendPrivateMsgRespDefaultTypeInternal _SendPrivateMsgResp_default_instance_;
class SendPrivateMsg_Params;
struct SendPrivateMsg_ParamsDefaultTypeInternal;
extern SendPrivateMsg_ParamsDefaultTypeInternal _SendPrivateMsg_Params_default_instance_;
class SetEssenceMsg;
struct SetEssenceMsgDefaultTypeInternal;
extern SetEssenceMsgDefaultTypeInternal _SetEssenceMsg_default_instance_;
class SetEssenceMsg_Params;
struct SetEssenceMsg_ParamsDefaultTypeInternal;
extern SetEssenceMsg_ParamsDefaultTypeInternal _SetEssenceMsg_Params_default_instance_;
class SetFriendAddRequest;
struct SetFriendAddRequestDefaultTypeInternal;
extern SetFriendAddRequestDefaultTypeInternal _SetFriendAddRequest_default_instance_;
class SetFriendAddRequest_Params;
struct SetFriendAddRequest_ParamsDefaultTypeInternal;
extern SetFriendAddRequest_ParamsDefaultTypeInternal _SetFriendAddRequest_Params_default_instance_;
class SetGroupAddRequest;
struct SetGroupAddRequestDefaultTypeInternal;
extern SetGroupAddRequestDefaultTypeInternal _SetGroupAddRequest_default_instance_;
class SetGroupAddRequest_Params;
struct SetGroupAddRequest_ParamsDefaultTypeInternal;
extern SetGroupAddRequest_ParamsDefaultTypeInternal _SetGroupAddRequest_Params_default_instance_;
class SetGroupAdmin;
struct SetGroupAdminDefaultTypeInternal;
extern SetGroupAdminDefaultTypeInternal _SetGroupAdmin_default_instance_;
class SetGroupAdmin_Params;
struct SetGroupAdmin_ParamsDefaultTypeInternal;
extern SetGroupAdmin_ParamsDefaultTypeInternal _SetGroupAdmin_Params_default_instance_;
class SetGroupAnonymous;
struct SetGroupAnonymousDefaultTypeInternal;
extern SetGroupAnonymousDefaultTypeInternal _SetGroupAnonymous_default_instance_;
class SetGroupAnonymousBan;
struct SetGroupAnonymousBanDefaultTypeInternal;
extern SetGroupAnonymousBanDefaultTypeInternal _SetGroupAnonymousBan_default_instance_;
class SetGroupAnonymousBan_Params;
struct SetGroupAnonymousBan_ParamsDefaultTypeInternal;
extern SetGroupAnonymousBan_ParamsDefaultTypeInternal _SetGroupAnonymousBan_Params_default_instance_;
class SetGroupAnonymous_Params;
struct SetGroupAnonymous_ParamsDefaultTypeInternal;
extern SetGroupAnonymous_ParamsDefaultTypeInternal _SetGroupAnonymous_Params_default_instance_;
class SetGroupBan;
struct SetGroupBanDefaultTypeInternal;
extern SetGroupBanDefaultTypeInternal _SetGroupBan_default_instance_;
class SetGroupBan_Params;
struct SetGroupBan_ParamsDefaultTypeInternal;
extern SetGroupBan_ParamsDefaultTypeInternal _SetGroupBan_Params_default_instance_;
class SetGroupCard;
struct SetGroupCardDefaultTypeInternal;
extern SetGroupCardDefaultTypeInternal _SetGroupCard_default_instance_;
class SetGroupCard_Params;
struct SetGroupCard_ParamsDefaultTypeInternal;
extern SetGroupCard_ParamsDefaultTypeInternal _SetGroupCard_Params_default_instance_;
class SetGroupKick;
struct SetGroupKickDefaultTypeInternal;
extern SetGroupKickDefaultTypeInternal _SetGroupKick_default_instance_;
class SetGroupKick_Params;
struct SetGroupKick_ParamsDefaultTypeInternal;
extern SetGroupKick_ParamsDefaultTypeInternal _SetGroupKick_Params_default_instance_;
class SetGroupLeave;
struct SetGroupLeaveDefaultTypeInternal;
extern SetGroupLeaveDefaultTypeInternal _SetGroupLeave_default_instance_;
class SetGroupLeave_Params;
struct SetGroupLeave_ParamsDefaultTypeInternal;
extern SetGroupLeave_ParamsDefaultTypeInternal _SetGroupLeave_Params_default_instance_;
class SetGroupName;
struct SetGroupNameDefaultTypeInternal;
extern SetGroupNameDefaultTypeInternal _SetGroupName_default_instance_;
class SetGroupName_Params;
struct SetGroupName_ParamsDefaultTypeInternal;
extern SetGroupName_ParamsDefaultTypeInternal _SetGroupName_Params_default_instance_;
class SetGroupPortrait;
struct SetGroupPortraitDefaultTypeInternal;
extern SetGroupPortraitDefaultTypeInternal _SetGroupPortrait_default_instance_;
class SetGroupPortrait_Params;
struct SetGroupPortrait_ParamsDefaultTypeInternal;
extern SetGroupPortrait_ParamsDefaultTypeInternal _SetGroupPortrait_Params_default_instance_;
class SetGroupSpecialTitle;
struct SetGroupSpecialTitleDefaultTypeInternal;
extern SetGroupSpecialTitleDefaultTypeInternal _SetGroupSpecialTitle_default_instance_;
class SetGroupSpecialTitle_Params;
struct SetGroupSpecialTitle_ParamsDefaultTypeInternal;
extern SetGroupSpecialTitle_ParamsDefaultTypeInternal _SetGroupSpecialTitle_Params_default_instance_;
class SetGroupWholeBan;
struct SetGroupWholeBanDefaultTypeInternal;
extern SetGroupWholeBanDefaultTypeInternal _SetGroupWholeBan_default_instance_;
class SetGroupWholeBan_Params;
struct SetGroupWholeBan_ParamsDefaultTypeInternal;
extern SetGroupWholeBan_ParamsDefaultTypeInternal _SetGroupWholeBan_Params_default_instance_;
class SetModelShow;
struct SetModelShowDefaultTypeInternal;
extern SetModelShowDefaultTypeInternal _SetModelShow_default_instance_;
class SetModelShow_Params;
struct SetModelShow_ParamsDefaultTypeInternal;
extern SetModelShow_ParamsDefaultTypeInternal _SetModelShow_Params_default_instance_;
class SetQQProfile;
struct SetQQProfileDefaultTypeInternal;
extern SetQQProfileDefaultTypeInternal _SetQQProfile_default_instance_;
class SetQQProfile_Params;
struct SetQQProfile_ParamsDefaultTypeInternal;
extern SetQQProfile_ParamsDefaultTypeInternal _SetQQProfile_Params_default_instance_;
class SetRestart;
struct SetRestartDefaultTypeInternal;
extern SetRestartDefaultTypeInternal _SetRestart_default_instance_;
class SetRestart_Params;
struct SetRestart_ParamsDefaultTypeInternal;
extern SetRestart_ParamsDefaultTypeInternal _SetRestart_Params_default_instance_;
class UnidirectionalFriendList;
struct UnidirectionalFriendListDefaultTypeInternal;
extern UnidirectionalFriendListDefaultTypeInternal _UnidirectionalFriendList_default_instance_;
class UnidirectionalFriendListResp;
struct UnidirectionalFriendListRespDefaultTypeInternal;
extern UnidirectionalFriendListRespDefaultTypeInternal _UnidirectionalFriendListResp_default_instance_;
class UnidirectionalFriendListResp_Friend;
struct UnidirectionalFriendListResp_FriendDefaultTypeInternal;
extern UnidirectionalFriendListResp_FriendDefaultTypeInternal _UnidirectionalFriendListResp_Friend_default_instance_;
class UploadGroupFile;
struct UploadGroupFileDefaultTypeInternal;
extern UploadGroupFileDefaultTypeInternal _UploadGroupFile_default_instance_;
class UploadGroupFile_Params;
struct UploadGroupFile_ParamsDefaultTypeInternal;
extern UploadGroupFile_ParamsDefaultTypeInternal _UploadGroupFile_Params_default_instance_;
class UploadPrivateFile;
struct UploadPrivateFileDefaultTypeInternal;
extern UploadPrivateFileDefaultTypeInternal _UploadPrivateFile_default_instance_;
class UploadPrivateFile_Params;
struct UploadPrivateFile_ParamsDefaultTypeInternal;
extern UploadPrivateFile_ParamsDefaultTypeInternal _UploadPrivateFile_Params_default_instance_;
class getGroupFileByFolder;
struct getGroupFileByFolderDefaultTypeInternal;
extern getGroupFileByFolderDefaultTypeInternal _getGroupFileByFolder_default_instance_;
class getGroupFileByFolderResp;
struct getGroupFileByFolderRespDefaultTypeInternal;
extern getGroupFileByFolderRespDefaultTypeInternal _getGroupFileByFolderResp_default_instance_;
class getGroupFileByFolder_Params;
struct getGroupFileByFolder_ParamsDefaultTypeInternal;
extern getGroupFileByFolder_ParamsDefaultTypeInternal _getGroupFileByFolder_Params_default_instance_;
class getMsg;
struct getMsgDefaultTypeInternal;
extern getMsgDefaultTypeInternal _getMsg_default_instance_;
class getMsgResp;
struct getMsgRespDefaultTypeInternal;
extern getMsgRespDefaultTypeInternal _getMsgResp_default_instance_;
class getMsg_Params;
struct getMsg_ParamsDefaultTypeInternal;
extern getMsg_ParamsDefaultTypeInternal _getMsg_Params_default_instance_;
}  // namespace cqhttp
PROTOBUF_NAMESPACE_OPEN
template<> ::cqhttp::CanSendImage* Arena::CreateMaybeMessage<::cqhttp::CanSendImage>(Arena*);
template<> ::cqhttp::CanSendImageResp* Arena::CreateMaybeMessage<::cqhttp::CanSendImageResp>(Arena*);
template<> ::cqhttp::CanSendRecord* Arena::CreateMaybeMessage<::cqhttp::CanSendRecord>(Arena*);
template<> ::cqhttp::CanSendRecordResp* Arena::CreateMaybeMessage<::cqhttp::CanSendRecordResp>(Arena*);
template<> ::cqhttp::CheckUlrSafely* Arena::CreateMaybeMessage<::cqhttp::CheckUlrSafely>(Arena*);
template<> ::cqhttp::CheckUlrSafelyResp* Arena::CreateMaybeMessage<::cqhttp::CheckUlrSafelyResp>(Arena*);
template<> ::cqhttp::CheckUlrSafely_Params* Arena::CreateMaybeMessage<::cqhttp::CheckUlrSafely_Params>(Arena*);
template<> ::cqhttp::CleanCache* Arena::CreateMaybeMessage<::cqhttp::CleanCache>(Arena*);
template<> ::cqhttp::CreateGroupFileFolder* Arena::CreateMaybeMessage<::cqhttp::CreateGroupFileFolder>(Arena*);
template<> ::cqhttp::CreateGroupFileFolder_Params* Arena::CreateMaybeMessage<::cqhttp::CreateGroupFileFolder_Params>(Arena*);
template<> ::cqhttp::DeleteEssenceMsg* Arena::CreateMaybeMessage<::cqhttp::DeleteEssenceMsg>(Arena*);
template<> ::cqhttp::DeleteEssenceMsg_Params* Arena::CreateMaybeMessage<::cqhttp::DeleteEssenceMsg_Params>(Arena*);
template<> ::cqhttp::DeleteFriend* Arena::CreateMaybeMessage<::cqhttp::DeleteFriend>(Arena*);
template<> ::cqhttp::DeleteFriend_Params* Arena::CreateMaybeMessage<::cqhttp::DeleteFriend_Params>(Arena*);
template<> ::cqhttp::DeleteGroupFile* Arena::CreateMaybeMessage<::cqhttp::DeleteGroupFile>(Arena*);
template<> ::cqhttp::DeleteGroupFile_Params* Arena::CreateMaybeMessage<::cqhttp::DeleteGroupFile_Params>(Arena*);
template<> ::cqhttp::DeleteGroupFolder* Arena::CreateMaybeMessage<::cqhttp::DeleteGroupFolder>(Arena*);
template<> ::cqhttp::DeleteGroupFolder_Params* Arena::CreateMaybeMessage<::cqhttp::DeleteGroupFolder_Params>(Arena*);
template<> ::cqhttp::DeleteMsg* Arena::CreateMaybeMessage<::cqhttp::DeleteMsg>(Arena*);
template<> ::cqhttp::DeleteMsg_Params* Arena::CreateMaybeMessage<::cqhttp::DeleteMsg_Params>(Arena*);
template<> ::cqhttp::DeleteUnidirectionalFriend* Arena::CreateMaybeMessage<::cqhttp::DeleteUnidirectionalFriend>(Arena*);
template<> ::cqhttp::DeleteUnidirectionalFriend_Params* Arena::CreateMaybeMessage<::cqhttp::DeleteUnidirectionalFriend_Params>(Arena*);
template<> ::cqhttp::DownloadFile* Arena::CreateMaybeMessage<::cqhttp::DownloadFile>(Arena*);
template<> ::cqhttp::DownloadFileResp* Arena::CreateMaybeMessage<::cqhttp::DownloadFileResp>(Arena*);
template<> ::cqhttp::DownloadFile_Params* Arena::CreateMaybeMessage<::cqhttp::DownloadFile_Params>(Arena*);
template<> ::cqhttp::GetCoolies* Arena::CreateMaybeMessage<::cqhttp::GetCoolies>(Arena*);
template<> ::cqhttp::GetCooliesResp* Arena::CreateMaybeMessage<::cqhttp::GetCooliesResp>(Arena*);
template<> ::cqhttp::GetCoolies_Params* Arena::CreateMaybeMessage<::cqhttp::GetCoolies_Params>(Arena*);
template<> ::cqhttp::GetCredentials* Arena::CreateMaybeMessage<::cqhttp::GetCredentials>(Arena*);
template<> ::cqhttp::GetCredentialsResp* Arena::CreateMaybeMessage<::cqhttp::GetCredentialsResp>(Arena*);
template<> ::cqhttp::GetCredentials_Params* Arena::CreateMaybeMessage<::cqhttp::GetCredentials_Params>(Arena*);
template<> ::cqhttp::GetCsrfToken* Arena::CreateMaybeMessage<::cqhttp::GetCsrfToken>(Arena*);
template<> ::cqhttp::GetCsrfTokenResp* Arena::CreateMaybeMessage<::cqhttp::GetCsrfTokenResp>(Arena*);
template<> ::cqhttp::GetEssenceMsgList* Arena::CreateMaybeMessage<::cqhttp::GetEssenceMsgList>(Arena*);
template<> ::cqhttp::GetEssenceMsgListResp* Arena::CreateMaybeMessage<::cqhttp::GetEssenceMsgListResp>(Arena*);
template<> ::cqhttp::GetEssenceMsgList_Params* Arena::CreateMaybeMessage<::cqhttp::GetEssenceMsgList_Params>(Arena*);
template<> ::cqhttp::GetForwardMsg* Arena::CreateMaybeMessage<::cqhttp::GetForwardMsg>(Arena*);
template<> ::cqhttp::GetForwardMsgResp* Arena::CreateMaybeMessage<::cqhttp::GetForwardMsgResp>(Arena*);
template<> ::cqhttp::GetForwardMsgResp_Messages* Arena::CreateMaybeMessage<::cqhttp::GetForwardMsgResp_Messages>(Arena*);
template<> ::cqhttp::GetForwardMsg_Params* Arena::CreateMaybeMessage<::cqhttp::GetForwardMsg_Params>(Arena*);
template<> ::cqhttp::GetFriendList* Arena::CreateMaybeMessage<::cqhttp::GetFriendList>(Arena*);
template<> ::cqhttp::GetFriendListResp* Arena::CreateMaybeMessage<::cqhttp::GetFriendListResp>(Arena*);
template<> ::cqhttp::GetFriendListResp_Friend* Arena::CreateMaybeMessage<::cqhttp::GetFriendListResp_Friend>(Arena*);
template<> ::cqhttp::GetGroupAtAllRemain* Arena::CreateMaybeMessage<::cqhttp::GetGroupAtAllRemain>(Arena*);
template<> ::cqhttp::GetGroupAtAllRemainResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupAtAllRemainResp>(Arena*);
template<> ::cqhttp::GetGroupAtAllRemain_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupAtAllRemain_Params>(Arena*);
template<> ::cqhttp::GetGroupFileSystemInfo* Arena::CreateMaybeMessage<::cqhttp::GetGroupFileSystemInfo>(Arena*);
template<> ::cqhttp::GetGroupFileSystemInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupFileSystemInfoResp>(Arena*);
template<> ::cqhttp::GetGroupFileSystemInfo_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupFileSystemInfo_Params>(Arena*);
template<> ::cqhttp::GetGroupFileUrl* Arena::CreateMaybeMessage<::cqhttp::GetGroupFileUrl>(Arena*);
template<> ::cqhttp::GetGroupFileUrlResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupFileUrlResp>(Arena*);
template<> ::cqhttp::GetGroupFileUrl_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupFileUrl_Params>(Arena*);
template<> ::cqhttp::GetGroupHonorInfo* Arena::CreateMaybeMessage<::cqhttp::GetGroupHonorInfo>(Arena*);
template<> ::cqhttp::GetGroupHonorInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupHonorInfoResp>(Arena*);
template<> ::cqhttp::GetGroupHonorInfoResp_Talkative* Arena::CreateMaybeMessage<::cqhttp::GetGroupHonorInfoResp_Talkative>(Arena*);
template<> ::cqhttp::GetGroupHonorInfo_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupHonorInfo_Params>(Arena*);
template<> ::cqhttp::GetGroupInfo* Arena::CreateMaybeMessage<::cqhttp::GetGroupInfo>(Arena*);
template<> ::cqhttp::GetGroupInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupInfoResp>(Arena*);
template<> ::cqhttp::GetGroupInfo_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupInfo_Params>(Arena*);
template<> ::cqhttp::GetGroupList* Arena::CreateMaybeMessage<::cqhttp::GetGroupList>(Arena*);
template<> ::cqhttp::GetGroupListResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupListResp>(Arena*);
template<> ::cqhttp::GetGroupList_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupList_Params>(Arena*);
template<> ::cqhttp::GetGroupMemberInfo* Arena::CreateMaybeMessage<::cqhttp::GetGroupMemberInfo>(Arena*);
template<> ::cqhttp::GetGroupMemberInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupMemberInfoResp>(Arena*);
template<> ::cqhttp::GetGroupMemberInfo_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupMemberInfo_Params>(Arena*);
template<> ::cqhttp::GetGroupMemberList* Arena::CreateMaybeMessage<::cqhttp::GetGroupMemberList>(Arena*);
template<> ::cqhttp::GetGroupMemberListResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupMemberListResp>(Arena*);
template<> ::cqhttp::GetGroupMemberList_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupMemberList_Params>(Arena*);
template<> ::cqhttp::GetGroupMsgHistory* Arena::CreateMaybeMessage<::cqhttp::GetGroupMsgHistory>(Arena*);
template<> ::cqhttp::GetGroupMsgHistoryResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupMsgHistoryResp>(Arena*);
template<> ::cqhttp::GetGroupMsgHistory_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupMsgHistory_Params>(Arena*);
template<> ::cqhttp::GetGroupNotice* Arena::CreateMaybeMessage<::cqhttp::GetGroupNotice>(Arena*);
template<> ::cqhttp::GetGroupNoticeResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupNoticeResp>(Arena*);
template<> ::cqhttp::GetGroupNoticeResp_Notice* Arena::CreateMaybeMessage<::cqhttp::GetGroupNoticeResp_Notice>(Arena*);
template<> ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* Arena::CreateMaybeMessage<::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage>(Arena*);
template<> ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* Arena::CreateMaybeMessage<::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image>(Arena*);
template<> ::cqhttp::GetGroupNotice_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupNotice_Params>(Arena*);
template<> ::cqhttp::GetGroupRootFiles* Arena::CreateMaybeMessage<::cqhttp::GetGroupRootFiles>(Arena*);
template<> ::cqhttp::GetGroupRootFilesResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupRootFilesResp>(Arena*);
template<> ::cqhttp::GetGroupRootFiles_Params* Arena::CreateMaybeMessage<::cqhttp::GetGroupRootFiles_Params>(Arena*);
template<> ::cqhttp::GetGroupSystemMsg* Arena::CreateMaybeMessage<::cqhttp::GetGroupSystemMsg>(Arena*);
template<> ::cqhttp::GetGroupSystemMsgResp* Arena::CreateMaybeMessage<::cqhttp::GetGroupSystemMsgResp>(Arena*);
template<> ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* Arena::CreateMaybeMessage<::cqhttp::GetGroupSystemMsgResp_InvitedRequest>(Arena*);
template<> ::cqhttp::GetGroupSystemMsgResp_JoinRequest* Arena::CreateMaybeMessage<::cqhttp::GetGroupSystemMsgResp_JoinRequest>(Arena*);
template<> ::cqhttp::GetImage* Arena::CreateMaybeMessage<::cqhttp::GetImage>(Arena*);
template<> ::cqhttp::GetImageResp* Arena::CreateMaybeMessage<::cqhttp::GetImageResp>(Arena*);
template<> ::cqhttp::GetImage_Params* Arena::CreateMaybeMessage<::cqhttp::GetImage_Params>(Arena*);
template<> ::cqhttp::GetLoginInfo* Arena::CreateMaybeMessage<::cqhttp::GetLoginInfo>(Arena*);
template<> ::cqhttp::GetLoginInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetLoginInfoResp>(Arena*);
template<> ::cqhttp::GetLoginInfo_Params* Arena::CreateMaybeMessage<::cqhttp::GetLoginInfo_Params>(Arena*);
template<> ::cqhttp::GetModelShow* Arena::CreateMaybeMessage<::cqhttp::GetModelShow>(Arena*);
template<> ::cqhttp::GetModelShowResp* Arena::CreateMaybeMessage<::cqhttp::GetModelShowResp>(Arena*);
template<> ::cqhttp::GetModelShowResp_Variant* Arena::CreateMaybeMessage<::cqhttp::GetModelShowResp_Variant>(Arena*);
template<> ::cqhttp::GetModelShow_Params* Arena::CreateMaybeMessage<::cqhttp::GetModelShow_Params>(Arena*);
template<> ::cqhttp::GetOnlineClients* Arena::CreateMaybeMessage<::cqhttp::GetOnlineClients>(Arena*);
template<> ::cqhttp::GetOnlineClientsResp* Arena::CreateMaybeMessage<::cqhttp::GetOnlineClientsResp>(Arena*);
template<> ::cqhttp::GetOnlineClients_Params* Arena::CreateMaybeMessage<::cqhttp::GetOnlineClients_Params>(Arena*);
template<> ::cqhttp::GetRecord* Arena::CreateMaybeMessage<::cqhttp::GetRecord>(Arena*);
template<> ::cqhttp::GetRecordResp* Arena::CreateMaybeMessage<::cqhttp::GetRecordResp>(Arena*);
template<> ::cqhttp::GetRecord_Params* Arena::CreateMaybeMessage<::cqhttp::GetRecord_Params>(Arena*);
template<> ::cqhttp::GetStatus* Arena::CreateMaybeMessage<::cqhttp::GetStatus>(Arena*);
template<> ::cqhttp::GetStatusResp* Arena::CreateMaybeMessage<::cqhttp::GetStatusResp>(Arena*);
template<> ::cqhttp::GetStatusResp_Statistics* Arena::CreateMaybeMessage<::cqhttp::GetStatusResp_Statistics>(Arena*);
template<> ::cqhttp::GetStrangerInfo* Arena::CreateMaybeMessage<::cqhttp::GetStrangerInfo>(Arena*);
template<> ::cqhttp::GetStrangerInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetStrangerInfoResp>(Arena*);
template<> ::cqhttp::GetStrangerInfo_Params* Arena::CreateMaybeMessage<::cqhttp::GetStrangerInfo_Params>(Arena*);
template<> ::cqhttp::GetVersionInfo* Arena::CreateMaybeMessage<::cqhttp::GetVersionInfo>(Arena*);
template<> ::cqhttp::GetVersionInfoResp* Arena::CreateMaybeMessage<::cqhttp::GetVersionInfoResp>(Arena*);
template<> ::cqhttp::GetWordSlices* Arena::CreateMaybeMessage<::cqhttp::GetWordSlices>(Arena*);
template<> ::cqhttp::GetWordSlicesResp* Arena::CreateMaybeMessage<::cqhttp::GetWordSlicesResp>(Arena*);
template<> ::cqhttp::GetWordSlices_Params* Arena::CreateMaybeMessage<::cqhttp::GetWordSlices_Params>(Arena*);
template<> ::cqhttp::HandleQuickOperation* Arena::CreateMaybeMessage<::cqhttp::HandleQuickOperation>(Arena*);
template<> ::cqhttp::HandleQuickOperation_Params* Arena::CreateMaybeMessage<::cqhttp::HandleQuickOperation_Params>(Arena*);
template<> ::cqhttp::MarkMsgAsRead* Arena::CreateMaybeMessage<::cqhttp::MarkMsgAsRead>(Arena*);
template<> ::cqhttp::MarkMsgAsRead_Params* Arena::CreateMaybeMessage<::cqhttp::MarkMsgAsRead_Params>(Arena*);
template<> ::cqhttp::OcrImage* Arena::CreateMaybeMessage<::cqhttp::OcrImage>(Arena*);
template<> ::cqhttp::OcrImageResp* Arena::CreateMaybeMessage<::cqhttp::OcrImageResp>(Arena*);
template<> ::cqhttp::OcrImageResp_TextDetection* Arena::CreateMaybeMessage<::cqhttp::OcrImageResp_TextDetection>(Arena*);
template<> ::cqhttp::OcrImage_Params* Arena::CreateMaybeMessage<::cqhttp::OcrImage_Params>(Arena*);
template<> ::cqhttp::QiDianGetAccountInfo* Arena::CreateMaybeMessage<::cqhttp::QiDianGetAccountInfo>(Arena*);
template<> ::cqhttp::QiDianGetAccountInfoResp* Arena::CreateMaybeMessage<::cqhttp::QiDianGetAccountInfoResp>(Arena*);
template<> ::cqhttp::ReloadEventFilter* Arena::CreateMaybeMessage<::cqhttp::ReloadEventFilter>(Arena*);
template<> ::cqhttp::ReloadEventFilter_Params* Arena::CreateMaybeMessage<::cqhttp::ReloadEventFilter_Params>(Arena*);
template<> ::cqhttp::SendGroupForwardMsg* Arena::CreateMaybeMessage<::cqhttp::SendGroupForwardMsg>(Arena*);
template<> ::cqhttp::SendGroupForwardMsgResp* Arena::CreateMaybeMessage<::cqhttp::SendGroupForwardMsgResp>(Arena*);
template<> ::cqhttp::SendGroupForwardMsg_Params* Arena::CreateMaybeMessage<::cqhttp::SendGroupForwardMsg_Params>(Arena*);
template<> ::cqhttp::SendGroupMsg* Arena::CreateMaybeMessage<::cqhttp::SendGroupMsg>(Arena*);
template<> ::cqhttp::SendGroupMsgResp* Arena::CreateMaybeMessage<::cqhttp::SendGroupMsgResp>(Arena*);
template<> ::cqhttp::SendGroupMsg_Params* Arena::CreateMaybeMessage<::cqhttp::SendGroupMsg_Params>(Arena*);
template<> ::cqhttp::SendGroupNotice* Arena::CreateMaybeMessage<::cqhttp::SendGroupNotice>(Arena*);
template<> ::cqhttp::SendGroupNotice_Params* Arena::CreateMaybeMessage<::cqhttp::SendGroupNotice_Params>(Arena*);
template<> ::cqhttp::SendGroupSign* Arena::CreateMaybeMessage<::cqhttp::SendGroupSign>(Arena*);
template<> ::cqhttp::SendGroupSign_Params* Arena::CreateMaybeMessage<::cqhttp::SendGroupSign_Params>(Arena*);
template<> ::cqhttp::SendMessage* Arena::CreateMaybeMessage<::cqhttp::SendMessage>(Arena*);
template<> ::cqhttp::SendMessageResp* Arena::CreateMaybeMessage<::cqhttp::SendMessageResp>(Arena*);
template<> ::cqhttp::SendMessage_Params* Arena::CreateMaybeMessage<::cqhttp::SendMessage_Params>(Arena*);
template<> ::cqhttp::SendPrivateForwardMsg* Arena::CreateMaybeMessage<::cqhttp::SendPrivateForwardMsg>(Arena*);
template<> ::cqhttp::SendPrivateForwardMsgResp* Arena::CreateMaybeMessage<::cqhttp::SendPrivateForwardMsgResp>(Arena*);
template<> ::cqhttp::SendPrivateForwardMsg_Params* Arena::CreateMaybeMessage<::cqhttp::SendPrivateForwardMsg_Params>(Arena*);
template<> ::cqhttp::SendPrivateMsg* Arena::CreateMaybeMessage<::cqhttp::SendPrivateMsg>(Arena*);
template<> ::cqhttp::SendPrivateMsgResp* Arena::CreateMaybeMessage<::cqhttp::SendPrivateMsgResp>(Arena*);
template<> ::cqhttp::SendPrivateMsg_Params* Arena::CreateMaybeMessage<::cqhttp::SendPrivateMsg_Params>(Arena*);
template<> ::cqhttp::SetEssenceMsg* Arena::CreateMaybeMessage<::cqhttp::SetEssenceMsg>(Arena*);
template<> ::cqhttp::SetEssenceMsg_Params* Arena::CreateMaybeMessage<::cqhttp::SetEssenceMsg_Params>(Arena*);
template<> ::cqhttp::SetFriendAddRequest* Arena::CreateMaybeMessage<::cqhttp::SetFriendAddRequest>(Arena*);
template<> ::cqhttp::SetFriendAddRequest_Params* Arena::CreateMaybeMessage<::cqhttp::SetFriendAddRequest_Params>(Arena*);
template<> ::cqhttp::SetGroupAddRequest* Arena::CreateMaybeMessage<::cqhttp::SetGroupAddRequest>(Arena*);
template<> ::cqhttp::SetGroupAddRequest_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupAddRequest_Params>(Arena*);
template<> ::cqhttp::SetGroupAdmin* Arena::CreateMaybeMessage<::cqhttp::SetGroupAdmin>(Arena*);
template<> ::cqhttp::SetGroupAdmin_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupAdmin_Params>(Arena*);
template<> ::cqhttp::SetGroupAnonymous* Arena::CreateMaybeMessage<::cqhttp::SetGroupAnonymous>(Arena*);
template<> ::cqhttp::SetGroupAnonymousBan* Arena::CreateMaybeMessage<::cqhttp::SetGroupAnonymousBan>(Arena*);
template<> ::cqhttp::SetGroupAnonymousBan_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupAnonymousBan_Params>(Arena*);
template<> ::cqhttp::SetGroupAnonymous_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupAnonymous_Params>(Arena*);
template<> ::cqhttp::SetGroupBan* Arena::CreateMaybeMessage<::cqhttp::SetGroupBan>(Arena*);
template<> ::cqhttp::SetGroupBan_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupBan_Params>(Arena*);
template<> ::cqhttp::SetGroupCard* Arena::CreateMaybeMessage<::cqhttp::SetGroupCard>(Arena*);
template<> ::cqhttp::SetGroupCard_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupCard_Params>(Arena*);
template<> ::cqhttp::SetGroupKick* Arena::CreateMaybeMessage<::cqhttp::SetGroupKick>(Arena*);
template<> ::cqhttp::SetGroupKick_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupKick_Params>(Arena*);
template<> ::cqhttp::SetGroupLeave* Arena::CreateMaybeMessage<::cqhttp::SetGroupLeave>(Arena*);
template<> ::cqhttp::SetGroupLeave_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupLeave_Params>(Arena*);
template<> ::cqhttp::SetGroupName* Arena::CreateMaybeMessage<::cqhttp::SetGroupName>(Arena*);
template<> ::cqhttp::SetGroupName_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupName_Params>(Arena*);
template<> ::cqhttp::SetGroupPortrait* Arena::CreateMaybeMessage<::cqhttp::SetGroupPortrait>(Arena*);
template<> ::cqhttp::SetGroupPortrait_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupPortrait_Params>(Arena*);
template<> ::cqhttp::SetGroupSpecialTitle* Arena::CreateMaybeMessage<::cqhttp::SetGroupSpecialTitle>(Arena*);
template<> ::cqhttp::SetGroupSpecialTitle_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupSpecialTitle_Params>(Arena*);
template<> ::cqhttp::SetGroupWholeBan* Arena::CreateMaybeMessage<::cqhttp::SetGroupWholeBan>(Arena*);
template<> ::cqhttp::SetGroupWholeBan_Params* Arena::CreateMaybeMessage<::cqhttp::SetGroupWholeBan_Params>(Arena*);
template<> ::cqhttp::SetModelShow* Arena::CreateMaybeMessage<::cqhttp::SetModelShow>(Arena*);
template<> ::cqhttp::SetModelShow_Params* Arena::CreateMaybeMessage<::cqhttp::SetModelShow_Params>(Arena*);
template<> ::cqhttp::SetQQProfile* Arena::CreateMaybeMessage<::cqhttp::SetQQProfile>(Arena*);
template<> ::cqhttp::SetQQProfile_Params* Arena::CreateMaybeMessage<::cqhttp::SetQQProfile_Params>(Arena*);
template<> ::cqhttp::SetRestart* Arena::CreateMaybeMessage<::cqhttp::SetRestart>(Arena*);
template<> ::cqhttp::SetRestart_Params* Arena::CreateMaybeMessage<::cqhttp::SetRestart_Params>(Arena*);
template<> ::cqhttp::UnidirectionalFriendList* Arena::CreateMaybeMessage<::cqhttp::UnidirectionalFriendList>(Arena*);
template<> ::cqhttp::UnidirectionalFriendListResp* Arena::CreateMaybeMessage<::cqhttp::UnidirectionalFriendListResp>(Arena*);
template<> ::cqhttp::UnidirectionalFriendListResp_Friend* Arena::CreateMaybeMessage<::cqhttp::UnidirectionalFriendListResp_Friend>(Arena*);
template<> ::cqhttp::UploadGroupFile* Arena::CreateMaybeMessage<::cqhttp::UploadGroupFile>(Arena*);
template<> ::cqhttp::UploadGroupFile_Params* Arena::CreateMaybeMessage<::cqhttp::UploadGroupFile_Params>(Arena*);
template<> ::cqhttp::UploadPrivateFile* Arena::CreateMaybeMessage<::cqhttp::UploadPrivateFile>(Arena*);
template<> ::cqhttp::UploadPrivateFile_Params* Arena::CreateMaybeMessage<::cqhttp::UploadPrivateFile_Params>(Arena*);
template<> ::cqhttp::getGroupFileByFolder* Arena::CreateMaybeMessage<::cqhttp::getGroupFileByFolder>(Arena*);
template<> ::cqhttp::getGroupFileByFolderResp* Arena::CreateMaybeMessage<::cqhttp::getGroupFileByFolderResp>(Arena*);
template<> ::cqhttp::getGroupFileByFolder_Params* Arena::CreateMaybeMessage<::cqhttp::getGroupFileByFolder_Params>(Arena*);
template<> ::cqhttp::getMsg* Arena::CreateMaybeMessage<::cqhttp::getMsg>(Arena*);
template<> ::cqhttp::getMsgResp* Arena::CreateMaybeMessage<::cqhttp::getMsgResp>(Arena*);
template<> ::cqhttp::getMsg_Params* Arena::CreateMaybeMessage<::cqhttp::getMsg_Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cqhttp {

// ===================================================================

class SendPrivateMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendPrivateMsg.Params) */ {
 public:
  inline SendPrivateMsg_Params() : SendPrivateMsg_Params(nullptr) {}
  ~SendPrivateMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR SendPrivateMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPrivateMsg_Params(const SendPrivateMsg_Params& from);
  SendPrivateMsg_Params(SendPrivateMsg_Params&& from) noexcept
    : SendPrivateMsg_Params() {
    *this = ::std::move(from);
  }

  inline SendPrivateMsg_Params& operator=(const SendPrivateMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateMsg_Params& operator=(SendPrivateMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPrivateMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPrivateMsg_Params* internal_default_instance() {
    return reinterpret_cast<const SendPrivateMsg_Params*>(
               &_SendPrivateMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendPrivateMsg_Params& a, SendPrivateMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPrivateMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPrivateMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPrivateMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPrivateMsg_Params& from) {
    SendPrivateMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendPrivateMsg.Params";
  }
  protected:
  explicit SendPrivateMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessgaeFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kAutoEscapeFieldNumber = 4,
  };
  // string messgae = 3;
  void clear_messgae();
  const std::string& messgae() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_messgae(ArgT0&& arg0, ArgT... args);
  std::string* mutable_messgae();
  PROTOBUF_NODISCARD std::string* release_messgae();
  void set_allocated_messgae(std::string* messgae);
  private:
  const std::string& _internal_messgae() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messgae(const std::string& value);
  std::string* _internal_mutable_messgae();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 group_id = 2;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool auto_escape = 4;
  void clear_auto_escape();
  bool auto_escape() const;
  void set_auto_escape(bool value);
  private:
  bool _internal_auto_escape() const;
  void _internal_set_auto_escape(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendPrivateMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messgae_;
    int64_t user_id_;
    int64_t group_id_;
    bool auto_escape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendPrivateMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendPrivateMsg) */ {
 public:
  inline SendPrivateMsg() : SendPrivateMsg(nullptr) {}
  ~SendPrivateMsg() override;
  explicit PROTOBUF_CONSTEXPR SendPrivateMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPrivateMsg(const SendPrivateMsg& from);
  SendPrivateMsg(SendPrivateMsg&& from) noexcept
    : SendPrivateMsg() {
    *this = ::std::move(from);
  }

  inline SendPrivateMsg& operator=(const SendPrivateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateMsg& operator=(SendPrivateMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPrivateMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPrivateMsg* internal_default_instance() {
    return reinterpret_cast<const SendPrivateMsg*>(
               &_SendPrivateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendPrivateMsg& a, SendPrivateMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPrivateMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPrivateMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPrivateMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPrivateMsg& from) {
    SendPrivateMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendPrivateMsg";
  }
  protected:
  explicit SendPrivateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendPrivateMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.SendPrivateMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendPrivateMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendPrivateMsg_Params* release_params();
  ::cqhttp::SendPrivateMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendPrivateMsg_Params* params);
  private:
  const ::cqhttp::SendPrivateMsg_Params& _internal_params() const;
  ::cqhttp::SendPrivateMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendPrivateMsg_Params* params);
  ::cqhttp::SendPrivateMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendPrivateMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::SendPrivateMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendPrivateMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendPrivateMsgResp) */ {
 public:
  inline SendPrivateMsgResp() : SendPrivateMsgResp(nullptr) {}
  ~SendPrivateMsgResp() override;
  explicit PROTOBUF_CONSTEXPR SendPrivateMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPrivateMsgResp(const SendPrivateMsgResp& from);
  SendPrivateMsgResp(SendPrivateMsgResp&& from) noexcept
    : SendPrivateMsgResp() {
    *this = ::std::move(from);
  }

  inline SendPrivateMsgResp& operator=(const SendPrivateMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateMsgResp& operator=(SendPrivateMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPrivateMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPrivateMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendPrivateMsgResp*>(
               &_SendPrivateMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendPrivateMsgResp& a, SendPrivateMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPrivateMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPrivateMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPrivateMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPrivateMsgResp& from) {
    SendPrivateMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendPrivateMsgResp";
  }
  protected:
  explicit SendPrivateMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendPrivateMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupMsg.Params) */ {
 public:
  inline SendGroupMsg_Params() : SendGroupMsg_Params(nullptr) {}
  ~SendGroupMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR SendGroupMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupMsg_Params(const SendGroupMsg_Params& from);
  SendGroupMsg_Params(SendGroupMsg_Params&& from) noexcept
    : SendGroupMsg_Params() {
    *this = ::std::move(from);
  }

  inline SendGroupMsg_Params& operator=(const SendGroupMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupMsg_Params& operator=(SendGroupMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupMsg_Params* internal_default_instance() {
    return reinterpret_cast<const SendGroupMsg_Params*>(
               &_SendGroupMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendGroupMsg_Params& a, SendGroupMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupMsg_Params& from) {
    SendGroupMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupMsg.Params";
  }
  protected:
  explicit SendGroupMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMessgaeFieldNumber = 2,
    kAutoEscapeFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 messgae = 2;
  void clear_messgae();
  int64_t messgae() const;
  void set_messgae(int64_t value);
  private:
  int64_t _internal_messgae() const;
  void _internal_set_messgae(int64_t value);
  public:

  // bool auto_escape = 3;
  void clear_auto_escape();
  bool auto_escape() const;
  void set_auto_escape(bool value);
  private:
  bool _internal_auto_escape() const;
  void _internal_set_auto_escape(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    int64_t messgae_;
    bool auto_escape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupMsg) */ {
 public:
  inline SendGroupMsg() : SendGroupMsg(nullptr) {}
  ~SendGroupMsg() override;
  explicit PROTOBUF_CONSTEXPR SendGroupMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupMsg(const SendGroupMsg& from);
  SendGroupMsg(SendGroupMsg&& from) noexcept
    : SendGroupMsg() {
    *this = ::std::move(from);
  }

  inline SendGroupMsg& operator=(const SendGroupMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupMsg& operator=(SendGroupMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupMsg* internal_default_instance() {
    return reinterpret_cast<const SendGroupMsg*>(
               &_SendGroupMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendGroupMsg& a, SendGroupMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupMsg& from) {
    SendGroupMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupMsg";
  }
  protected:
  explicit SendGroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendGroupMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.SendGroupMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendGroupMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendGroupMsg_Params* release_params();
  ::cqhttp::SendGroupMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendGroupMsg_Params* params);
  private:
  const ::cqhttp::SendGroupMsg_Params& _internal_params() const;
  ::cqhttp::SendGroupMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendGroupMsg_Params* params);
  ::cqhttp::SendGroupMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::SendGroupMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupMsgResp) */ {
 public:
  inline SendGroupMsgResp() : SendGroupMsgResp(nullptr) {}
  ~SendGroupMsgResp() override;
  explicit PROTOBUF_CONSTEXPR SendGroupMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupMsgResp(const SendGroupMsgResp& from);
  SendGroupMsgResp(SendGroupMsgResp&& from) noexcept
    : SendGroupMsgResp() {
    *this = ::std::move(from);
  }

  inline SendGroupMsgResp& operator=(const SendGroupMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupMsgResp& operator=(SendGroupMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendGroupMsgResp*>(
               &_SendGroupMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendGroupMsgResp& a, SendGroupMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupMsgResp& from) {
    SendGroupMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupMsgResp";
  }
  protected:
  explicit SendGroupMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupForwardMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupForwardMsg.Params) */ {
 public:
  inline SendGroupForwardMsg_Params() : SendGroupForwardMsg_Params(nullptr) {}
  ~SendGroupForwardMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR SendGroupForwardMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupForwardMsg_Params(const SendGroupForwardMsg_Params& from);
  SendGroupForwardMsg_Params(SendGroupForwardMsg_Params&& from) noexcept
    : SendGroupForwardMsg_Params() {
    *this = ::std::move(from);
  }

  inline SendGroupForwardMsg_Params& operator=(const SendGroupForwardMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupForwardMsg_Params& operator=(SendGroupForwardMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupForwardMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupForwardMsg_Params* internal_default_instance() {
    return reinterpret_cast<const SendGroupForwardMsg_Params*>(
               &_SendGroupForwardMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SendGroupForwardMsg_Params& a, SendGroupForwardMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupForwardMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupForwardMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupForwardMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupForwardMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupForwardMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupForwardMsg_Params& from) {
    SendGroupForwardMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupForwardMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupForwardMsg.Params";
  }
  protected:
  explicit SendGroupForwardMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMessgaeFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 messgae = 2;
  void clear_messgae();
  int64_t messgae() const;
  void set_messgae(int64_t value);
  private:
  int64_t _internal_messgae() const;
  void _internal_set_messgae(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupForwardMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    int64_t messgae_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupForwardMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupForwardMsg) */ {
 public:
  inline SendGroupForwardMsg() : SendGroupForwardMsg(nullptr) {}
  ~SendGroupForwardMsg() override;
  explicit PROTOBUF_CONSTEXPR SendGroupForwardMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupForwardMsg(const SendGroupForwardMsg& from);
  SendGroupForwardMsg(SendGroupForwardMsg&& from) noexcept
    : SendGroupForwardMsg() {
    *this = ::std::move(from);
  }

  inline SendGroupForwardMsg& operator=(const SendGroupForwardMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupForwardMsg& operator=(SendGroupForwardMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupForwardMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupForwardMsg* internal_default_instance() {
    return reinterpret_cast<const SendGroupForwardMsg*>(
               &_SendGroupForwardMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendGroupForwardMsg& a, SendGroupForwardMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupForwardMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupForwardMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupForwardMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupForwardMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupForwardMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupForwardMsg& from) {
    SendGroupForwardMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupForwardMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupForwardMsg";
  }
  protected:
  explicit SendGroupForwardMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendGroupForwardMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.SendGroupForwardMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendGroupForwardMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendGroupForwardMsg_Params* release_params();
  ::cqhttp::SendGroupForwardMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendGroupForwardMsg_Params* params);
  private:
  const ::cqhttp::SendGroupForwardMsg_Params& _internal_params() const;
  ::cqhttp::SendGroupForwardMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendGroupForwardMsg_Params* params);
  ::cqhttp::SendGroupForwardMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupForwardMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::SendGroupForwardMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupForwardMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupForwardMsgResp) */ {
 public:
  inline SendGroupForwardMsgResp() : SendGroupForwardMsgResp(nullptr) {}
  ~SendGroupForwardMsgResp() override;
  explicit PROTOBUF_CONSTEXPR SendGroupForwardMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupForwardMsgResp(const SendGroupForwardMsgResp& from);
  SendGroupForwardMsgResp(SendGroupForwardMsgResp&& from) noexcept
    : SendGroupForwardMsgResp() {
    *this = ::std::move(from);
  }

  inline SendGroupForwardMsgResp& operator=(const SendGroupForwardMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupForwardMsgResp& operator=(SendGroupForwardMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupForwardMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupForwardMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendGroupForwardMsgResp*>(
               &_SendGroupForwardMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendGroupForwardMsgResp& a, SendGroupForwardMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupForwardMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupForwardMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupForwardMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupForwardMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupForwardMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupForwardMsgResp& from) {
    SendGroupForwardMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupForwardMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupForwardMsgResp";
  }
  protected:
  explicit SendGroupForwardMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardIdFieldNumber = 2,
    kMessageIdFieldNumber = 1,
  };
  // string forward_id = 2;
  void clear_forward_id();
  const std::string& forward_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_forward_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_forward_id();
  PROTOBUF_NODISCARD std::string* release_forward_id();
  void set_allocated_forward_id(std::string* forward_id);
  private:
  const std::string& _internal_forward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forward_id(const std::string& value);
  std::string* _internal_mutable_forward_id();
  public:

  // int64 message_id = 1;
  void clear_message_id();
  int64_t message_id() const;
  void set_message_id(int64_t value);
  private:
  int64_t _internal_message_id() const;
  void _internal_set_message_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupForwardMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr forward_id_;
    int64_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendMessage_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendMessage.Params) */ {
 public:
  inline SendMessage_Params() : SendMessage_Params(nullptr) {}
  ~SendMessage_Params() override;
  explicit PROTOBUF_CONSTEXPR SendMessage_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessage_Params(const SendMessage_Params& from);
  SendMessage_Params(SendMessage_Params&& from) noexcept
    : SendMessage_Params() {
    *this = ::std::move(from);
  }

  inline SendMessage_Params& operator=(const SendMessage_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessage_Params& operator=(SendMessage_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessage_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessage_Params* internal_default_instance() {
    return reinterpret_cast<const SendMessage_Params*>(
               &_SendMessage_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SendMessage_Params& a, SendMessage_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessage_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessage_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessage_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessage_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessage_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessage_Params& from) {
    SendMessage_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessage_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendMessage.Params";
  }
  protected:
  explicit SendMessage_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 1,
    kMessageFieldNumber = 4,
    kUserIdFieldNumber = 2,
    kGroupIdFieldNumber = 3,
    kAutoEscapeFieldNumber = 5,
  };
  // string message_type = 1;
  void clear_message_type();
  const std::string& message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_type();
  PROTOBUF_NODISCARD std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int64 group_id = 3;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool auto_escape = 5;
  void clear_auto_escape();
  bool auto_escape() const;
  void set_auto_escape(bool value);
  private:
  bool _internal_auto_escape() const;
  void _internal_set_auto_escape(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendMessage.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int64_t user_id_;
    int64_t group_id_;
    bool auto_escape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendMessage) */ {
 public:
  inline SendMessage() : SendMessage(nullptr) {}
  ~SendMessage() override;
  explicit PROTOBUF_CONSTEXPR SendMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessage(const SendMessage& from);
  SendMessage(SendMessage&& from) noexcept
    : SendMessage() {
    *this = ::std::move(from);
  }

  inline SendMessage& operator=(const SendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessage& operator=(SendMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessage* internal_default_instance() {
    return reinterpret_cast<const SendMessage*>(
               &_SendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendMessage& a, SendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessage& from) {
    SendMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendMessage";
  }
  protected:
  explicit SendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendMessage_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.SendMessage.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendMessage_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendMessage_Params* release_params();
  ::cqhttp::SendMessage_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendMessage_Params* params);
  private:
  const ::cqhttp::SendMessage_Params& _internal_params() const;
  ::cqhttp::SendMessage_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendMessage_Params* params);
  ::cqhttp::SendMessage_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::SendMessage_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendMessageResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendMessageResp) */ {
 public:
  inline SendMessageResp() : SendMessageResp(nullptr) {}
  ~SendMessageResp() override;
  explicit PROTOBUF_CONSTEXPR SendMessageResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageResp(const SendMessageResp& from);
  SendMessageResp(SendMessageResp&& from) noexcept
    : SendMessageResp() {
    *this = ::std::move(from);
  }

  inline SendMessageResp& operator=(const SendMessageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageResp& operator=(SendMessageResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageResp* internal_default_instance() {
    return reinterpret_cast<const SendMessageResp*>(
               &_SendMessageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendMessageResp& a, SendMessageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessageResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessageResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessageResp& from) {
    SendMessageResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendMessageResp";
  }
  protected:
  explicit SendMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 2,
  };
  // int32 message_id = 2;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendMessageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteMsg.Params) */ {
 public:
  inline DeleteMsg_Params() : DeleteMsg_Params(nullptr) {}
  ~DeleteMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR DeleteMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMsg_Params(const DeleteMsg_Params& from);
  DeleteMsg_Params(DeleteMsg_Params&& from) noexcept
    : DeleteMsg_Params() {
    *this = ::std::move(from);
  }

  inline DeleteMsg_Params& operator=(const DeleteMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMsg_Params& operator=(DeleteMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMsg_Params* internal_default_instance() {
    return reinterpret_cast<const DeleteMsg_Params*>(
               &_DeleteMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteMsg_Params& a, DeleteMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMsg_Params& from) {
    DeleteMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteMsg.Params";
  }
  protected:
  explicit DeleteMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteMsg) */ {
 public:
  inline DeleteMsg() : DeleteMsg(nullptr) {}
  ~DeleteMsg() override;
  explicit PROTOBUF_CONSTEXPR DeleteMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMsg(const DeleteMsg& from);
  DeleteMsg(DeleteMsg&& from) noexcept
    : DeleteMsg() {
    *this = ::std::move(from);
  }

  inline DeleteMsg& operator=(const DeleteMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMsg& operator=(DeleteMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMsg* internal_default_instance() {
    return reinterpret_cast<const DeleteMsg*>(
               &_DeleteMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteMsg& a, DeleteMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMsg& from) {
    DeleteMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteMsg";
  }
  protected:
  explicit DeleteMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeleteMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.DeleteMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DeleteMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DeleteMsg_Params* release_params();
  ::cqhttp::DeleteMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::DeleteMsg_Params* params);
  private:
  const ::cqhttp::DeleteMsg_Params& _internal_params() const;
  ::cqhttp::DeleteMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DeleteMsg_Params* params);
  ::cqhttp::DeleteMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::DeleteMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class getMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.getMsg.Params) */ {
 public:
  inline getMsg_Params() : getMsg_Params(nullptr) {}
  ~getMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR getMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMsg_Params(const getMsg_Params& from);
  getMsg_Params(getMsg_Params&& from) noexcept
    : getMsg_Params() {
    *this = ::std::move(from);
  }

  inline getMsg_Params& operator=(const getMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMsg_Params& operator=(getMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMsg_Params* internal_default_instance() {
    return reinterpret_cast<const getMsg_Params*>(
               &_getMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getMsg_Params& a, getMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(getMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMsg_Params& from) {
    getMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.getMsg.Params";
  }
  protected:
  explicit getMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.getMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class getMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.getMsg) */ {
 public:
  inline getMsg() : getMsg(nullptr) {}
  ~getMsg() override;
  explicit PROTOBUF_CONSTEXPR getMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMsg(const getMsg& from);
  getMsg(getMsg&& from) noexcept
    : getMsg() {
    *this = ::std::move(from);
  }

  inline getMsg& operator=(const getMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMsg& operator=(getMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMsg* internal_default_instance() {
    return reinterpret_cast<const getMsg*>(
               &_getMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getMsg& a, getMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(getMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMsg& from) {
    getMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.getMsg";
  }
  protected:
  explicit getMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef getMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.getMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::getMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::getMsg_Params* release_params();
  ::cqhttp::getMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::getMsg_Params* params);
  private:
  const ::cqhttp::getMsg_Params& _internal_params() const;
  ::cqhttp::getMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::getMsg_Params* params);
  ::cqhttp::getMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.getMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::getMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class getMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.getMsgResp) */ {
 public:
  inline getMsgResp() : getMsgResp(nullptr) {}
  ~getMsgResp() override;
  explicit PROTOBUF_CONSTEXPR getMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMsgResp(const getMsgResp& from);
  getMsgResp(getMsgResp&& from) noexcept
    : getMsgResp() {
    *this = ::std::move(from);
  }

  inline getMsgResp& operator=(const getMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMsgResp& operator=(getMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMsgResp* internal_default_instance() {
    return reinterpret_cast<const getMsgResp*>(
               &_getMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(getMsgResp& a, getMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(getMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMsgResp& from) {
    getMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.getMsgResp";
  }
  protected:
  explicit getMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 5,
    kMessageFieldNumber = 8,
    kRawMessageFieldNumber = 9,
    kSenderFieldNumber = 6,
    kGroupIdFieldNumber = 2,
    kGroupFieldNumber = 1,
    kMessageIdFieldNumber = 3,
    kRealIdFieldNumber = 4,
    kTimeFieldNumber = 7,
  };
  // string message_type = 5;
  void clear_message_type();
  const std::string& message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_type();
  PROTOBUF_NODISCARD std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // string message = 8;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string raw_message = 9;
  void clear_raw_message();
  const std::string& raw_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_message();
  PROTOBUF_NODISCARD std::string* release_raw_message();
  void set_allocated_raw_message(std::string* raw_message);
  private:
  const std::string& _internal_raw_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_message(const std::string& value);
  std::string* _internal_mutable_raw_message();
  public:

  // .cqhttp.Sender sender = 6;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::cqhttp::Sender& sender() const;
  PROTOBUF_NODISCARD ::cqhttp::Sender* release_sender();
  ::cqhttp::Sender* mutable_sender();
  void set_allocated_sender(::cqhttp::Sender* sender);
  private:
  const ::cqhttp::Sender& _internal_sender() const;
  ::cqhttp::Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::cqhttp::Sender* sender);
  ::cqhttp::Sender* unsafe_arena_release_sender();

  // int64 group_id = 2;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool group = 1;
  void clear_group();
  bool group() const;
  void set_group(bool value);
  private:
  bool _internal_group() const;
  void _internal_set_group(bool value);
  public:

  // int32 message_id = 3;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // int32 real_id = 4;
  void clear_real_id();
  int32_t real_id() const;
  void set_real_id(int32_t value);
  private:
  int32_t _internal_real_id() const;
  void _internal_set_real_id(int32_t value);
  public:

  // int32 time = 7;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.getMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_message_;
    ::cqhttp::Sender* sender_;
    int64_t group_id_;
    bool group_;
    int32_t message_id_;
    int32_t real_id_;
    int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetForwardMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetForwardMsg.Params) */ {
 public:
  inline GetForwardMsg_Params() : GetForwardMsg_Params(nullptr) {}
  ~GetForwardMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR GetForwardMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetForwardMsg_Params(const GetForwardMsg_Params& from);
  GetForwardMsg_Params(GetForwardMsg_Params&& from) noexcept
    : GetForwardMsg_Params() {
    *this = ::std::move(from);
  }

  inline GetForwardMsg_Params& operator=(const GetForwardMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForwardMsg_Params& operator=(GetForwardMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForwardMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForwardMsg_Params* internal_default_instance() {
    return reinterpret_cast<const GetForwardMsg_Params*>(
               &_GetForwardMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetForwardMsg_Params& a, GetForwardMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForwardMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForwardMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForwardMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForwardMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetForwardMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetForwardMsg_Params& from) {
    GetForwardMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetForwardMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetForwardMsg.Params";
  }
  protected:
  explicit GetForwardMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetForwardMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetForwardMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetForwardMsg) */ {
 public:
  inline GetForwardMsg() : GetForwardMsg(nullptr) {}
  ~GetForwardMsg() override;
  explicit PROTOBUF_CONSTEXPR GetForwardMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetForwardMsg(const GetForwardMsg& from);
  GetForwardMsg(GetForwardMsg&& from) noexcept
    : GetForwardMsg() {
    *this = ::std::move(from);
  }

  inline GetForwardMsg& operator=(const GetForwardMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForwardMsg& operator=(GetForwardMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForwardMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForwardMsg* internal_default_instance() {
    return reinterpret_cast<const GetForwardMsg*>(
               &_GetForwardMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetForwardMsg& a, GetForwardMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForwardMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForwardMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForwardMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForwardMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetForwardMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetForwardMsg& from) {
    GetForwardMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetForwardMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetForwardMsg";
  }
  protected:
  explicit GetForwardMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetForwardMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetForwardMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetForwardMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetForwardMsg_Params* release_params();
  ::cqhttp::GetForwardMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetForwardMsg_Params* params);
  private:
  const ::cqhttp::GetForwardMsg_Params& _internal_params() const;
  ::cqhttp::GetForwardMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetForwardMsg_Params* params);
  ::cqhttp::GetForwardMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetForwardMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetForwardMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetForwardMsgResp_Messages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetForwardMsgResp.Messages) */ {
 public:
  inline GetForwardMsgResp_Messages() : GetForwardMsgResp_Messages(nullptr) {}
  ~GetForwardMsgResp_Messages() override;
  explicit PROTOBUF_CONSTEXPR GetForwardMsgResp_Messages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetForwardMsgResp_Messages(const GetForwardMsgResp_Messages& from);
  GetForwardMsgResp_Messages(GetForwardMsgResp_Messages&& from) noexcept
    : GetForwardMsgResp_Messages() {
    *this = ::std::move(from);
  }

  inline GetForwardMsgResp_Messages& operator=(const GetForwardMsgResp_Messages& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForwardMsgResp_Messages& operator=(GetForwardMsgResp_Messages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForwardMsgResp_Messages& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForwardMsgResp_Messages* internal_default_instance() {
    return reinterpret_cast<const GetForwardMsgResp_Messages*>(
               &_GetForwardMsgResp_Messages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetForwardMsgResp_Messages& a, GetForwardMsgResp_Messages& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForwardMsgResp_Messages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForwardMsgResp_Messages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForwardMsgResp_Messages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForwardMsgResp_Messages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetForwardMsgResp_Messages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetForwardMsgResp_Messages& from) {
    GetForwardMsgResp_Messages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetForwardMsgResp_Messages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetForwardMsgResp.Messages";
  }
  protected:
  explicit GetForwardMsgResp_Messages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kSenderFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .cqhttp.Sender sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::cqhttp::Sender& sender() const;
  PROTOBUF_NODISCARD ::cqhttp::Sender* release_sender();
  ::cqhttp::Sender* mutable_sender();
  void set_allocated_sender(::cqhttp::Sender* sender);
  private:
  const ::cqhttp::Sender& _internal_sender() const;
  ::cqhttp::Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::cqhttp::Sender* sender);
  ::cqhttp::Sender* unsafe_arena_release_sender();

  // int64 time = 3;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetForwardMsgResp.Messages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::cqhttp::Sender* sender_;
    int64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetForwardMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetForwardMsgResp) */ {
 public:
  inline GetForwardMsgResp() : GetForwardMsgResp(nullptr) {}
  ~GetForwardMsgResp() override;
  explicit PROTOBUF_CONSTEXPR GetForwardMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetForwardMsgResp(const GetForwardMsgResp& from);
  GetForwardMsgResp(GetForwardMsgResp&& from) noexcept
    : GetForwardMsgResp() {
    *this = ::std::move(from);
  }

  inline GetForwardMsgResp& operator=(const GetForwardMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForwardMsgResp& operator=(GetForwardMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForwardMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForwardMsgResp* internal_default_instance() {
    return reinterpret_cast<const GetForwardMsgResp*>(
               &_GetForwardMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetForwardMsgResp& a, GetForwardMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForwardMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForwardMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForwardMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForwardMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetForwardMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetForwardMsgResp& from) {
    GetForwardMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetForwardMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetForwardMsgResp";
  }
  protected:
  explicit GetForwardMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetForwardMsgResp_Messages Messages;

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .cqhttp.GetForwardMsgResp.Messages messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::cqhttp::GetForwardMsgResp_Messages* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetForwardMsgResp_Messages >*
      mutable_messages();
  private:
  const ::cqhttp::GetForwardMsgResp_Messages& _internal_messages(int index) const;
  ::cqhttp::GetForwardMsgResp_Messages* _internal_add_messages();
  public:
  const ::cqhttp::GetForwardMsgResp_Messages& messages(int index) const;
  ::cqhttp::GetForwardMsgResp_Messages* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetForwardMsgResp_Messages >&
      messages() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetForwardMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetForwardMsgResp_Messages > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetImage_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetImage.Params) */ {
 public:
  inline GetImage_Params() : GetImage_Params(nullptr) {}
  ~GetImage_Params() override;
  explicit PROTOBUF_CONSTEXPR GetImage_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImage_Params(const GetImage_Params& from);
  GetImage_Params(GetImage_Params&& from) noexcept
    : GetImage_Params() {
    *this = ::std::move(from);
  }

  inline GetImage_Params& operator=(const GetImage_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImage_Params& operator=(GetImage_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImage_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImage_Params* internal_default_instance() {
    return reinterpret_cast<const GetImage_Params*>(
               &_GetImage_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetImage_Params& a, GetImage_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImage_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImage_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImage_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImage_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImage_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetImage_Params& from) {
    GetImage_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImage_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetImage.Params";
  }
  protected:
  explicit GetImage_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetImage.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetImage) */ {
 public:
  inline GetImage() : GetImage(nullptr) {}
  ~GetImage() override;
  explicit PROTOBUF_CONSTEXPR GetImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImage(const GetImage& from);
  GetImage(GetImage&& from) noexcept
    : GetImage() {
    *this = ::std::move(from);
  }

  inline GetImage& operator=(const GetImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImage& operator=(GetImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImage* internal_default_instance() {
    return reinterpret_cast<const GetImage*>(
               &_GetImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetImage& a, GetImage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetImage& from) {
    GetImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetImage";
  }
  protected:
  explicit GetImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetImage_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetImage.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetImage_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetImage_Params* release_params();
  ::cqhttp::GetImage_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetImage_Params* params);
  private:
  const ::cqhttp::GetImage_Params& _internal_params() const;
  ::cqhttp::GetImage_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetImage_Params* params);
  ::cqhttp::GetImage_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetImage_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetImageResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetImageResp) */ {
 public:
  inline GetImageResp() : GetImageResp(nullptr) {}
  ~GetImageResp() override;
  explicit PROTOBUF_CONSTEXPR GetImageResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImageResp(const GetImageResp& from);
  GetImageResp(GetImageResp&& from) noexcept
    : GetImageResp() {
    *this = ::std::move(from);
  }

  inline GetImageResp& operator=(const GetImageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageResp& operator=(GetImageResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageResp* internal_default_instance() {
    return reinterpret_cast<const GetImageResp*>(
               &_GetImageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetImageResp& a, GetImageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImageResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImageResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetImageResp& from) {
    GetImageResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetImageResp";
  }
  protected:
  explicit GetImageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kUrlFieldNumber = 3,
    kSizeFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int32 size = 1;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetImageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    int32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class MarkMsgAsRead_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.MarkMsgAsRead.Params) */ {
 public:
  inline MarkMsgAsRead_Params() : MarkMsgAsRead_Params(nullptr) {}
  ~MarkMsgAsRead_Params() override;
  explicit PROTOBUF_CONSTEXPR MarkMsgAsRead_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkMsgAsRead_Params(const MarkMsgAsRead_Params& from);
  MarkMsgAsRead_Params(MarkMsgAsRead_Params&& from) noexcept
    : MarkMsgAsRead_Params() {
    *this = ::std::move(from);
  }

  inline MarkMsgAsRead_Params& operator=(const MarkMsgAsRead_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkMsgAsRead_Params& operator=(MarkMsgAsRead_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkMsgAsRead_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkMsgAsRead_Params* internal_default_instance() {
    return reinterpret_cast<const MarkMsgAsRead_Params*>(
               &_MarkMsgAsRead_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MarkMsgAsRead_Params& a, MarkMsgAsRead_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkMsgAsRead_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkMsgAsRead_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkMsgAsRead_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkMsgAsRead_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkMsgAsRead_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarkMsgAsRead_Params& from) {
    MarkMsgAsRead_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkMsgAsRead_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.MarkMsgAsRead.Params";
  }
  protected:
  explicit MarkMsgAsRead_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.MarkMsgAsRead.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class MarkMsgAsRead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.MarkMsgAsRead) */ {
 public:
  inline MarkMsgAsRead() : MarkMsgAsRead(nullptr) {}
  ~MarkMsgAsRead() override;
  explicit PROTOBUF_CONSTEXPR MarkMsgAsRead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkMsgAsRead(const MarkMsgAsRead& from);
  MarkMsgAsRead(MarkMsgAsRead&& from) noexcept
    : MarkMsgAsRead() {
    *this = ::std::move(from);
  }

  inline MarkMsgAsRead& operator=(const MarkMsgAsRead& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkMsgAsRead& operator=(MarkMsgAsRead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkMsgAsRead& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkMsgAsRead* internal_default_instance() {
    return reinterpret_cast<const MarkMsgAsRead*>(
               &_MarkMsgAsRead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MarkMsgAsRead& a, MarkMsgAsRead& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkMsgAsRead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkMsgAsRead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkMsgAsRead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkMsgAsRead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkMsgAsRead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarkMsgAsRead& from) {
    MarkMsgAsRead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkMsgAsRead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.MarkMsgAsRead";
  }
  protected:
  explicit MarkMsgAsRead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MarkMsgAsRead_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.MarkMsgAsRead.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::MarkMsgAsRead_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::MarkMsgAsRead_Params* release_params();
  ::cqhttp::MarkMsgAsRead_Params* mutable_params();
  void set_allocated_params(::cqhttp::MarkMsgAsRead_Params* params);
  private:
  const ::cqhttp::MarkMsgAsRead_Params& _internal_params() const;
  ::cqhttp::MarkMsgAsRead_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::MarkMsgAsRead_Params* params);
  ::cqhttp::MarkMsgAsRead_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.MarkMsgAsRead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::MarkMsgAsRead_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupKick_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupKick.Params) */ {
 public:
  inline SetGroupKick_Params() : SetGroupKick_Params(nullptr) {}
  ~SetGroupKick_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupKick_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupKick_Params(const SetGroupKick_Params& from);
  SetGroupKick_Params(SetGroupKick_Params&& from) noexcept
    : SetGroupKick_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupKick_Params& operator=(const SetGroupKick_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupKick_Params& operator=(SetGroupKick_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupKick_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupKick_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupKick_Params*>(
               &_SetGroupKick_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SetGroupKick_Params& a, SetGroupKick_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupKick_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupKick_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupKick_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupKick_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupKick_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupKick_Params& from) {
    SetGroupKick_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupKick_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupKick.Params";
  }
  protected:
  explicit SetGroupKick_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kRejectAddRequestFieldNumber = 3,
  };
  // int64 message_id = 1;
  void clear_message_id();
  int64_t message_id() const;
  void set_message_id(int64_t value);
  private:
  int64_t _internal_message_id() const;
  void _internal_set_message_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // bool reject_add_request = 3;
  void clear_reject_add_request();
  bool reject_add_request() const;
  void set_reject_add_request(bool value);
  private:
  bool _internal_reject_add_request() const;
  void _internal_set_reject_add_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupKick.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t message_id_;
    int64_t user_id_;
    bool reject_add_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupKick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupKick) */ {
 public:
  inline SetGroupKick() : SetGroupKick(nullptr) {}
  ~SetGroupKick() override;
  explicit PROTOBUF_CONSTEXPR SetGroupKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupKick(const SetGroupKick& from);
  SetGroupKick(SetGroupKick&& from) noexcept
    : SetGroupKick() {
    *this = ::std::move(from);
  }

  inline SetGroupKick& operator=(const SetGroupKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupKick& operator=(SetGroupKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupKick* internal_default_instance() {
    return reinterpret_cast<const SetGroupKick*>(
               &_SetGroupKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetGroupKick& a, SetGroupKick& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupKick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupKick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupKick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupKick& from) {
    SetGroupKick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupKick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupKick";
  }
  protected:
  explicit SetGroupKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupKick_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupKick.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupKick_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupKick_Params* release_params();
  ::cqhttp::SetGroupKick_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupKick_Params* params);
  private:
  const ::cqhttp::SetGroupKick_Params& _internal_params() const;
  ::cqhttp::SetGroupKick_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupKick_Params* params);
  ::cqhttp::SetGroupKick_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupKick_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupBan_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupBan.Params) */ {
 public:
  inline SetGroupBan_Params() : SetGroupBan_Params(nullptr) {}
  ~SetGroupBan_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupBan_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupBan_Params(const SetGroupBan_Params& from);
  SetGroupBan_Params(SetGroupBan_Params&& from) noexcept
    : SetGroupBan_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupBan_Params& operator=(const SetGroupBan_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupBan_Params& operator=(SetGroupBan_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupBan_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupBan_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupBan_Params*>(
               &_SetGroupBan_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetGroupBan_Params& a, SetGroupBan_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupBan_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupBan_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupBan_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupBan_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupBan_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupBan_Params& from) {
    SetGroupBan_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupBan_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupBan.Params";
  }
  protected:
  explicit SetGroupBan_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 duration = 3;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupBan.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    int64_t user_id_;
    int32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupBan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupBan) */ {
 public:
  inline SetGroupBan() : SetGroupBan(nullptr) {}
  ~SetGroupBan() override;
  explicit PROTOBUF_CONSTEXPR SetGroupBan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupBan(const SetGroupBan& from);
  SetGroupBan(SetGroupBan&& from) noexcept
    : SetGroupBan() {
    *this = ::std::move(from);
  }

  inline SetGroupBan& operator=(const SetGroupBan& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupBan& operator=(SetGroupBan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupBan& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupBan* internal_default_instance() {
    return reinterpret_cast<const SetGroupBan*>(
               &_SetGroupBan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SetGroupBan& a, SetGroupBan& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupBan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupBan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupBan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupBan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupBan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupBan& from) {
    SetGroupBan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupBan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupBan";
  }
  protected:
  explicit SetGroupBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupBan_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupBan.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupBan_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupBan_Params* release_params();
  ::cqhttp::SetGroupBan_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupBan_Params* params);
  private:
  const ::cqhttp::SetGroupBan_Params& _internal_params() const;
  ::cqhttp::SetGroupBan_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupBan_Params* params);
  ::cqhttp::SetGroupBan_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupBan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupBan_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousBan_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAnonymousBan.Params) */ {
 public:
  inline SetGroupAnonymousBan_Params() : SetGroupAnonymousBan_Params(nullptr) {}
  ~SetGroupAnonymousBan_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAnonymousBan_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAnonymousBan_Params(const SetGroupAnonymousBan_Params& from);
  SetGroupAnonymousBan_Params(SetGroupAnonymousBan_Params&& from) noexcept
    : SetGroupAnonymousBan_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousBan_Params& operator=(const SetGroupAnonymousBan_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousBan_Params& operator=(SetGroupAnonymousBan_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAnonymousBan_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAnonymousBan_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousBan_Params*>(
               &_SetGroupAnonymousBan_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetGroupAnonymousBan_Params& a, SetGroupAnonymousBan_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousBan_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousBan_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAnonymousBan_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAnonymousBan_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAnonymousBan_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAnonymousBan_Params& from) {
    SetGroupAnonymousBan_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousBan_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAnonymousBan.Params";
  }
  protected:
  explicit SetGroupAnonymousBan_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnonymousFlagFieldNumber = 3,
    kAnonymousFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kDurationFieldNumber = 4,
  };
  // string anonymous_flag = 3;
  void clear_anonymous_flag();
  const std::string& anonymous_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anonymous_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anonymous_flag();
  PROTOBUF_NODISCARD std::string* release_anonymous_flag();
  void set_allocated_anonymous_flag(std::string* anonymous_flag);
  private:
  const std::string& _internal_anonymous_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anonymous_flag(const std::string& value);
  std::string* _internal_mutable_anonymous_flag();
  public:

  // .cqhttp.Anonymous anonymous = 2;
  bool has_anonymous() const;
  private:
  bool _internal_has_anonymous() const;
  public:
  void clear_anonymous();
  const ::cqhttp::Anonymous& anonymous() const;
  PROTOBUF_NODISCARD ::cqhttp::Anonymous* release_anonymous();
  ::cqhttp::Anonymous* mutable_anonymous();
  void set_allocated_anonymous(::cqhttp::Anonymous* anonymous);
  private:
  const ::cqhttp::Anonymous& _internal_anonymous() const;
  ::cqhttp::Anonymous* _internal_mutable_anonymous();
  public:
  void unsafe_arena_set_allocated_anonymous(
      ::cqhttp::Anonymous* anonymous);
  ::cqhttp::Anonymous* unsafe_arena_release_anonymous();

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int32 duration = 4;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAnonymousBan.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anonymous_flag_;
    ::cqhttp::Anonymous* anonymous_;
    int64_t group_id_;
    int32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousBan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAnonymousBan) */ {
 public:
  inline SetGroupAnonymousBan() : SetGroupAnonymousBan(nullptr) {}
  ~SetGroupAnonymousBan() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAnonymousBan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAnonymousBan(const SetGroupAnonymousBan& from);
  SetGroupAnonymousBan(SetGroupAnonymousBan&& from) noexcept
    : SetGroupAnonymousBan() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousBan& operator=(const SetGroupAnonymousBan& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousBan& operator=(SetGroupAnonymousBan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAnonymousBan& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAnonymousBan* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousBan*>(
               &_SetGroupAnonymousBan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SetGroupAnonymousBan& a, SetGroupAnonymousBan& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousBan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousBan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAnonymousBan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAnonymousBan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAnonymousBan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAnonymousBan& from) {
    SetGroupAnonymousBan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousBan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAnonymousBan";
  }
  protected:
  explicit SetGroupAnonymousBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupAnonymousBan_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupAnonymousBan.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupAnonymousBan_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupAnonymousBan_Params* release_params();
  ::cqhttp::SetGroupAnonymousBan_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupAnonymousBan_Params* params);
  private:
  const ::cqhttp::SetGroupAnonymousBan_Params& _internal_params() const;
  ::cqhttp::SetGroupAnonymousBan_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupAnonymousBan_Params* params);
  ::cqhttp::SetGroupAnonymousBan_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAnonymousBan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupAnonymousBan_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupWholeBan_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupWholeBan.Params) */ {
 public:
  inline SetGroupWholeBan_Params() : SetGroupWholeBan_Params(nullptr) {}
  ~SetGroupWholeBan_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupWholeBan_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupWholeBan_Params(const SetGroupWholeBan_Params& from);
  SetGroupWholeBan_Params(SetGroupWholeBan_Params&& from) noexcept
    : SetGroupWholeBan_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupWholeBan_Params& operator=(const SetGroupWholeBan_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupWholeBan_Params& operator=(SetGroupWholeBan_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupWholeBan_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupWholeBan_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupWholeBan_Params*>(
               &_SetGroupWholeBan_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SetGroupWholeBan_Params& a, SetGroupWholeBan_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupWholeBan_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupWholeBan_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupWholeBan_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupWholeBan_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupWholeBan_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupWholeBan_Params& from) {
    SetGroupWholeBan_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupWholeBan_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupWholeBan.Params";
  }
  protected:
  explicit SetGroupWholeBan_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupWholeBan.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupWholeBan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupWholeBan) */ {
 public:
  inline SetGroupWholeBan() : SetGroupWholeBan(nullptr) {}
  ~SetGroupWholeBan() override;
  explicit PROTOBUF_CONSTEXPR SetGroupWholeBan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupWholeBan(const SetGroupWholeBan& from);
  SetGroupWholeBan(SetGroupWholeBan&& from) noexcept
    : SetGroupWholeBan() {
    *this = ::std::move(from);
  }

  inline SetGroupWholeBan& operator=(const SetGroupWholeBan& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupWholeBan& operator=(SetGroupWholeBan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupWholeBan& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupWholeBan* internal_default_instance() {
    return reinterpret_cast<const SetGroupWholeBan*>(
               &_SetGroupWholeBan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SetGroupWholeBan& a, SetGroupWholeBan& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupWholeBan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupWholeBan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupWholeBan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupWholeBan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupWholeBan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupWholeBan& from) {
    SetGroupWholeBan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupWholeBan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupWholeBan";
  }
  protected:
  explicit SetGroupWholeBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupWholeBan_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupWholeBan.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupWholeBan_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupWholeBan_Params* release_params();
  ::cqhttp::SetGroupWholeBan_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupWholeBan_Params* params);
  private:
  const ::cqhttp::SetGroupWholeBan_Params& _internal_params() const;
  ::cqhttp::SetGroupWholeBan_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupWholeBan_Params* params);
  ::cqhttp::SetGroupWholeBan_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupWholeBan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupWholeBan_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAdmin_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAdmin.Params) */ {
 public:
  inline SetGroupAdmin_Params() : SetGroupAdmin_Params(nullptr) {}
  ~SetGroupAdmin_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAdmin_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAdmin_Params(const SetGroupAdmin_Params& from);
  SetGroupAdmin_Params(SetGroupAdmin_Params&& from) noexcept
    : SetGroupAdmin_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupAdmin_Params& operator=(const SetGroupAdmin_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAdmin_Params& operator=(SetGroupAdmin_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAdmin_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAdmin_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupAdmin_Params*>(
               &_SetGroupAdmin_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SetGroupAdmin_Params& a, SetGroupAdmin_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAdmin_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAdmin_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAdmin_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAdmin_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAdmin_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAdmin_Params& from) {
    SetGroupAdmin_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAdmin_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAdmin.Params";
  }
  protected:
  explicit SetGroupAdmin_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kEnableFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // bool enable = 3;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAdmin.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    int64_t user_id_;
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAdmin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAdmin) */ {
 public:
  inline SetGroupAdmin() : SetGroupAdmin(nullptr) {}
  ~SetGroupAdmin() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAdmin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAdmin(const SetGroupAdmin& from);
  SetGroupAdmin(SetGroupAdmin&& from) noexcept
    : SetGroupAdmin() {
    *this = ::std::move(from);
  }

  inline SetGroupAdmin& operator=(const SetGroupAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAdmin& operator=(SetGroupAdmin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAdmin& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAdmin* internal_default_instance() {
    return reinterpret_cast<const SetGroupAdmin*>(
               &_SetGroupAdmin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetGroupAdmin& a, SetGroupAdmin& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAdmin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAdmin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAdmin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAdmin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAdmin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAdmin& from) {
    SetGroupAdmin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAdmin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAdmin";
  }
  protected:
  explicit SetGroupAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupAdmin_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupAdmin.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupAdmin_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupAdmin_Params* release_params();
  ::cqhttp::SetGroupAdmin_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupAdmin_Params* params);
  private:
  const ::cqhttp::SetGroupAdmin_Params& _internal_params() const;
  ::cqhttp::SetGroupAdmin_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupAdmin_Params* params);
  ::cqhttp::SetGroupAdmin_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAdmin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupAdmin_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymous_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAnonymous.Params) */ {
 public:
  inline SetGroupAnonymous_Params() : SetGroupAnonymous_Params(nullptr) {}
  ~SetGroupAnonymous_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAnonymous_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAnonymous_Params(const SetGroupAnonymous_Params& from);
  SetGroupAnonymous_Params(SetGroupAnonymous_Params&& from) noexcept
    : SetGroupAnonymous_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymous_Params& operator=(const SetGroupAnonymous_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymous_Params& operator=(SetGroupAnonymous_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAnonymous_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAnonymous_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymous_Params*>(
               &_SetGroupAnonymous_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetGroupAnonymous_Params& a, SetGroupAnonymous_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymous_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymous_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAnonymous_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAnonymous_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAnonymous_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAnonymous_Params& from) {
    SetGroupAnonymous_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymous_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAnonymous.Params";
  }
  protected:
  explicit SetGroupAnonymous_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAnonymous.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymous final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAnonymous) */ {
 public:
  inline SetGroupAnonymous() : SetGroupAnonymous(nullptr) {}
  ~SetGroupAnonymous() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAnonymous(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAnonymous(const SetGroupAnonymous& from);
  SetGroupAnonymous(SetGroupAnonymous&& from) noexcept
    : SetGroupAnonymous() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymous& operator=(const SetGroupAnonymous& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymous& operator=(SetGroupAnonymous&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAnonymous& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAnonymous* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymous*>(
               &_SetGroupAnonymous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SetGroupAnonymous& a, SetGroupAnonymous& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymous* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymous* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAnonymous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAnonymous>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAnonymous& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAnonymous& from) {
    SetGroupAnonymous::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymous* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAnonymous";
  }
  protected:
  explicit SetGroupAnonymous(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupAnonymous_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupAnonymous.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupAnonymous_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupAnonymous_Params* release_params();
  ::cqhttp::SetGroupAnonymous_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupAnonymous_Params* params);
  private:
  const ::cqhttp::SetGroupAnonymous_Params& _internal_params() const;
  ::cqhttp::SetGroupAnonymous_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupAnonymous_Params* params);
  ::cqhttp::SetGroupAnonymous_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAnonymous)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupAnonymous_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupCard_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupCard.Params) */ {
 public:
  inline SetGroupCard_Params() : SetGroupCard_Params(nullptr) {}
  ~SetGroupCard_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupCard_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupCard_Params(const SetGroupCard_Params& from);
  SetGroupCard_Params(SetGroupCard_Params&& from) noexcept
    : SetGroupCard_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupCard_Params& operator=(const SetGroupCard_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupCard_Params& operator=(SetGroupCard_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupCard_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupCard_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupCard_Params*>(
               &_SetGroupCard_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SetGroupCard_Params& a, SetGroupCard_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupCard_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupCard_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupCard_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupCard_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupCard_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupCard_Params& from) {
    SetGroupCard_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupCard_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupCard.Params";
  }
  protected:
  explicit SetGroupCard_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string card = 3;
  void clear_card();
  const std::string& card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card();
  PROTOBUF_NODISCARD std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupCard.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
    int64_t group_id_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupCard) */ {
 public:
  inline SetGroupCard() : SetGroupCard(nullptr) {}
  ~SetGroupCard() override;
  explicit PROTOBUF_CONSTEXPR SetGroupCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupCard(const SetGroupCard& from);
  SetGroupCard(SetGroupCard&& from) noexcept
    : SetGroupCard() {
    *this = ::std::move(from);
  }

  inline SetGroupCard& operator=(const SetGroupCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupCard& operator=(SetGroupCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupCard* internal_default_instance() {
    return reinterpret_cast<const SetGroupCard*>(
               &_SetGroupCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SetGroupCard& a, SetGroupCard& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupCard& from) {
    SetGroupCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupCard";
  }
  protected:
  explicit SetGroupCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupCard_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupCard.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupCard_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupCard_Params* release_params();
  ::cqhttp::SetGroupCard_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupCard_Params* params);
  private:
  const ::cqhttp::SetGroupCard_Params& _internal_params() const;
  ::cqhttp::SetGroupCard_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupCard_Params* params);
  ::cqhttp::SetGroupCard_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupCard_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupName_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupName.Params) */ {
 public:
  inline SetGroupName_Params() : SetGroupName_Params(nullptr) {}
  ~SetGroupName_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupName_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupName_Params(const SetGroupName_Params& from);
  SetGroupName_Params(SetGroupName_Params&& from) noexcept
    : SetGroupName_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupName_Params& operator=(const SetGroupName_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupName_Params& operator=(SetGroupName_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupName_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupName_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupName_Params*>(
               &_SetGroupName_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SetGroupName_Params& a, SetGroupName_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupName_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupName_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupName_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupName_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupName_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupName_Params& from) {
    SetGroupName_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupName_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupName.Params";
  }
  protected:
  explicit SetGroupName_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupName.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupName) */ {
 public:
  inline SetGroupName() : SetGroupName(nullptr) {}
  ~SetGroupName() override;
  explicit PROTOBUF_CONSTEXPR SetGroupName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupName(const SetGroupName& from);
  SetGroupName(SetGroupName&& from) noexcept
    : SetGroupName() {
    *this = ::std::move(from);
  }

  inline SetGroupName& operator=(const SetGroupName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupName& operator=(SetGroupName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupName* internal_default_instance() {
    return reinterpret_cast<const SetGroupName*>(
               &_SetGroupName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SetGroupName& a, SetGroupName& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupName& from) {
    SetGroupName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupName";
  }
  protected:
  explicit SetGroupName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupName_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupName.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupName_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupName_Params* release_params();
  ::cqhttp::SetGroupName_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupName_Params* params);
  private:
  const ::cqhttp::SetGroupName_Params& _internal_params() const;
  ::cqhttp::SetGroupName_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupName_Params* params);
  ::cqhttp::SetGroupName_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupName_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupLeave_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupLeave.Params) */ {
 public:
  inline SetGroupLeave_Params() : SetGroupLeave_Params(nullptr) {}
  ~SetGroupLeave_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupLeave_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupLeave_Params(const SetGroupLeave_Params& from);
  SetGroupLeave_Params(SetGroupLeave_Params&& from) noexcept
    : SetGroupLeave_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupLeave_Params& operator=(const SetGroupLeave_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupLeave_Params& operator=(SetGroupLeave_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupLeave_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupLeave_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupLeave_Params*>(
               &_SetGroupLeave_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SetGroupLeave_Params& a, SetGroupLeave_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupLeave_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupLeave_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupLeave_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupLeave_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupLeave_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupLeave_Params& from) {
    SetGroupLeave_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupLeave_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupLeave.Params";
  }
  protected:
  explicit SetGroupLeave_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kIsDismissFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool is_dismiss = 2;
  void clear_is_dismiss();
  bool is_dismiss() const;
  void set_is_dismiss(bool value);
  private:
  bool _internal_is_dismiss() const;
  void _internal_set_is_dismiss(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupLeave.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    bool is_dismiss_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupLeave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupLeave) */ {
 public:
  inline SetGroupLeave() : SetGroupLeave(nullptr) {}
  ~SetGroupLeave() override;
  explicit PROTOBUF_CONSTEXPR SetGroupLeave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupLeave(const SetGroupLeave& from);
  SetGroupLeave(SetGroupLeave&& from) noexcept
    : SetGroupLeave() {
    *this = ::std::move(from);
  }

  inline SetGroupLeave& operator=(const SetGroupLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupLeave& operator=(SetGroupLeave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupLeave& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupLeave* internal_default_instance() {
    return reinterpret_cast<const SetGroupLeave*>(
               &_SetGroupLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SetGroupLeave& a, SetGroupLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupLeave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupLeave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupLeave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupLeave& from) {
    SetGroupLeave::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupLeave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupLeave";
  }
  protected:
  explicit SetGroupLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupLeave_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupLeave.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupLeave_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupLeave_Params* release_params();
  ::cqhttp::SetGroupLeave_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupLeave_Params* params);
  private:
  const ::cqhttp::SetGroupLeave_Params& _internal_params() const;
  ::cqhttp::SetGroupLeave_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupLeave_Params* params);
  ::cqhttp::SetGroupLeave_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupLeave_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupSpecialTitle_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupSpecialTitle.Params) */ {
 public:
  inline SetGroupSpecialTitle_Params() : SetGroupSpecialTitle_Params(nullptr) {}
  ~SetGroupSpecialTitle_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupSpecialTitle_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupSpecialTitle_Params(const SetGroupSpecialTitle_Params& from);
  SetGroupSpecialTitle_Params(SetGroupSpecialTitle_Params&& from) noexcept
    : SetGroupSpecialTitle_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupSpecialTitle_Params& operator=(const SetGroupSpecialTitle_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupSpecialTitle_Params& operator=(SetGroupSpecialTitle_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupSpecialTitle_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupSpecialTitle_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupSpecialTitle_Params*>(
               &_SetGroupSpecialTitle_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SetGroupSpecialTitle_Params& a, SetGroupSpecialTitle_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupSpecialTitle_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupSpecialTitle_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupSpecialTitle_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupSpecialTitle_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupSpecialTitle_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupSpecialTitle_Params& from) {
    SetGroupSpecialTitle_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupSpecialTitle_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupSpecialTitle.Params";
  }
  protected:
  explicit SetGroupSpecialTitle_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialTitleFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kDurationFieldNumber = 4,
  };
  // string special_title = 3;
  void clear_special_title();
  const std::string& special_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_special_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_special_title();
  PROTOBUF_NODISCARD std::string* release_special_title();
  void set_allocated_special_title(std::string* special_title);
  private:
  const std::string& _internal_special_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_special_title(const std::string& value);
  std::string* _internal_mutable_special_title();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 duration = 4;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupSpecialTitle.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr special_title_;
    int64_t group_id_;
    int64_t user_id_;
    int32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupSpecialTitle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupSpecialTitle) */ {
 public:
  inline SetGroupSpecialTitle() : SetGroupSpecialTitle(nullptr) {}
  ~SetGroupSpecialTitle() override;
  explicit PROTOBUF_CONSTEXPR SetGroupSpecialTitle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupSpecialTitle(const SetGroupSpecialTitle& from);
  SetGroupSpecialTitle(SetGroupSpecialTitle&& from) noexcept
    : SetGroupSpecialTitle() {
    *this = ::std::move(from);
  }

  inline SetGroupSpecialTitle& operator=(const SetGroupSpecialTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupSpecialTitle& operator=(SetGroupSpecialTitle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupSpecialTitle& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupSpecialTitle* internal_default_instance() {
    return reinterpret_cast<const SetGroupSpecialTitle*>(
               &_SetGroupSpecialTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SetGroupSpecialTitle& a, SetGroupSpecialTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupSpecialTitle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupSpecialTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupSpecialTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupSpecialTitle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupSpecialTitle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupSpecialTitle& from) {
    SetGroupSpecialTitle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupSpecialTitle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupSpecialTitle";
  }
  protected:
  explicit SetGroupSpecialTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupSpecialTitle_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupSpecialTitle.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupSpecialTitle_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupSpecialTitle_Params* release_params();
  ::cqhttp::SetGroupSpecialTitle_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupSpecialTitle_Params* params);
  private:
  const ::cqhttp::SetGroupSpecialTitle_Params& _internal_params() const;
  ::cqhttp::SetGroupSpecialTitle_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupSpecialTitle_Params* params);
  ::cqhttp::SetGroupSpecialTitle_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupSpecialTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupSpecialTitle_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupSign_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupSign.Params) */ {
 public:
  inline SendGroupSign_Params() : SendGroupSign_Params(nullptr) {}
  ~SendGroupSign_Params() override;
  explicit PROTOBUF_CONSTEXPR SendGroupSign_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupSign_Params(const SendGroupSign_Params& from);
  SendGroupSign_Params(SendGroupSign_Params&& from) noexcept
    : SendGroupSign_Params() {
    *this = ::std::move(from);
  }

  inline SendGroupSign_Params& operator=(const SendGroupSign_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupSign_Params& operator=(SendGroupSign_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupSign_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupSign_Params* internal_default_instance() {
    return reinterpret_cast<const SendGroupSign_Params*>(
               &_SendGroupSign_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SendGroupSign_Params& a, SendGroupSign_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupSign_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupSign_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupSign_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupSign_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupSign_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupSign_Params& from) {
    SendGroupSign_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupSign_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupSign.Params";
  }
  protected:
  explicit SendGroupSign_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupSign.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupSign) */ {
 public:
  inline SendGroupSign() : SendGroupSign(nullptr) {}
  ~SendGroupSign() override;
  explicit PROTOBUF_CONSTEXPR SendGroupSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupSign(const SendGroupSign& from);
  SendGroupSign(SendGroupSign&& from) noexcept
    : SendGroupSign() {
    *this = ::std::move(from);
  }

  inline SendGroupSign& operator=(const SendGroupSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupSign& operator=(SendGroupSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupSign* internal_default_instance() {
    return reinterpret_cast<const SendGroupSign*>(
               &_SendGroupSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SendGroupSign& a, SendGroupSign& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupSign& from) {
    SendGroupSign::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupSign";
  }
  protected:
  explicit SendGroupSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendGroupSign_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SendGroupSign.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendGroupSign_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendGroupSign_Params* release_params();
  ::cqhttp::SendGroupSign_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendGroupSign_Params* params);
  private:
  const ::cqhttp::SendGroupSign_Params& _internal_params() const;
  ::cqhttp::SendGroupSign_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendGroupSign_Params* params);
  ::cqhttp::SendGroupSign_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SendGroupSign_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetFriendAddRequest_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetFriendAddRequest.Params) */ {
 public:
  inline SetFriendAddRequest_Params() : SetFriendAddRequest_Params(nullptr) {}
  ~SetFriendAddRequest_Params() override;
  explicit PROTOBUF_CONSTEXPR SetFriendAddRequest_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetFriendAddRequest_Params(const SetFriendAddRequest_Params& from);
  SetFriendAddRequest_Params(SetFriendAddRequest_Params&& from) noexcept
    : SetFriendAddRequest_Params() {
    *this = ::std::move(from);
  }

  inline SetFriendAddRequest_Params& operator=(const SetFriendAddRequest_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFriendAddRequest_Params& operator=(SetFriendAddRequest_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetFriendAddRequest_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFriendAddRequest_Params* internal_default_instance() {
    return reinterpret_cast<const SetFriendAddRequest_Params*>(
               &_SetFriendAddRequest_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SetFriendAddRequest_Params& a, SetFriendAddRequest_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFriendAddRequest_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFriendAddRequest_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFriendAddRequest_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetFriendAddRequest_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetFriendAddRequest_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetFriendAddRequest_Params& from) {
    SetFriendAddRequest_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetFriendAddRequest_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetFriendAddRequest.Params";
  }
  protected:
  explicit SetFriendAddRequest_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kRemarkFieldNumber = 3,
    kApproveFieldNumber = 2,
  };
  // string flag = 1;
  void clear_flag();
  const std::string& flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag();
  PROTOBUF_NODISCARD std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // string remark = 3;
  void clear_remark();
  const std::string& remark() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remark(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // bool approve = 2;
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetFriendAddRequest.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
    bool approve_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetFriendAddRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetFriendAddRequest) */ {
 public:
  inline SetFriendAddRequest() : SetFriendAddRequest(nullptr) {}
  ~SetFriendAddRequest() override;
  explicit PROTOBUF_CONSTEXPR SetFriendAddRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetFriendAddRequest(const SetFriendAddRequest& from);
  SetFriendAddRequest(SetFriendAddRequest&& from) noexcept
    : SetFriendAddRequest() {
    *this = ::std::move(from);
  }

  inline SetFriendAddRequest& operator=(const SetFriendAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFriendAddRequest& operator=(SetFriendAddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetFriendAddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFriendAddRequest* internal_default_instance() {
    return reinterpret_cast<const SetFriendAddRequest*>(
               &_SetFriendAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SetFriendAddRequest& a, SetFriendAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFriendAddRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFriendAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFriendAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetFriendAddRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetFriendAddRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetFriendAddRequest& from) {
    SetFriendAddRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetFriendAddRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetFriendAddRequest";
  }
  protected:
  explicit SetFriendAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetFriendAddRequest_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetFriendAddRequest.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetFriendAddRequest_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetFriendAddRequest_Params* release_params();
  ::cqhttp::SetFriendAddRequest_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetFriendAddRequest_Params* params);
  private:
  const ::cqhttp::SetFriendAddRequest_Params& _internal_params() const;
  ::cqhttp::SetFriendAddRequest_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetFriendAddRequest_Params* params);
  ::cqhttp::SetFriendAddRequest_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetFriendAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetFriendAddRequest_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAddRequest_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAddRequest.Params) */ {
 public:
  inline SetGroupAddRequest_Params() : SetGroupAddRequest_Params(nullptr) {}
  ~SetGroupAddRequest_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAddRequest_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAddRequest_Params(const SetGroupAddRequest_Params& from);
  SetGroupAddRequest_Params(SetGroupAddRequest_Params&& from) noexcept
    : SetGroupAddRequest_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupAddRequest_Params& operator=(const SetGroupAddRequest_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAddRequest_Params& operator=(SetGroupAddRequest_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAddRequest_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAddRequest_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupAddRequest_Params*>(
               &_SetGroupAddRequest_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SetGroupAddRequest_Params& a, SetGroupAddRequest_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAddRequest_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAddRequest_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAddRequest_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAddRequest_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAddRequest_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAddRequest_Params& from) {
    SetGroupAddRequest_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAddRequest_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAddRequest.Params";
  }
  protected:
  explicit SetGroupAddRequest_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kReasonFieldNumber = 4,
    kApproveFieldNumber = 3,
  };
  // string flag = 1;
  void clear_flag();
  const std::string& flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag();
  PROTOBUF_NODISCARD std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // string sub_type = 2;
  void clear_sub_type();
  const std::string& sub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool approve = 3;
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAddRequest.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    bool approve_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAddRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupAddRequest) */ {
 public:
  inline SetGroupAddRequest() : SetGroupAddRequest(nullptr) {}
  ~SetGroupAddRequest() override;
  explicit PROTOBUF_CONSTEXPR SetGroupAddRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupAddRequest(const SetGroupAddRequest& from);
  SetGroupAddRequest(SetGroupAddRequest&& from) noexcept
    : SetGroupAddRequest() {
    *this = ::std::move(from);
  }

  inline SetGroupAddRequest& operator=(const SetGroupAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAddRequest& operator=(SetGroupAddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupAddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupAddRequest* internal_default_instance() {
    return reinterpret_cast<const SetGroupAddRequest*>(
               &_SetGroupAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SetGroupAddRequest& a, SetGroupAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAddRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupAddRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupAddRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupAddRequest& from) {
    SetGroupAddRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAddRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupAddRequest";
  }
  protected:
  explicit SetGroupAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupAddRequest_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupAddRequest.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupAddRequest_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupAddRequest_Params* release_params();
  ::cqhttp::SetGroupAddRequest_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupAddRequest_Params* params);
  private:
  const ::cqhttp::SetGroupAddRequest_Params& _internal_params() const;
  ::cqhttp::SetGroupAddRequest_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupAddRequest_Params* params);
  ::cqhttp::SetGroupAddRequest_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupAddRequest_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLoginInfo_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetLoginInfo.Params) */ {
 public:
  inline GetLoginInfo_Params() : GetLoginInfo_Params(nullptr) {}
  ~GetLoginInfo_Params() override;
  explicit PROTOBUF_CONSTEXPR GetLoginInfo_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoginInfo_Params(const GetLoginInfo_Params& from);
  GetLoginInfo_Params(GetLoginInfo_Params&& from) noexcept
    : GetLoginInfo_Params() {
    *this = ::std::move(from);
  }

  inline GetLoginInfo_Params& operator=(const GetLoginInfo_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoginInfo_Params& operator=(GetLoginInfo_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoginInfo_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoginInfo_Params* internal_default_instance() {
    return reinterpret_cast<const GetLoginInfo_Params*>(
               &_GetLoginInfo_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetLoginInfo_Params& a, GetLoginInfo_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoginInfo_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoginInfo_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoginInfo_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoginInfo_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoginInfo_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoginInfo_Params& from) {
    GetLoginInfo_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoginInfo_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetLoginInfo.Params";
  }
  protected:
  explicit GetLoginInfo_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetLoginInfo.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLoginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetLoginInfo) */ {
 public:
  inline GetLoginInfo() : GetLoginInfo(nullptr) {}
  ~GetLoginInfo() override;
  explicit PROTOBUF_CONSTEXPR GetLoginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoginInfo(const GetLoginInfo& from);
  GetLoginInfo(GetLoginInfo&& from) noexcept
    : GetLoginInfo() {
    *this = ::std::move(from);
  }

  inline GetLoginInfo& operator=(const GetLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoginInfo& operator=(GetLoginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoginInfo* internal_default_instance() {
    return reinterpret_cast<const GetLoginInfo*>(
               &_GetLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetLoginInfo& a, GetLoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoginInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoginInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoginInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoginInfo& from) {
    GetLoginInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoginInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetLoginInfo";
  }
  protected:
  explicit GetLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetLoginInfo_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetLoginInfo.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetLoginInfo_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetLoginInfo_Params* release_params();
  ::cqhttp::GetLoginInfo_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetLoginInfo_Params* params);
  private:
  const ::cqhttp::GetLoginInfo_Params& _internal_params() const;
  ::cqhttp::GetLoginInfo_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetLoginInfo_Params* params);
  ::cqhttp::GetLoginInfo_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetLoginInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetLoginInfo_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLoginInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetLoginInfoResp) */ {
 public:
  inline GetLoginInfoResp() : GetLoginInfoResp(nullptr) {}
  ~GetLoginInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetLoginInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoginInfoResp(const GetLoginInfoResp& from);
  GetLoginInfoResp(GetLoginInfoResp&& from) noexcept
    : GetLoginInfoResp() {
    *this = ::std::move(from);
  }

  inline GetLoginInfoResp& operator=(const GetLoginInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoginInfoResp& operator=(GetLoginInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoginInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoginInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetLoginInfoResp*>(
               &_GetLoginInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetLoginInfoResp& a, GetLoginInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoginInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoginInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoginInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoginInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoginInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoginInfoResp& from) {
    GetLoginInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoginInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetLoginInfoResp";
  }
  protected:
  explicit GetLoginInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetLoginInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class QiDianGetAccountInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.QiDianGetAccountInfo) */ {
 public:
  inline QiDianGetAccountInfo() : QiDianGetAccountInfo(nullptr) {}
  ~QiDianGetAccountInfo() override;
  explicit PROTOBUF_CONSTEXPR QiDianGetAccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QiDianGetAccountInfo(const QiDianGetAccountInfo& from);
  QiDianGetAccountInfo(QiDianGetAccountInfo&& from) noexcept
    : QiDianGetAccountInfo() {
    *this = ::std::move(from);
  }

  inline QiDianGetAccountInfo& operator=(const QiDianGetAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QiDianGetAccountInfo& operator=(QiDianGetAccountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QiDianGetAccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const QiDianGetAccountInfo* internal_default_instance() {
    return reinterpret_cast<const QiDianGetAccountInfo*>(
               &_QiDianGetAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(QiDianGetAccountInfo& a, QiDianGetAccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QiDianGetAccountInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QiDianGetAccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QiDianGetAccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QiDianGetAccountInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QiDianGetAccountInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QiDianGetAccountInfo& from) {
    QiDianGetAccountInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QiDianGetAccountInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.QiDianGetAccountInfo";
  }
  protected:
  explicit QiDianGetAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.QiDianGetAccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class QiDianGetAccountInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.QiDianGetAccountInfoResp) */ {
 public:
  inline QiDianGetAccountInfoResp() : QiDianGetAccountInfoResp(nullptr) {}
  ~QiDianGetAccountInfoResp() override;
  explicit PROTOBUF_CONSTEXPR QiDianGetAccountInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QiDianGetAccountInfoResp(const QiDianGetAccountInfoResp& from);
  QiDianGetAccountInfoResp(QiDianGetAccountInfoResp&& from) noexcept
    : QiDianGetAccountInfoResp() {
    *this = ::std::move(from);
  }

  inline QiDianGetAccountInfoResp& operator=(const QiDianGetAccountInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QiDianGetAccountInfoResp& operator=(QiDianGetAccountInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QiDianGetAccountInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const QiDianGetAccountInfoResp* internal_default_instance() {
    return reinterpret_cast<const QiDianGetAccountInfoResp*>(
               &_QiDianGetAccountInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(QiDianGetAccountInfoResp& a, QiDianGetAccountInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QiDianGetAccountInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QiDianGetAccountInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QiDianGetAccountInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QiDianGetAccountInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QiDianGetAccountInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QiDianGetAccountInfoResp& from) {
    QiDianGetAccountInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QiDianGetAccountInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.QiDianGetAccountInfoResp";
  }
  protected:
  explicit QiDianGetAccountInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtNameFieldNumber = 2,
    kMasterIdFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
  };
  // string ext_name = 2;
  void clear_ext_name();
  const std::string& ext_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ext_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ext_name();
  PROTOBUF_NODISCARD std::string* release_ext_name();
  void set_allocated_ext_name(std::string* ext_name);
  private:
  const std::string& _internal_ext_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ext_name(const std::string& value);
  std::string* _internal_mutable_ext_name();
  public:

  // int64 master_id = 1;
  void clear_master_id();
  int64_t master_id() const;
  void set_master_id(int64_t value);
  private:
  int64_t _internal_master_id() const;
  void _internal_set_master_id(int64_t value);
  public:

  // int64 create_time = 3;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.QiDianGetAccountInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_name_;
    int64_t master_id_;
    int64_t create_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetQQProfile_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetQQProfile.Params) */ {
 public:
  inline SetQQProfile_Params() : SetQQProfile_Params(nullptr) {}
  ~SetQQProfile_Params() override;
  explicit PROTOBUF_CONSTEXPR SetQQProfile_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetQQProfile_Params(const SetQQProfile_Params& from);
  SetQQProfile_Params(SetQQProfile_Params&& from) noexcept
    : SetQQProfile_Params() {
    *this = ::std::move(from);
  }

  inline SetQQProfile_Params& operator=(const SetQQProfile_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetQQProfile_Params& operator=(SetQQProfile_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetQQProfile_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetQQProfile_Params* internal_default_instance() {
    return reinterpret_cast<const SetQQProfile_Params*>(
               &_SetQQProfile_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SetQQProfile_Params& a, SetQQProfile_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetQQProfile_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetQQProfile_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetQQProfile_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetQQProfile_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetQQProfile_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetQQProfile_Params& from) {
    SetQQProfile_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetQQProfile_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetQQProfile.Params";
  }
  protected:
  explicit SetQQProfile_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kCompanyFieldNumber = 2,
    kEmailFieldNumber = 3,
    kCollegeFieldNumber = 4,
    kPersonalNoteFieldNumber = 5,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string company = 2;
  void clear_company();
  const std::string& company() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company();
  PROTOBUF_NODISCARD std::string* release_company();
  void set_allocated_company(std::string* company);
  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(const std::string& value);
  std::string* _internal_mutable_company();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string college = 4;
  void clear_college();
  const std::string& college() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_college(ArgT0&& arg0, ArgT... args);
  std::string* mutable_college();
  PROTOBUF_NODISCARD std::string* release_college();
  void set_allocated_college(std::string* college);
  private:
  const std::string& _internal_college() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_college(const std::string& value);
  std::string* _internal_mutable_college();
  public:

  // string personal_note = 5;
  void clear_personal_note();
  const std::string& personal_note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_personal_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_personal_note();
  PROTOBUF_NODISCARD std::string* release_personal_note();
  void set_allocated_personal_note(std::string* personal_note);
  private:
  const std::string& _internal_personal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_personal_note(const std::string& value);
  std::string* _internal_mutable_personal_note();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetQQProfile.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr college_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr personal_note_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetQQProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetQQProfile) */ {
 public:
  inline SetQQProfile() : SetQQProfile(nullptr) {}
  ~SetQQProfile() override;
  explicit PROTOBUF_CONSTEXPR SetQQProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetQQProfile(const SetQQProfile& from);
  SetQQProfile(SetQQProfile&& from) noexcept
    : SetQQProfile() {
    *this = ::std::move(from);
  }

  inline SetQQProfile& operator=(const SetQQProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetQQProfile& operator=(SetQQProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetQQProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetQQProfile* internal_default_instance() {
    return reinterpret_cast<const SetQQProfile*>(
               &_SetQQProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SetQQProfile& a, SetQQProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SetQQProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetQQProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetQQProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetQQProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetQQProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetQQProfile& from) {
    SetQQProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetQQProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetQQProfile";
  }
  protected:
  explicit SetQQProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetQQProfile_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetQQProfile.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetQQProfile_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetQQProfile_Params* release_params();
  ::cqhttp::SetQQProfile_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetQQProfile_Params* params);
  private:
  const ::cqhttp::SetQQProfile_Params& _internal_params() const;
  ::cqhttp::SetQQProfile_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetQQProfile_Params* params);
  ::cqhttp::SetQQProfile_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetQQProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetQQProfile_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStrangerInfo_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetStrangerInfo.Params) */ {
 public:
  inline GetStrangerInfo_Params() : GetStrangerInfo_Params(nullptr) {}
  ~GetStrangerInfo_Params() override;
  explicit PROTOBUF_CONSTEXPR GetStrangerInfo_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStrangerInfo_Params(const GetStrangerInfo_Params& from);
  GetStrangerInfo_Params(GetStrangerInfo_Params&& from) noexcept
    : GetStrangerInfo_Params() {
    *this = ::std::move(from);
  }

  inline GetStrangerInfo_Params& operator=(const GetStrangerInfo_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrangerInfo_Params& operator=(GetStrangerInfo_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStrangerInfo_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStrangerInfo_Params* internal_default_instance() {
    return reinterpret_cast<const GetStrangerInfo_Params*>(
               &_GetStrangerInfo_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetStrangerInfo_Params& a, GetStrangerInfo_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStrangerInfo_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrangerInfo_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStrangerInfo_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStrangerInfo_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStrangerInfo_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStrangerInfo_Params& from) {
    GetStrangerInfo_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStrangerInfo_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetStrangerInfo.Params";
  }
  protected:
  explicit GetStrangerInfo_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNoCacheFieldNumber = 2,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // bool no_cache = 2;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetStrangerInfo.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t user_id_;
    bool no_cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStrangerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetStrangerInfo) */ {
 public:
  inline GetStrangerInfo() : GetStrangerInfo(nullptr) {}
  ~GetStrangerInfo() override;
  explicit PROTOBUF_CONSTEXPR GetStrangerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStrangerInfo(const GetStrangerInfo& from);
  GetStrangerInfo(GetStrangerInfo&& from) noexcept
    : GetStrangerInfo() {
    *this = ::std::move(from);
  }

  inline GetStrangerInfo& operator=(const GetStrangerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrangerInfo& operator=(GetStrangerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStrangerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStrangerInfo* internal_default_instance() {
    return reinterpret_cast<const GetStrangerInfo*>(
               &_GetStrangerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetStrangerInfo& a, GetStrangerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStrangerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrangerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStrangerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStrangerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStrangerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStrangerInfo& from) {
    GetStrangerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStrangerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetStrangerInfo";
  }
  protected:
  explicit GetStrangerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetStrangerInfo_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetStrangerInfo.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetStrangerInfo_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetStrangerInfo_Params* release_params();
  ::cqhttp::GetStrangerInfo_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetStrangerInfo_Params* params);
  private:
  const ::cqhttp::GetStrangerInfo_Params& _internal_params() const;
  ::cqhttp::GetStrangerInfo_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetStrangerInfo_Params* params);
  ::cqhttp::GetStrangerInfo_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetStrangerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetStrangerInfo_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStrangerInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetStrangerInfoResp) */ {
 public:
  inline GetStrangerInfoResp() : GetStrangerInfoResp(nullptr) {}
  ~GetStrangerInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetStrangerInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStrangerInfoResp(const GetStrangerInfoResp& from);
  GetStrangerInfoResp(GetStrangerInfoResp&& from) noexcept
    : GetStrangerInfoResp() {
    *this = ::std::move(from);
  }

  inline GetStrangerInfoResp& operator=(const GetStrangerInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrangerInfoResp& operator=(GetStrangerInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStrangerInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStrangerInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetStrangerInfoResp*>(
               &_GetStrangerInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetStrangerInfoResp& a, GetStrangerInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStrangerInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrangerInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStrangerInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStrangerInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStrangerInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStrangerInfoResp& from) {
    GetStrangerInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStrangerInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetStrangerInfoResp";
  }
  protected:
  explicit GetStrangerInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kSexFieldNumber = 3,
    kQidFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 4,
    kLevelFieldNumber = 6,
    kLoginDaysFieldNumber = 7,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sex();
  PROTOBUF_NODISCARD std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string qid = 5;
  void clear_qid();
  const std::string& qid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qid();
  PROTOBUF_NODISCARD std::string* release_qid();
  void set_allocated_qid(std::string* qid);
  private:
  const std::string& _internal_qid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qid(const std::string& value);
  std::string* _internal_mutable_qid();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 age = 4;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 level = 6;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 login_days = 7;
  void clear_login_days();
  int32_t login_days() const;
  void set_login_days(int32_t value);
  private:
  int32_t _internal_login_days() const;
  void _internal_set_login_days(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetStrangerInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qid_;
    int64_t user_id_;
    int32_t age_;
    int32_t level_;
    int32_t login_days_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetFriendList) */ {
 public:
  inline GetFriendList() : GetFriendList(nullptr) {}
  ~GetFriendList() override;
  explicit PROTOBUF_CONSTEXPR GetFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendList(const GetFriendList& from);
  GetFriendList(GetFriendList&& from) noexcept
    : GetFriendList() {
    *this = ::std::move(from);
  }

  inline GetFriendList& operator=(const GetFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendList& operator=(GetFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendList* internal_default_instance() {
    return reinterpret_cast<const GetFriendList*>(
               &_GetFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetFriendList& a, GetFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendList& from) {
    GetFriendList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetFriendList";
  }
  protected:
  explicit GetFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResp_Friend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetFriendListResp.Friend) */ {
 public:
  inline GetFriendListResp_Friend() : GetFriendListResp_Friend(nullptr) {}
  ~GetFriendListResp_Friend() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListResp_Friend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListResp_Friend(const GetFriendListResp_Friend& from);
  GetFriendListResp_Friend(GetFriendListResp_Friend&& from) noexcept
    : GetFriendListResp_Friend() {
    *this = ::std::move(from);
  }

  inline GetFriendListResp_Friend& operator=(const GetFriendListResp_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResp_Friend& operator=(GetFriendListResp_Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListResp_Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListResp_Friend* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResp_Friend*>(
               &_GetFriendListResp_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetFriendListResp_Friend& a, GetFriendListResp_Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListResp_Friend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListResp_Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListResp_Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListResp_Friend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListResp_Friend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListResp_Friend& from) {
    GetFriendListResp_Friend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListResp_Friend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetFriendListResp.Friend";
  }
  protected:
  explicit GetFriendListResp_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kRemarkFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string remark = 3;
  void clear_remark();
  const std::string& remark() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remark(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetFriendListResp.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetFriendListResp) */ {
 public:
  inline GetFriendListResp() : GetFriendListResp(nullptr) {}
  ~GetFriendListResp() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListResp(const GetFriendListResp& from);
  GetFriendListResp(GetFriendListResp&& from) noexcept
    : GetFriendListResp() {
    *this = ::std::move(from);
  }

  inline GetFriendListResp& operator=(const GetFriendListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResp& operator=(GetFriendListResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListResp* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResp*>(
               &_GetFriendListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetFriendListResp& a, GetFriendListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListResp& from) {
    GetFriendListResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetFriendListResp";
  }
  protected:
  explicit GetFriendListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetFriendListResp_Friend Friend;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .cqhttp.GetFriendListResp.Friend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::cqhttp::GetFriendListResp_Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetFriendListResp_Friend >*
      mutable_friends();
  private:
  const ::cqhttp::GetFriendListResp_Friend& _internal_friends(int index) const;
  ::cqhttp::GetFriendListResp_Friend* _internal_add_friends();
  public:
  const ::cqhttp::GetFriendListResp_Friend& friends(int index) const;
  ::cqhttp::GetFriendListResp_Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetFriendListResp_Friend >&
      friends() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetFriendListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetFriendListResp_Friend > friends_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UnidirectionalFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UnidirectionalFriendList) */ {
 public:
  inline UnidirectionalFriendList() : UnidirectionalFriendList(nullptr) {}
  ~UnidirectionalFriendList() override;
  explicit PROTOBUF_CONSTEXPR UnidirectionalFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnidirectionalFriendList(const UnidirectionalFriendList& from);
  UnidirectionalFriendList(UnidirectionalFriendList&& from) noexcept
    : UnidirectionalFriendList() {
    *this = ::std::move(from);
  }

  inline UnidirectionalFriendList& operator=(const UnidirectionalFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnidirectionalFriendList& operator=(UnidirectionalFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnidirectionalFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnidirectionalFriendList* internal_default_instance() {
    return reinterpret_cast<const UnidirectionalFriendList*>(
               &_UnidirectionalFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(UnidirectionalFriendList& a, UnidirectionalFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(UnidirectionalFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnidirectionalFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnidirectionalFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnidirectionalFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnidirectionalFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnidirectionalFriendList& from) {
    UnidirectionalFriendList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnidirectionalFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UnidirectionalFriendList";
  }
  protected:
  explicit UnidirectionalFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.UnidirectionalFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UnidirectionalFriendListResp_Friend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UnidirectionalFriendListResp.Friend) */ {
 public:
  inline UnidirectionalFriendListResp_Friend() : UnidirectionalFriendListResp_Friend(nullptr) {}
  ~UnidirectionalFriendListResp_Friend() override;
  explicit PROTOBUF_CONSTEXPR UnidirectionalFriendListResp_Friend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnidirectionalFriendListResp_Friend(const UnidirectionalFriendListResp_Friend& from);
  UnidirectionalFriendListResp_Friend(UnidirectionalFriendListResp_Friend&& from) noexcept
    : UnidirectionalFriendListResp_Friend() {
    *this = ::std::move(from);
  }

  inline UnidirectionalFriendListResp_Friend& operator=(const UnidirectionalFriendListResp_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnidirectionalFriendListResp_Friend& operator=(UnidirectionalFriendListResp_Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnidirectionalFriendListResp_Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnidirectionalFriendListResp_Friend* internal_default_instance() {
    return reinterpret_cast<const UnidirectionalFriendListResp_Friend*>(
               &_UnidirectionalFriendListResp_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(UnidirectionalFriendListResp_Friend& a, UnidirectionalFriendListResp_Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(UnidirectionalFriendListResp_Friend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnidirectionalFriendListResp_Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnidirectionalFriendListResp_Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnidirectionalFriendListResp_Friend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnidirectionalFriendListResp_Friend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnidirectionalFriendListResp_Friend& from) {
    UnidirectionalFriendListResp_Friend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnidirectionalFriendListResp_Friend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UnidirectionalFriendListResp.Friend";
  }
  protected:
  explicit UnidirectionalFriendListResp_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kSourceFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string source = 3;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.UnidirectionalFriendListResp.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UnidirectionalFriendListResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UnidirectionalFriendListResp) */ {
 public:
  inline UnidirectionalFriendListResp() : UnidirectionalFriendListResp(nullptr) {}
  ~UnidirectionalFriendListResp() override;
  explicit PROTOBUF_CONSTEXPR UnidirectionalFriendListResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnidirectionalFriendListResp(const UnidirectionalFriendListResp& from);
  UnidirectionalFriendListResp(UnidirectionalFriendListResp&& from) noexcept
    : UnidirectionalFriendListResp() {
    *this = ::std::move(from);
  }

  inline UnidirectionalFriendListResp& operator=(const UnidirectionalFriendListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnidirectionalFriendListResp& operator=(UnidirectionalFriendListResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnidirectionalFriendListResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnidirectionalFriendListResp* internal_default_instance() {
    return reinterpret_cast<const UnidirectionalFriendListResp*>(
               &_UnidirectionalFriendListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(UnidirectionalFriendListResp& a, UnidirectionalFriendListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UnidirectionalFriendListResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnidirectionalFriendListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnidirectionalFriendListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnidirectionalFriendListResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnidirectionalFriendListResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnidirectionalFriendListResp& from) {
    UnidirectionalFriendListResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnidirectionalFriendListResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UnidirectionalFriendListResp";
  }
  protected:
  explicit UnidirectionalFriendListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnidirectionalFriendListResp_Friend Friend;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendFieldNumber = 1,
  };
  // repeated .cqhttp.UnidirectionalFriendListResp.Friend friend = 1;
  int friend__size() const;
  private:
  int _internal_friend__size() const;
  public:
  void clear_friend_();
  ::cqhttp::UnidirectionalFriendListResp_Friend* mutable_friend_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::UnidirectionalFriendListResp_Friend >*
      mutable_friend_();
  private:
  const ::cqhttp::UnidirectionalFriendListResp_Friend& _internal_friend_(int index) const;
  ::cqhttp::UnidirectionalFriendListResp_Friend* _internal_add_friend_();
  public:
  const ::cqhttp::UnidirectionalFriendListResp_Friend& friend_(int index) const;
  ::cqhttp::UnidirectionalFriendListResp_Friend* add_friend_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::UnidirectionalFriendListResp_Friend >&
      friend_() const;

  // @@protoc_insertion_point(class_scope:cqhttp.UnidirectionalFriendListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::UnidirectionalFriendListResp_Friend > friend__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriend_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteFriend.Params) */ {
 public:
  inline DeleteFriend_Params() : DeleteFriend_Params(nullptr) {}
  ~DeleteFriend_Params() override;
  explicit PROTOBUF_CONSTEXPR DeleteFriend_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFriend_Params(const DeleteFriend_Params& from);
  DeleteFriend_Params(DeleteFriend_Params&& from) noexcept
    : DeleteFriend_Params() {
    *this = ::std::move(from);
  }

  inline DeleteFriend_Params& operator=(const DeleteFriend_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriend_Params& operator=(DeleteFriend_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFriend_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFriend_Params* internal_default_instance() {
    return reinterpret_cast<const DeleteFriend_Params*>(
               &_DeleteFriend_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(DeleteFriend_Params& a, DeleteFriend_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriend_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFriend_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFriend_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteFriend_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFriend_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteFriend_Params& from) {
    DeleteFriend_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriend_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteFriend.Params";
  }
  protected:
  explicit DeleteFriend_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteFriend.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteFriend) */ {
 public:
  inline DeleteFriend() : DeleteFriend(nullptr) {}
  ~DeleteFriend() override;
  explicit PROTOBUF_CONSTEXPR DeleteFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFriend(const DeleteFriend& from);
  DeleteFriend(DeleteFriend&& from) noexcept
    : DeleteFriend() {
    *this = ::std::move(from);
  }

  inline DeleteFriend& operator=(const DeleteFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriend& operator=(DeleteFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFriend* internal_default_instance() {
    return reinterpret_cast<const DeleteFriend*>(
               &_DeleteFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(DeleteFriend& a, DeleteFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteFriend& from) {
    DeleteFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteFriend";
  }
  protected:
  explicit DeleteFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeleteFriend_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.DeleteFriend.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DeleteFriend_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DeleteFriend_Params* release_params();
  ::cqhttp::DeleteFriend_Params* mutable_params();
  void set_allocated_params(::cqhttp::DeleteFriend_Params* params);
  private:
  const ::cqhttp::DeleteFriend_Params& _internal_params() const;
  ::cqhttp::DeleteFriend_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DeleteFriend_Params* params);
  ::cqhttp::DeleteFriend_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::DeleteFriend_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfo_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupInfo.Params) */ {
 public:
  inline GetGroupInfo_Params() : GetGroupInfo_Params(nullptr) {}
  ~GetGroupInfo_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupInfo_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupInfo_Params(const GetGroupInfo_Params& from);
  GetGroupInfo_Params(GetGroupInfo_Params&& from) noexcept
    : GetGroupInfo_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupInfo_Params& operator=(const GetGroupInfo_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfo_Params& operator=(GetGroupInfo_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupInfo_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupInfo_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfo_Params*>(
               &_GetGroupInfo_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetGroupInfo_Params& a, GetGroupInfo_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfo_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupInfo_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupInfo_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupInfo_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupInfo_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupInfo_Params& from) {
    GetGroupInfo_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfo_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupInfo.Params";
  }
  protected:
  explicit GetGroupInfo_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kNoCacheFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool no_cache = 2;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupInfo.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    bool no_cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupInfo) */ {
 public:
  inline GetGroupInfo() : GetGroupInfo(nullptr) {}
  ~GetGroupInfo() override;
  explicit PROTOBUF_CONSTEXPR GetGroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupInfo(const GetGroupInfo& from);
  GetGroupInfo(GetGroupInfo&& from) noexcept
    : GetGroupInfo() {
    *this = ::std::move(from);
  }

  inline GetGroupInfo& operator=(const GetGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfo& operator=(GetGroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupInfo* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfo*>(
               &_GetGroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetGroupInfo& a, GetGroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupInfo& from) {
    GetGroupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupInfo";
  }
  protected:
  explicit GetGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupInfo_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupInfo.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupInfo_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupInfo_Params* release_params();
  ::cqhttp::GetGroupInfo_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupInfo_Params* params);
  private:
  const ::cqhttp::GetGroupInfo_Params& _internal_params() const;
  ::cqhttp::GetGroupInfo_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupInfo_Params* params);
  ::cqhttp::GetGroupInfo_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupInfo_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupInfoResp) */ {
 public:
  inline GetGroupInfoResp() : GetGroupInfoResp(nullptr) {}
  ~GetGroupInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupInfoResp(const GetGroupInfoResp& from);
  GetGroupInfoResp(GetGroupInfoResp&& from) noexcept
    : GetGroupInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupInfoResp& operator=(const GetGroupInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfoResp& operator=(GetGroupInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfoResp*>(
               &_GetGroupInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetGroupInfoResp& a, GetGroupInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupInfoResp& from) {
    GetGroupInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupInfoResp";
  }
  protected:
  explicit GetGroupInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupMemoFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kGroupCreateTimeFieldNumber = 4,
    kGroupLevelFieldNumber = 5,
    kMemberCountFieldNumber = 6,
    kMaxMemberCountFieldNumber = 7,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string group_memo = 3;
  void clear_group_memo();
  const std::string& group_memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_memo();
  PROTOBUF_NODISCARD std::string* release_group_memo();
  void set_allocated_group_memo(std::string* group_memo);
  private:
  const std::string& _internal_group_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_memo(const std::string& value);
  std::string* _internal_mutable_group_memo();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // uint32 group_create_time = 4;
  void clear_group_create_time();
  uint32_t group_create_time() const;
  void set_group_create_time(uint32_t value);
  private:
  uint32_t _internal_group_create_time() const;
  void _internal_set_group_create_time(uint32_t value);
  public:

  // uint32 group_level = 5;
  void clear_group_level();
  uint32_t group_level() const;
  void set_group_level(uint32_t value);
  private:
  uint32_t _internal_group_level() const;
  void _internal_set_group_level(uint32_t value);
  public:

  // int32 member_count = 6;
  void clear_member_count();
  int32_t member_count() const;
  void set_member_count(int32_t value);
  private:
  int32_t _internal_member_count() const;
  void _internal_set_member_count(int32_t value);
  public:

  // int32 max_member_count = 7;
  void clear_max_member_count();
  int32_t max_member_count() const;
  void set_max_member_count(int32_t value);
  private:
  int32_t _internal_max_member_count() const;
  void _internal_set_max_member_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_memo_;
    int64_t group_id_;
    uint32_t group_create_time_;
    uint32_t group_level_;
    int32_t member_count_;
    int32_t max_member_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupList_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupList.Params) */ {
 public:
  inline GetGroupList_Params() : GetGroupList_Params(nullptr) {}
  ~GetGroupList_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupList_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupList_Params(const GetGroupList_Params& from);
  GetGroupList_Params(GetGroupList_Params&& from) noexcept
    : GetGroupList_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupList_Params& operator=(const GetGroupList_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupList_Params& operator=(GetGroupList_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupList_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupList_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupList_Params*>(
               &_GetGroupList_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetGroupList_Params& a, GetGroupList_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupList_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupList_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupList_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupList_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupList_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupList_Params& from) {
    GetGroupList_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupList_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupList.Params";
  }
  protected:
  explicit GetGroupList_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoCacheFieldNumber = 1,
  };
  // bool no_cache = 1;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupList.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool no_cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupList) */ {
 public:
  inline GetGroupList() : GetGroupList(nullptr) {}
  ~GetGroupList() override;
  explicit PROTOBUF_CONSTEXPR GetGroupList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupList(const GetGroupList& from);
  GetGroupList(GetGroupList&& from) noexcept
    : GetGroupList() {
    *this = ::std::move(from);
  }

  inline GetGroupList& operator=(const GetGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupList& operator=(GetGroupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupList* internal_default_instance() {
    return reinterpret_cast<const GetGroupList*>(
               &_GetGroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetGroupList& a, GetGroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupList& from) {
    GetGroupList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupList";
  }
  protected:
  explicit GetGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupList_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupList.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupList_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupList_Params* release_params();
  ::cqhttp::GetGroupList_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupList_Params* params);
  private:
  const ::cqhttp::GetGroupList_Params& _internal_params() const;
  ::cqhttp::GetGroupList_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupList_Params* params);
  ::cqhttp::GetGroupList_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupList_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupListResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupListResp) */ {
 public:
  inline GetGroupListResp() : GetGroupListResp(nullptr) {}
  ~GetGroupListResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupListResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupListResp(const GetGroupListResp& from);
  GetGroupListResp(GetGroupListResp&& from) noexcept
    : GetGroupListResp() {
    *this = ::std::move(from);
  }

  inline GetGroupListResp& operator=(const GetGroupListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupListResp& operator=(GetGroupListResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupListResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupListResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupListResp*>(
               &_GetGroupListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetGroupListResp& a, GetGroupListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupListResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupListResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupListResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupListResp& from) {
    GetGroupListResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupListResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupListResp";
  }
  protected:
  explicit GetGroupListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupListFieldNumber = 1,
  };
  // repeated .cqhttp.GetGroupInfoResp group_list = 1;
  int group_list_size() const;
  private:
  int _internal_group_list_size() const;
  public:
  void clear_group_list();
  ::cqhttp::GetGroupInfoResp* mutable_group_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupInfoResp >*
      mutable_group_list();
  private:
  const ::cqhttp::GetGroupInfoResp& _internal_group_list(int index) const;
  ::cqhttp::GetGroupInfoResp* _internal_add_group_list();
  public:
  const ::cqhttp::GetGroupInfoResp& group_list(int index) const;
  ::cqhttp::GetGroupInfoResp* add_group_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupInfoResp >&
      group_list() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupInfoResp > group_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberInfo_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMemberInfo.Params) */ {
 public:
  inline GetGroupMemberInfo_Params() : GetGroupMemberInfo_Params(nullptr) {}
  ~GetGroupMemberInfo_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMemberInfo_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberInfo_Params(const GetGroupMemberInfo_Params& from);
  GetGroupMemberInfo_Params(GetGroupMemberInfo_Params&& from) noexcept
    : GetGroupMemberInfo_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberInfo_Params& operator=(const GetGroupMemberInfo_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberInfo_Params& operator=(GetGroupMemberInfo_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberInfo_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberInfo_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberInfo_Params*>(
               &_GetGroupMemberInfo_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetGroupMemberInfo_Params& a, GetGroupMemberInfo_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberInfo_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberInfo_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMemberInfo_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMemberInfo_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberInfo_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMemberInfo_Params& from) {
    GetGroupMemberInfo_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberInfo_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMemberInfo.Params";
  }
  protected:
  explicit GetGroupMemberInfo_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kNoCacheFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // bool no_cache = 3;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMemberInfo.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    int64_t user_id_;
    bool no_cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMemberInfo) */ {
 public:
  inline GetGroupMemberInfo() : GetGroupMemberInfo(nullptr) {}
  ~GetGroupMemberInfo() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberInfo(const GetGroupMemberInfo& from);
  GetGroupMemberInfo(GetGroupMemberInfo&& from) noexcept
    : GetGroupMemberInfo() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberInfo& operator=(const GetGroupMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberInfo& operator=(GetGroupMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberInfo* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberInfo*>(
               &_GetGroupMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GetGroupMemberInfo& a, GetGroupMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMemberInfo& from) {
    GetGroupMemberInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMemberInfo";
  }
  protected:
  explicit GetGroupMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupMemberInfo_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupMemberInfo.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupMemberInfo_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupMemberInfo_Params* release_params();
  ::cqhttp::GetGroupMemberInfo_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupMemberInfo_Params* params);
  private:
  const ::cqhttp::GetGroupMemberInfo_Params& _internal_params() const;
  ::cqhttp::GetGroupMemberInfo_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupMemberInfo_Params* params);
  ::cqhttp::GetGroupMemberInfo_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupMemberInfo_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMemberInfoResp) */ {
 public:
  inline GetGroupMemberInfoResp() : GetGroupMemberInfoResp(nullptr) {}
  ~GetGroupMemberInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMemberInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberInfoResp(const GetGroupMemberInfoResp& from);
  GetGroupMemberInfoResp(GetGroupMemberInfoResp&& from) noexcept
    : GetGroupMemberInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberInfoResp& operator=(const GetGroupMemberInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberInfoResp& operator=(GetGroupMemberInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberInfoResp*>(
               &_GetGroupMemberInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetGroupMemberInfoResp& a, GetGroupMemberInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMemberInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMemberInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMemberInfoResp& from) {
    GetGroupMemberInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMemberInfoResp";
  }
  protected:
  explicit GetGroupMemberInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kCardFieldNumber = 4,
    kSexFieldNumber = 5,
    kAreaFieldNumber = 7,
    kLevelFieldNumber = 10,
    kRoleFieldNumber = 11,
    kTitleFieldNumber = 13,
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kAgeFieldNumber = 6,
    kJoinTimeFieldNumber = 8,
    kLastSentTimeFieldNumber = 9,
    kUnfriendlyFieldNumber = 12,
    kCardChangeableFieldNumber = 15,
    kTitleExpireTimeFieldNumber = 14,
    kShutUpTimestampFieldNumber = 16,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string card = 4;
  void clear_card();
  const std::string& card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card();
  PROTOBUF_NODISCARD std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string sex = 5;
  void clear_sex();
  const std::string& sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sex();
  PROTOBUF_NODISCARD std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string area = 7;
  void clear_area();
  const std::string& area() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_area(ArgT0&& arg0, ArgT... args);
  std::string* mutable_area();
  PROTOBUF_NODISCARD std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string level = 10;
  void clear_level();
  const std::string& level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level();
  PROTOBUF_NODISCARD std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string role = 11;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string title = 13;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 age = 6;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 join_time = 8;
  void clear_join_time();
  int32_t join_time() const;
  void set_join_time(int32_t value);
  private:
  int32_t _internal_join_time() const;
  void _internal_set_join_time(int32_t value);
  public:

  // int32 last_sent_time = 9;
  void clear_last_sent_time();
  int32_t last_sent_time() const;
  void set_last_sent_time(int32_t value);
  private:
  int32_t _internal_last_sent_time() const;
  void _internal_set_last_sent_time(int32_t value);
  public:

  // bool unfriendly = 12;
  void clear_unfriendly();
  bool unfriendly() const;
  void set_unfriendly(bool value);
  private:
  bool _internal_unfriendly() const;
  void _internal_set_unfriendly(bool value);
  public:

  // bool card_changeable = 15;
  void clear_card_changeable();
  bool card_changeable() const;
  void set_card_changeable(bool value);
  private:
  bool _internal_card_changeable() const;
  void _internal_set_card_changeable(bool value);
  public:

  // int64 title_expire_time = 14;
  void clear_title_expire_time();
  int64_t title_expire_time() const;
  void set_title_expire_time(int64_t value);
  private:
  int64_t _internal_title_expire_time() const;
  void _internal_set_title_expire_time(int64_t value);
  public:

  // int64 shut_up_timestamp = 16;
  void clear_shut_up_timestamp();
  int64_t shut_up_timestamp() const;
  void set_shut_up_timestamp(int64_t value);
  private:
  int64_t _internal_shut_up_timestamp() const;
  void _internal_set_shut_up_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMemberInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int64_t group_id_;
    int64_t user_id_;
    int32_t age_;
    int32_t join_time_;
    int32_t last_sent_time_;
    bool unfriendly_;
    bool card_changeable_;
    int64_t title_expire_time_;
    int64_t shut_up_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberList_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMemberList.Params) */ {
 public:
  inline GetGroupMemberList_Params() : GetGroupMemberList_Params(nullptr) {}
  ~GetGroupMemberList_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMemberList_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberList_Params(const GetGroupMemberList_Params& from);
  GetGroupMemberList_Params(GetGroupMemberList_Params&& from) noexcept
    : GetGroupMemberList_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberList_Params& operator=(const GetGroupMemberList_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberList_Params& operator=(GetGroupMemberList_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberList_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberList_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberList_Params*>(
               &_GetGroupMemberList_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetGroupMemberList_Params& a, GetGroupMemberList_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberList_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberList_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMemberList_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMemberList_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberList_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMemberList_Params& from) {
    GetGroupMemberList_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberList_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMemberList.Params";
  }
  protected:
  explicit GetGroupMemberList_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kNoCacheFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // bool no_cache = 2;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMemberList.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    bool no_cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMemberList) */ {
 public:
  inline GetGroupMemberList() : GetGroupMemberList(nullptr) {}
  ~GetGroupMemberList() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMemberList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberList(const GetGroupMemberList& from);
  GetGroupMemberList(GetGroupMemberList&& from) noexcept
    : GetGroupMemberList() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberList& operator=(const GetGroupMemberList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberList& operator=(GetGroupMemberList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberList* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberList*>(
               &_GetGroupMemberList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetGroupMemberList& a, GetGroupMemberList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMemberList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMemberList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMemberList& from) {
    GetGroupMemberList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMemberList";
  }
  protected:
  explicit GetGroupMemberList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupMemberList_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupMemberList.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupMemberList_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupMemberList_Params* release_params();
  ::cqhttp::GetGroupMemberList_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupMemberList_Params* params);
  private:
  const ::cqhttp::GetGroupMemberList_Params& _internal_params() const;
  ::cqhttp::GetGroupMemberList_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupMemberList_Params* params);
  ::cqhttp::GetGroupMemberList_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMemberList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupMemberList_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberListResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMemberListResp) */ {
 public:
  inline GetGroupMemberListResp() : GetGroupMemberListResp(nullptr) {}
  ~GetGroupMemberListResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMemberListResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberListResp(const GetGroupMemberListResp& from);
  GetGroupMemberListResp(GetGroupMemberListResp&& from) noexcept
    : GetGroupMemberListResp() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberListResp& operator=(const GetGroupMemberListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberListResp& operator=(GetGroupMemberListResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberListResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberListResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberListResp*>(
               &_GetGroupMemberListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetGroupMemberListResp& a, GetGroupMemberListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberListResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMemberListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMemberListResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberListResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMemberListResp& from) {
    GetGroupMemberListResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberListResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMemberListResp";
  }
  protected:
  explicit GetGroupMemberListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMemberListFieldNumber = 1,
  };
  // repeated .cqhttp.GetGroupMemberInfoResp group_member_list = 1;
  int group_member_list_size() const;
  private:
  int _internal_group_member_list_size() const;
  public:
  void clear_group_member_list();
  ::cqhttp::GetGroupMemberInfoResp* mutable_group_member_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupMemberInfoResp >*
      mutable_group_member_list();
  private:
  const ::cqhttp::GetGroupMemberInfoResp& _internal_group_member_list(int index) const;
  ::cqhttp::GetGroupMemberInfoResp* _internal_add_group_member_list();
  public:
  const ::cqhttp::GetGroupMemberInfoResp& group_member_list(int index) const;
  ::cqhttp::GetGroupMemberInfoResp* add_group_member_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupMemberInfoResp >&
      group_member_list() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMemberListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupMemberInfoResp > group_member_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfo_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupHonorInfo.Params) */ {
 public:
  inline GetGroupHonorInfo_Params() : GetGroupHonorInfo_Params(nullptr) {}
  ~GetGroupHonorInfo_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupHonorInfo_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupHonorInfo_Params(const GetGroupHonorInfo_Params& from);
  GetGroupHonorInfo_Params(GetGroupHonorInfo_Params&& from) noexcept
    : GetGroupHonorInfo_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfo_Params& operator=(const GetGroupHonorInfo_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfo_Params& operator=(GetGroupHonorInfo_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupHonorInfo_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupHonorInfo_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfo_Params*>(
               &_GetGroupHonorInfo_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetGroupHonorInfo_Params& a, GetGroupHonorInfo_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfo_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfo_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupHonorInfo_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupHonorInfo_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupHonorInfo_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupHonorInfo_Params& from) {
    GetGroupHonorInfo_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfo_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupHonorInfo.Params";
  }
  protected:
  explicit GetGroupHonorInfo_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupHonorInfo.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupHonorInfo) */ {
 public:
  inline GetGroupHonorInfo() : GetGroupHonorInfo(nullptr) {}
  ~GetGroupHonorInfo() override;
  explicit PROTOBUF_CONSTEXPR GetGroupHonorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupHonorInfo(const GetGroupHonorInfo& from);
  GetGroupHonorInfo(GetGroupHonorInfo&& from) noexcept
    : GetGroupHonorInfo() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfo& operator=(const GetGroupHonorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfo& operator=(GetGroupHonorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupHonorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupHonorInfo* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfo*>(
               &_GetGroupHonorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetGroupHonorInfo& a, GetGroupHonorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupHonorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupHonorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupHonorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupHonorInfo& from) {
    GetGroupHonorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupHonorInfo";
  }
  protected:
  explicit GetGroupHonorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupHonorInfo_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupHonorInfo.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupHonorInfo_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupHonorInfo_Params* release_params();
  ::cqhttp::GetGroupHonorInfo_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupHonorInfo_Params* params);
  private:
  const ::cqhttp::GetGroupHonorInfo_Params& _internal_params() const;
  ::cqhttp::GetGroupHonorInfo_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupHonorInfo_Params* params);
  ::cqhttp::GetGroupHonorInfo_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupHonorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupHonorInfo_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfoResp_Talkative final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupHonorInfoResp.Talkative) */ {
 public:
  inline GetGroupHonorInfoResp_Talkative() : GetGroupHonorInfoResp_Talkative(nullptr) {}
  ~GetGroupHonorInfoResp_Talkative() override;
  explicit PROTOBUF_CONSTEXPR GetGroupHonorInfoResp_Talkative(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupHonorInfoResp_Talkative(const GetGroupHonorInfoResp_Talkative& from);
  GetGroupHonorInfoResp_Talkative(GetGroupHonorInfoResp_Talkative&& from) noexcept
    : GetGroupHonorInfoResp_Talkative() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfoResp_Talkative& operator=(const GetGroupHonorInfoResp_Talkative& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfoResp_Talkative& operator=(GetGroupHonorInfoResp_Talkative&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupHonorInfoResp_Talkative& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupHonorInfoResp_Talkative* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfoResp_Talkative*>(
               &_GetGroupHonorInfoResp_Talkative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GetGroupHonorInfoResp_Talkative& a, GetGroupHonorInfoResp_Talkative& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfoResp_Talkative* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfoResp_Talkative* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupHonorInfoResp_Talkative* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp_Talkative>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupHonorInfoResp_Talkative& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupHonorInfoResp_Talkative& from) {
    GetGroupHonorInfoResp_Talkative::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfoResp_Talkative* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupHonorInfoResp.Talkative";
  }
  protected:
  explicit GetGroupHonorInfoResp_Talkative(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kDayCountFieldNumber = 4,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 day_count = 4;
  void clear_day_count();
  int32_t day_count() const;
  void set_day_count(int32_t value);
  private:
  int32_t _internal_day_count() const;
  void _internal_set_day_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupHonorInfoResp.Talkative)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    int64_t user_id_;
    int32_t day_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupHonorInfoResp) */ {
 public:
  inline GetGroupHonorInfoResp() : GetGroupHonorInfoResp(nullptr) {}
  ~GetGroupHonorInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupHonorInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupHonorInfoResp(const GetGroupHonorInfoResp& from);
  GetGroupHonorInfoResp(GetGroupHonorInfoResp&& from) noexcept
    : GetGroupHonorInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfoResp& operator=(const GetGroupHonorInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfoResp& operator=(GetGroupHonorInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupHonorInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupHonorInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfoResp*>(
               &_GetGroupHonorInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GetGroupHonorInfoResp& a, GetGroupHonorInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupHonorInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupHonorInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupHonorInfoResp& from) {
    GetGroupHonorInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupHonorInfoResp";
  }
  protected:
  explicit GetGroupHonorInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupHonorInfoResp_Talkative Talkative;

  // accessors -------------------------------------------------------

  enum : int {
    kTalkativeListFieldNumber = 3,
    kPerformerListFieldNumber = 4,
    kLegendListFieldNumber = 5,
    kStrongNewbieListFieldNumber = 6,
    kEmotionListFieldNumber = 7,
    kCurrentTalkativeFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated .cqhttp.GetGroupHonorInfoResp.Talkative talkative_list = 3;
  int talkative_list_size() const;
  private:
  int _internal_talkative_list_size() const;
  public:
  void clear_talkative_list();
  ::cqhttp::GetGroupHonorInfoResp_Talkative* mutable_talkative_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
      mutable_talkative_list();
  private:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& _internal_talkative_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _internal_add_talkative_list();
  public:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& talkative_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* add_talkative_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
      talkative_list() const;

  // repeated .cqhttp.GetGroupHonorInfoResp.Talkative performer_list = 4;
  int performer_list_size() const;
  private:
  int _internal_performer_list_size() const;
  public:
  void clear_performer_list();
  ::cqhttp::GetGroupHonorInfoResp_Talkative* mutable_performer_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
      mutable_performer_list();
  private:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& _internal_performer_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _internal_add_performer_list();
  public:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& performer_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* add_performer_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
      performer_list() const;

  // repeated .cqhttp.GetGroupHonorInfoResp.Talkative legend_list = 5;
  int legend_list_size() const;
  private:
  int _internal_legend_list_size() const;
  public:
  void clear_legend_list();
  ::cqhttp::GetGroupHonorInfoResp_Talkative* mutable_legend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
      mutable_legend_list();
  private:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& _internal_legend_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _internal_add_legend_list();
  public:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& legend_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* add_legend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
      legend_list() const;

  // repeated .cqhttp.GetGroupHonorInfoResp.Talkative strong_newbie_list = 6;
  int strong_newbie_list_size() const;
  private:
  int _internal_strong_newbie_list_size() const;
  public:
  void clear_strong_newbie_list();
  ::cqhttp::GetGroupHonorInfoResp_Talkative* mutable_strong_newbie_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
      mutable_strong_newbie_list();
  private:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& _internal_strong_newbie_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _internal_add_strong_newbie_list();
  public:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& strong_newbie_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* add_strong_newbie_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
      strong_newbie_list() const;

  // repeated .cqhttp.GetGroupHonorInfoResp.Talkative emotion_list = 7;
  int emotion_list_size() const;
  private:
  int _internal_emotion_list_size() const;
  public:
  void clear_emotion_list();
  ::cqhttp::GetGroupHonorInfoResp_Talkative* mutable_emotion_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
      mutable_emotion_list();
  private:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& _internal_emotion_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _internal_add_emotion_list();
  public:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& emotion_list(int index) const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* add_emotion_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
      emotion_list() const;

  // .cqhttp.GetGroupHonorInfoResp.Talkative current_talkative = 2;
  bool has_current_talkative() const;
  private:
  bool _internal_has_current_talkative() const;
  public:
  void clear_current_talkative();
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& current_talkative() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupHonorInfoResp_Talkative* release_current_talkative();
  ::cqhttp::GetGroupHonorInfoResp_Talkative* mutable_current_talkative();
  void set_allocated_current_talkative(::cqhttp::GetGroupHonorInfoResp_Talkative* current_talkative);
  private:
  const ::cqhttp::GetGroupHonorInfoResp_Talkative& _internal_current_talkative() const;
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _internal_mutable_current_talkative();
  public:
  void unsafe_arena_set_allocated_current_talkative(
      ::cqhttp::GetGroupHonorInfoResp_Talkative* current_talkative);
  ::cqhttp::GetGroupHonorInfoResp_Talkative* unsafe_arena_release_current_talkative();

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupHonorInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative > talkative_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative > performer_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative > legend_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative > strong_newbie_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative > emotion_list_;
    ::cqhttp::GetGroupHonorInfoResp_Talkative* current_talkative_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCoolies_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCoolies.Params) */ {
 public:
  inline GetCoolies_Params() : GetCoolies_Params(nullptr) {}
  ~GetCoolies_Params() override;
  explicit PROTOBUF_CONSTEXPR GetCoolies_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCoolies_Params(const GetCoolies_Params& from);
  GetCoolies_Params(GetCoolies_Params&& from) noexcept
    : GetCoolies_Params() {
    *this = ::std::move(from);
  }

  inline GetCoolies_Params& operator=(const GetCoolies_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCoolies_Params& operator=(GetCoolies_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCoolies_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCoolies_Params* internal_default_instance() {
    return reinterpret_cast<const GetCoolies_Params*>(
               &_GetCoolies_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GetCoolies_Params& a, GetCoolies_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCoolies_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCoolies_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCoolies_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCoolies_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCoolies_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCoolies_Params& from) {
    GetCoolies_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoolies_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCoolies.Params";
  }
  protected:
  explicit GetCoolies_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetCoolies.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCoolies final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCoolies) */ {
 public:
  inline GetCoolies() : GetCoolies(nullptr) {}
  ~GetCoolies() override;
  explicit PROTOBUF_CONSTEXPR GetCoolies(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCoolies(const GetCoolies& from);
  GetCoolies(GetCoolies&& from) noexcept
    : GetCoolies() {
    *this = ::std::move(from);
  }

  inline GetCoolies& operator=(const GetCoolies& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCoolies& operator=(GetCoolies&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCoolies& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCoolies* internal_default_instance() {
    return reinterpret_cast<const GetCoolies*>(
               &_GetCoolies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetCoolies& a, GetCoolies& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCoolies* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCoolies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCoolies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCoolies>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCoolies& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCoolies& from) {
    GetCoolies::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoolies* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCoolies";
  }
  protected:
  explicit GetCoolies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetCoolies_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetCoolies.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetCoolies_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetCoolies_Params* release_params();
  ::cqhttp::GetCoolies_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetCoolies_Params* params);
  private:
  const ::cqhttp::GetCoolies_Params& _internal_params() const;
  ::cqhttp::GetCoolies_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetCoolies_Params* params);
  ::cqhttp::GetCoolies_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetCoolies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetCoolies_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCooliesResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCooliesResp) */ {
 public:
  inline GetCooliesResp() : GetCooliesResp(nullptr) {}
  ~GetCooliesResp() override;
  explicit PROTOBUF_CONSTEXPR GetCooliesResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCooliesResp(const GetCooliesResp& from);
  GetCooliesResp(GetCooliesResp&& from) noexcept
    : GetCooliesResp() {
    *this = ::std::move(from);
  }

  inline GetCooliesResp& operator=(const GetCooliesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCooliesResp& operator=(GetCooliesResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCooliesResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCooliesResp* internal_default_instance() {
    return reinterpret_cast<const GetCooliesResp*>(
               &_GetCooliesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetCooliesResp& a, GetCooliesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCooliesResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCooliesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCooliesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCooliesResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCooliesResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCooliesResp& from) {
    GetCooliesResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCooliesResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCooliesResp";
  }
  protected:
  explicit GetCooliesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookiesFieldNumber = 1,
  };
  // string cookies = 1;
  void clear_cookies();
  const std::string& cookies() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cookies(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cookies();
  PROTOBUF_NODISCARD std::string* release_cookies();
  void set_allocated_cookies(std::string* cookies);
  private:
  const std::string& _internal_cookies() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cookies(const std::string& value);
  std::string* _internal_mutable_cookies();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetCooliesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCsrfToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCsrfToken) */ {
 public:
  inline GetCsrfToken() : GetCsrfToken(nullptr) {}
  ~GetCsrfToken() override;
  explicit PROTOBUF_CONSTEXPR GetCsrfToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCsrfToken(const GetCsrfToken& from);
  GetCsrfToken(GetCsrfToken&& from) noexcept
    : GetCsrfToken() {
    *this = ::std::move(from);
  }

  inline GetCsrfToken& operator=(const GetCsrfToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCsrfToken& operator=(GetCsrfToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCsrfToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCsrfToken* internal_default_instance() {
    return reinterpret_cast<const GetCsrfToken*>(
               &_GetCsrfToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(GetCsrfToken& a, GetCsrfToken& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCsrfToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCsrfToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCsrfToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCsrfToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCsrfToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCsrfToken& from) {
    GetCsrfToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCsrfToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCsrfToken";
  }
  protected:
  explicit GetCsrfToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetCsrfToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCsrfTokenResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCsrfTokenResp) */ {
 public:
  inline GetCsrfTokenResp() : GetCsrfTokenResp(nullptr) {}
  ~GetCsrfTokenResp() override;
  explicit PROTOBUF_CONSTEXPR GetCsrfTokenResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCsrfTokenResp(const GetCsrfTokenResp& from);
  GetCsrfTokenResp(GetCsrfTokenResp&& from) noexcept
    : GetCsrfTokenResp() {
    *this = ::std::move(from);
  }

  inline GetCsrfTokenResp& operator=(const GetCsrfTokenResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCsrfTokenResp& operator=(GetCsrfTokenResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCsrfTokenResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCsrfTokenResp* internal_default_instance() {
    return reinterpret_cast<const GetCsrfTokenResp*>(
               &_GetCsrfTokenResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GetCsrfTokenResp& a, GetCsrfTokenResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCsrfTokenResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCsrfTokenResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCsrfTokenResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCsrfTokenResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCsrfTokenResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCsrfTokenResp& from) {
    GetCsrfTokenResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCsrfTokenResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCsrfTokenResp";
  }
  protected:
  explicit GetCsrfTokenResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // int32 token = 1;
  void clear_token();
  int32_t token() const;
  void set_token(int32_t value);
  private:
  int32_t _internal_token() const;
  void _internal_set_token(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetCsrfTokenResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCredentials_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCredentials.Params) */ {
 public:
  inline GetCredentials_Params() : GetCredentials_Params(nullptr) {}
  ~GetCredentials_Params() override;
  explicit PROTOBUF_CONSTEXPR GetCredentials_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCredentials_Params(const GetCredentials_Params& from);
  GetCredentials_Params(GetCredentials_Params&& from) noexcept
    : GetCredentials_Params() {
    *this = ::std::move(from);
  }

  inline GetCredentials_Params& operator=(const GetCredentials_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentials_Params& operator=(GetCredentials_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCredentials_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCredentials_Params* internal_default_instance() {
    return reinterpret_cast<const GetCredentials_Params*>(
               &_GetCredentials_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetCredentials_Params& a, GetCredentials_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentials_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentials_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCredentials_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCredentials_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCredentials_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCredentials_Params& from) {
    GetCredentials_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentials_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCredentials.Params";
  }
  protected:
  explicit GetCredentials_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetCredentials.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCredentials final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCredentials) */ {
 public:
  inline GetCredentials() : GetCredentials(nullptr) {}
  ~GetCredentials() override;
  explicit PROTOBUF_CONSTEXPR GetCredentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCredentials(const GetCredentials& from);
  GetCredentials(GetCredentials&& from) noexcept
    : GetCredentials() {
    *this = ::std::move(from);
  }

  inline GetCredentials& operator=(const GetCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentials& operator=(GetCredentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCredentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCredentials* internal_default_instance() {
    return reinterpret_cast<const GetCredentials*>(
               &_GetCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GetCredentials& a, GetCredentials& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCredentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCredentials>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCredentials& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCredentials& from) {
    GetCredentials::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentials* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCredentials";
  }
  protected:
  explicit GetCredentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetCredentials_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetCredentials.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetCredentials_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetCredentials_Params* release_params();
  ::cqhttp::GetCredentials_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetCredentials_Params* params);
  private:
  const ::cqhttp::GetCredentials_Params& _internal_params() const;
  ::cqhttp::GetCredentials_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetCredentials_Params* params);
  ::cqhttp::GetCredentials_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetCredentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetCredentials_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialsResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetCredentialsResp) */ {
 public:
  inline GetCredentialsResp() : GetCredentialsResp(nullptr) {}
  ~GetCredentialsResp() override;
  explicit PROTOBUF_CONSTEXPR GetCredentialsResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCredentialsResp(const GetCredentialsResp& from);
  GetCredentialsResp(GetCredentialsResp&& from) noexcept
    : GetCredentialsResp() {
    *this = ::std::move(from);
  }

  inline GetCredentialsResp& operator=(const GetCredentialsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialsResp& operator=(GetCredentialsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCredentialsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCredentialsResp* internal_default_instance() {
    return reinterpret_cast<const GetCredentialsResp*>(
               &_GetCredentialsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(GetCredentialsResp& a, GetCredentialsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCredentialsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCredentialsResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCredentialsResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCredentialsResp& from) {
    GetCredentialsResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialsResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetCredentialsResp";
  }
  protected:
  explicit GetCredentialsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookiesFieldNumber = 1,
    kCsrfTokenFieldNumber = 2,
  };
  // string cookies = 1;
  void clear_cookies();
  const std::string& cookies() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cookies(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cookies();
  PROTOBUF_NODISCARD std::string* release_cookies();
  void set_allocated_cookies(std::string* cookies);
  private:
  const std::string& _internal_cookies() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cookies(const std::string& value);
  std::string* _internal_mutable_cookies();
  public:

  // int32 csrf_token = 2;
  void clear_csrf_token();
  int32_t csrf_token() const;
  void set_csrf_token(int32_t value);
  private:
  int32_t _internal_csrf_token() const;
  void _internal_set_csrf_token(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetCredentialsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookies_;
    int32_t csrf_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRecord_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetRecord.Params) */ {
 public:
  inline GetRecord_Params() : GetRecord_Params(nullptr) {}
  ~GetRecord_Params() override;
  explicit PROTOBUF_CONSTEXPR GetRecord_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecord_Params(const GetRecord_Params& from);
  GetRecord_Params(GetRecord_Params&& from) noexcept
    : GetRecord_Params() {
    *this = ::std::move(from);
  }

  inline GetRecord_Params& operator=(const GetRecord_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecord_Params& operator=(GetRecord_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecord_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecord_Params* internal_default_instance() {
    return reinterpret_cast<const GetRecord_Params*>(
               &_GetRecord_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(GetRecord_Params& a, GetRecord_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecord_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecord_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecord_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecord_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecord_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecord_Params& from) {
    GetRecord_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecord_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetRecord.Params";
  }
  protected:
  explicit GetRecord_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kOutFormatFieldNumber = 2,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string out_format = 2;
  void clear_out_format();
  const std::string& out_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_out_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_out_format();
  PROTOBUF_NODISCARD std::string* release_out_format();
  void set_allocated_out_format(std::string* out_format);
  private:
  const std::string& _internal_out_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_format(const std::string& value);
  std::string* _internal_mutable_out_format();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetRecord.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetRecord) */ {
 public:
  inline GetRecord() : GetRecord(nullptr) {}
  ~GetRecord() override;
  explicit PROTOBUF_CONSTEXPR GetRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecord(const GetRecord& from);
  GetRecord(GetRecord&& from) noexcept
    : GetRecord() {
    *this = ::std::move(from);
  }

  inline GetRecord& operator=(const GetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecord& operator=(GetRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecord* internal_default_instance() {
    return reinterpret_cast<const GetRecord*>(
               &_GetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GetRecord& a, GetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecord& from) {
    GetRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetRecord";
  }
  protected:
  explicit GetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetRecord_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetRecord.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetRecord_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetRecord_Params* release_params();
  ::cqhttp::GetRecord_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetRecord_Params* params);
  private:
  const ::cqhttp::GetRecord_Params& _internal_params() const;
  ::cqhttp::GetRecord_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetRecord_Params* params);
  ::cqhttp::GetRecord_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetRecord_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRecordResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetRecordResp) */ {
 public:
  inline GetRecordResp() : GetRecordResp(nullptr) {}
  ~GetRecordResp() override;
  explicit PROTOBUF_CONSTEXPR GetRecordResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecordResp(const GetRecordResp& from);
  GetRecordResp(GetRecordResp&& from) noexcept
    : GetRecordResp() {
    *this = ::std::move(from);
  }

  inline GetRecordResp& operator=(const GetRecordResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordResp& operator=(GetRecordResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecordResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecordResp* internal_default_instance() {
    return reinterpret_cast<const GetRecordResp*>(
               &_GetRecordResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GetRecordResp& a, GetRecordResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecordResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecordResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecordResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecordResp& from) {
    GetRecordResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetRecordResp";
  }
  protected:
  explicit GetRecordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetRecordResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CanSendImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CanSendImage) */ {
 public:
  inline CanSendImage() : CanSendImage(nullptr) {}
  ~CanSendImage() override;
  explicit PROTOBUF_CONSTEXPR CanSendImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanSendImage(const CanSendImage& from);
  CanSendImage(CanSendImage&& from) noexcept
    : CanSendImage() {
    *this = ::std::move(from);
  }

  inline CanSendImage& operator=(const CanSendImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendImage& operator=(CanSendImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanSendImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanSendImage* internal_default_instance() {
    return reinterpret_cast<const CanSendImage*>(
               &_CanSendImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CanSendImage& a, CanSendImage& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanSendImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanSendImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanSendImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanSendImage& from) {
    CanSendImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CanSendImage";
  }
  protected:
  explicit CanSendImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CanSendImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CanSendImageResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CanSendImageResp) */ {
 public:
  inline CanSendImageResp() : CanSendImageResp(nullptr) {}
  ~CanSendImageResp() override;
  explicit PROTOBUF_CONSTEXPR CanSendImageResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanSendImageResp(const CanSendImageResp& from);
  CanSendImageResp(CanSendImageResp&& from) noexcept
    : CanSendImageResp() {
    *this = ::std::move(from);
  }

  inline CanSendImageResp& operator=(const CanSendImageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendImageResp& operator=(CanSendImageResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanSendImageResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanSendImageResp* internal_default_instance() {
    return reinterpret_cast<const CanSendImageResp*>(
               &_CanSendImageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CanSendImageResp& a, CanSendImageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendImageResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendImageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanSendImageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanSendImageResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanSendImageResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanSendImageResp& from) {
    CanSendImageResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendImageResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CanSendImageResp";
  }
  protected:
  explicit CanSendImageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYesFieldNumber = 1,
  };
  // bool yes = 1;
  void clear_yes();
  bool yes() const;
  void set_yes(bool value);
  private:
  bool _internal_yes() const;
  void _internal_set_yes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CanSendImageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool yes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CanSendRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CanSendRecord) */ {
 public:
  inline CanSendRecord() : CanSendRecord(nullptr) {}
  ~CanSendRecord() override;
  explicit PROTOBUF_CONSTEXPR CanSendRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanSendRecord(const CanSendRecord& from);
  CanSendRecord(CanSendRecord&& from) noexcept
    : CanSendRecord() {
    *this = ::std::move(from);
  }

  inline CanSendRecord& operator=(const CanSendRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendRecord& operator=(CanSendRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanSendRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanSendRecord* internal_default_instance() {
    return reinterpret_cast<const CanSendRecord*>(
               &_CanSendRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CanSendRecord& a, CanSendRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanSendRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanSendRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanSendRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanSendRecord& from) {
    CanSendRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CanSendRecord";
  }
  protected:
  explicit CanSendRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CanSendRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CanSendRecordResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CanSendRecordResp) */ {
 public:
  inline CanSendRecordResp() : CanSendRecordResp(nullptr) {}
  ~CanSendRecordResp() override;
  explicit PROTOBUF_CONSTEXPR CanSendRecordResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanSendRecordResp(const CanSendRecordResp& from);
  CanSendRecordResp(CanSendRecordResp&& from) noexcept
    : CanSendRecordResp() {
    *this = ::std::move(from);
  }

  inline CanSendRecordResp& operator=(const CanSendRecordResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendRecordResp& operator=(CanSendRecordResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanSendRecordResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanSendRecordResp* internal_default_instance() {
    return reinterpret_cast<const CanSendRecordResp*>(
               &_CanSendRecordResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CanSendRecordResp& a, CanSendRecordResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendRecordResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendRecordResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanSendRecordResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanSendRecordResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanSendRecordResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanSendRecordResp& from) {
    CanSendRecordResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendRecordResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CanSendRecordResp";
  }
  protected:
  explicit CanSendRecordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYesFieldNumber = 1,
  };
  // bool yes = 1;
  void clear_yes();
  bool yes() const;
  void set_yes(bool value);
  private:
  bool _internal_yes() const;
  void _internal_set_yes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CanSendRecordResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool yes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetVersionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetVersionInfo) */ {
 public:
  inline GetVersionInfo() : GetVersionInfo(nullptr) {}
  ~GetVersionInfo() override;
  explicit PROTOBUF_CONSTEXPR GetVersionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionInfo(const GetVersionInfo& from);
  GetVersionInfo(GetVersionInfo&& from) noexcept
    : GetVersionInfo() {
    *this = ::std::move(from);
  }

  inline GetVersionInfo& operator=(const GetVersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionInfo& operator=(GetVersionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionInfo* internal_default_instance() {
    return reinterpret_cast<const GetVersionInfo*>(
               &_GetVersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GetVersionInfo& a, GetVersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVersionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVersionInfo& from) {
    GetVersionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetVersionInfo";
  }
  protected:
  explicit GetVersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetVersionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetVersionInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetVersionInfoResp) */ {
 public:
  inline GetVersionInfoResp() : GetVersionInfoResp(nullptr) {}
  ~GetVersionInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetVersionInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionInfoResp(const GetVersionInfoResp& from);
  GetVersionInfoResp(GetVersionInfoResp&& from) noexcept
    : GetVersionInfoResp() {
    *this = ::std::move(from);
  }

  inline GetVersionInfoResp& operator=(const GetVersionInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionInfoResp& operator=(GetVersionInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetVersionInfoResp*>(
               &_GetVersionInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(GetVersionInfoResp& a, GetVersionInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVersionInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVersionInfoResp& from) {
    GetVersionInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetVersionInfoResp";
  }
  protected:
  explicit GetVersionInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 1,
    kAppVersionFieldNumber = 2,
    kAppFullNameFieldNumber = 3,
    kProtocolVersionFieldNumber = 4,
    kCoolqEditionFieldNumber = 5,
    kCoolqDirectoryFieldNumber = 6,
    kPluginVersionFieldNumber = 8,
    kPluginBuildConfigurationFieldNumber = 10,
    kRuntimeVersionFieldNumber = 11,
    kRuntimeOsFieldNumber = 12,
    kVersionFieldNumber = 13,
    kCqhttpFieldNumber = 7,
    kPluginBuildNumberFieldNumber = 9,
    kProtocolFieldNumber = 14,
  };
  // string app_name = 1;
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // string app_version = 2;
  void clear_app_version();
  const std::string& app_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_version();
  PROTOBUF_NODISCARD std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // string app_full_name = 3;
  void clear_app_full_name();
  const std::string& app_full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_full_name();
  PROTOBUF_NODISCARD std::string* release_app_full_name();
  void set_allocated_app_full_name(std::string* app_full_name);
  private:
  const std::string& _internal_app_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_full_name(const std::string& value);
  std::string* _internal_mutable_app_full_name();
  public:

  // string protocol_version = 4;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol_version();
  PROTOBUF_NODISCARD std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // string coolq_edition = 5;
  void clear_coolq_edition();
  const std::string& coolq_edition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coolq_edition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coolq_edition();
  PROTOBUF_NODISCARD std::string* release_coolq_edition();
  void set_allocated_coolq_edition(std::string* coolq_edition);
  private:
  const std::string& _internal_coolq_edition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coolq_edition(const std::string& value);
  std::string* _internal_mutable_coolq_edition();
  public:

  // string coolq_directory = 6;
  void clear_coolq_directory();
  const std::string& coolq_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coolq_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coolq_directory();
  PROTOBUF_NODISCARD std::string* release_coolq_directory();
  void set_allocated_coolq_directory(std::string* coolq_directory);
  private:
  const std::string& _internal_coolq_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coolq_directory(const std::string& value);
  std::string* _internal_mutable_coolq_directory();
  public:

  // string plugin_version = 8;
  void clear_plugin_version();
  const std::string& plugin_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plugin_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plugin_version();
  PROTOBUF_NODISCARD std::string* release_plugin_version();
  void set_allocated_plugin_version(std::string* plugin_version);
  private:
  const std::string& _internal_plugin_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plugin_version(const std::string& value);
  std::string* _internal_mutable_plugin_version();
  public:

  // string plugin_build_configuration = 10;
  void clear_plugin_build_configuration();
  const std::string& plugin_build_configuration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plugin_build_configuration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plugin_build_configuration();
  PROTOBUF_NODISCARD std::string* release_plugin_build_configuration();
  void set_allocated_plugin_build_configuration(std::string* plugin_build_configuration);
  private:
  const std::string& _internal_plugin_build_configuration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plugin_build_configuration(const std::string& value);
  std::string* _internal_mutable_plugin_build_configuration();
  public:

  // string runtime_version = 11;
  void clear_runtime_version();
  const std::string& runtime_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_version();
  PROTOBUF_NODISCARD std::string* release_runtime_version();
  void set_allocated_runtime_version(std::string* runtime_version);
  private:
  const std::string& _internal_runtime_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_version(const std::string& value);
  std::string* _internal_mutable_runtime_version();
  public:

  // string runtime_os = 12;
  void clear_runtime_os();
  const std::string& runtime_os() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_os(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_os();
  PROTOBUF_NODISCARD std::string* release_runtime_os();
  void set_allocated_runtime_os(std::string* runtime_os);
  private:
  const std::string& _internal_runtime_os() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_os(const std::string& value);
  std::string* _internal_mutable_runtime_os();
  public:

  // string version = 13;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bool cqhttp = 7;
  void clear_cqhttp();
  bool cqhttp() const;
  void set_cqhttp(bool value);
  private:
  bool _internal_cqhttp() const;
  void _internal_set_cqhttp(bool value);
  public:

  // int32 plugin_build_number = 9;
  void clear_plugin_build_number();
  int32_t plugin_build_number() const;
  void set_plugin_build_number(int32_t value);
  private:
  int32_t _internal_plugin_build_number() const;
  void _internal_set_plugin_build_number(int32_t value);
  public:

  // int32 protocol = 14;
  void clear_protocol();
  int32_t protocol() const;
  void set_protocol(int32_t value);
  private:
  int32_t _internal_protocol() const;
  void _internal_set_protocol(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetVersionInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_full_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coolq_edition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coolq_directory_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_build_configuration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_os_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    bool cqhttp_;
    int32_t plugin_build_number_;
    int32_t protocol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetRestart_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetRestart.Params) */ {
 public:
  inline SetRestart_Params() : SetRestart_Params(nullptr) {}
  ~SetRestart_Params() override;
  explicit PROTOBUF_CONSTEXPR SetRestart_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRestart_Params(const SetRestart_Params& from);
  SetRestart_Params(SetRestart_Params&& from) noexcept
    : SetRestart_Params() {
    *this = ::std::move(from);
  }

  inline SetRestart_Params& operator=(const SetRestart_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRestart_Params& operator=(SetRestart_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRestart_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRestart_Params* internal_default_instance() {
    return reinterpret_cast<const SetRestart_Params*>(
               &_SetRestart_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SetRestart_Params& a, SetRestart_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRestart_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRestart_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRestart_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRestart_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRestart_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetRestart_Params& from) {
    SetRestart_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRestart_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetRestart.Params";
  }
  protected:
  explicit SetRestart_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayFieldNumber = 1,
  };
  // int32 delay = 1;
  void clear_delay();
  int32_t delay() const;
  void set_delay(int32_t value);
  private:
  int32_t _internal_delay() const;
  void _internal_set_delay(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetRestart.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t delay_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetRestart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetRestart) */ {
 public:
  inline SetRestart() : SetRestart(nullptr) {}
  ~SetRestart() override;
  explicit PROTOBUF_CONSTEXPR SetRestart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRestart(const SetRestart& from);
  SetRestart(SetRestart&& from) noexcept
    : SetRestart() {
    *this = ::std::move(from);
  }

  inline SetRestart& operator=(const SetRestart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRestart& operator=(SetRestart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRestart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRestart* internal_default_instance() {
    return reinterpret_cast<const SetRestart*>(
               &_SetRestart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SetRestart& a, SetRestart& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRestart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRestart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRestart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRestart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRestart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetRestart& from) {
    SetRestart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRestart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetRestart";
  }
  protected:
  explicit SetRestart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetRestart_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetRestart.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetRestart_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetRestart_Params* release_params();
  ::cqhttp::SetRestart_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetRestart_Params* params);
  private:
  const ::cqhttp::SetRestart_Params& _internal_params() const;
  ::cqhttp::SetRestart_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetRestart_Params* params);
  ::cqhttp::SetRestart_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetRestart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetRestart_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CleanCache final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CleanCache) */ {
 public:
  inline CleanCache() : CleanCache(nullptr) {}
  ~CleanCache() override;
  explicit PROTOBUF_CONSTEXPR CleanCache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CleanCache(const CleanCache& from);
  CleanCache(CleanCache&& from) noexcept
    : CleanCache() {
    *this = ::std::move(from);
  }

  inline CleanCache& operator=(const CleanCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanCache& operator=(CleanCache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanCache* internal_default_instance() {
    return reinterpret_cast<const CleanCache*>(
               &_CleanCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CleanCache& a, CleanCache& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanCache* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanCache>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CleanCache& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CleanCache& from) {
    CleanCache::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanCache* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CleanCache";
  }
  protected:
  explicit CleanCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CleanCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupPortrait_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupPortrait.Params) */ {
 public:
  inline SetGroupPortrait_Params() : SetGroupPortrait_Params(nullptr) {}
  ~SetGroupPortrait_Params() override;
  explicit PROTOBUF_CONSTEXPR SetGroupPortrait_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupPortrait_Params(const SetGroupPortrait_Params& from);
  SetGroupPortrait_Params(SetGroupPortrait_Params&& from) noexcept
    : SetGroupPortrait_Params() {
    *this = ::std::move(from);
  }

  inline SetGroupPortrait_Params& operator=(const SetGroupPortrait_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupPortrait_Params& operator=(SetGroupPortrait_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupPortrait_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupPortrait_Params* internal_default_instance() {
    return reinterpret_cast<const SetGroupPortrait_Params*>(
               &_SetGroupPortrait_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SetGroupPortrait_Params& a, SetGroupPortrait_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupPortrait_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupPortrait_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupPortrait_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupPortrait_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupPortrait_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupPortrait_Params& from) {
    SetGroupPortrait_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupPortrait_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupPortrait.Params";
  }
  protected:
  explicit SetGroupPortrait_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kCacheFieldNumber = 3,
  };
  // string file = 2;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int32 cache = 3;
  void clear_cache();
  int32_t cache() const;
  void set_cache(int32_t value);
  private:
  int32_t _internal_cache() const;
  void _internal_set_cache(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupPortrait.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    int64_t group_id_;
    int32_t cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetGroupPortrait final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetGroupPortrait) */ {
 public:
  inline SetGroupPortrait() : SetGroupPortrait(nullptr) {}
  ~SetGroupPortrait() override;
  explicit PROTOBUF_CONSTEXPR SetGroupPortrait(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGroupPortrait(const SetGroupPortrait& from);
  SetGroupPortrait(SetGroupPortrait&& from) noexcept
    : SetGroupPortrait() {
    *this = ::std::move(from);
  }

  inline SetGroupPortrait& operator=(const SetGroupPortrait& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupPortrait& operator=(SetGroupPortrait&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGroupPortrait& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGroupPortrait* internal_default_instance() {
    return reinterpret_cast<const SetGroupPortrait*>(
               &_SetGroupPortrait_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SetGroupPortrait& a, SetGroupPortrait& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupPortrait* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupPortrait* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGroupPortrait* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGroupPortrait>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGroupPortrait& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGroupPortrait& from) {
    SetGroupPortrait::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupPortrait* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetGroupPortrait";
  }
  protected:
  explicit SetGroupPortrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGroupPortrait_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetGroupPortrait.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetGroupPortrait_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetGroupPortrait_Params* release_params();
  ::cqhttp::SetGroupPortrait_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetGroupPortrait_Params* params);
  private:
  const ::cqhttp::SetGroupPortrait_Params& _internal_params() const;
  ::cqhttp::SetGroupPortrait_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetGroupPortrait_Params* params);
  ::cqhttp::SetGroupPortrait_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetGroupPortrait)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetGroupPortrait_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetWordSlices_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetWordSlices.Params) */ {
 public:
  inline GetWordSlices_Params() : GetWordSlices_Params(nullptr) {}
  ~GetWordSlices_Params() override;
  explicit PROTOBUF_CONSTEXPR GetWordSlices_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWordSlices_Params(const GetWordSlices_Params& from);
  GetWordSlices_Params(GetWordSlices_Params&& from) noexcept
    : GetWordSlices_Params() {
    *this = ::std::move(from);
  }

  inline GetWordSlices_Params& operator=(const GetWordSlices_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWordSlices_Params& operator=(GetWordSlices_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWordSlices_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWordSlices_Params* internal_default_instance() {
    return reinterpret_cast<const GetWordSlices_Params*>(
               &_GetWordSlices_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(GetWordSlices_Params& a, GetWordSlices_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWordSlices_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWordSlices_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWordSlices_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWordSlices_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWordSlices_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWordSlices_Params& from) {
    GetWordSlices_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWordSlices_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetWordSlices.Params";
  }
  protected:
  explicit GetWordSlices_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetWordSlices.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetWordSlices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetWordSlices) */ {
 public:
  inline GetWordSlices() : GetWordSlices(nullptr) {}
  ~GetWordSlices() override;
  explicit PROTOBUF_CONSTEXPR GetWordSlices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWordSlices(const GetWordSlices& from);
  GetWordSlices(GetWordSlices&& from) noexcept
    : GetWordSlices() {
    *this = ::std::move(from);
  }

  inline GetWordSlices& operator=(const GetWordSlices& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWordSlices& operator=(GetWordSlices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWordSlices& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWordSlices* internal_default_instance() {
    return reinterpret_cast<const GetWordSlices*>(
               &_GetWordSlices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(GetWordSlices& a, GetWordSlices& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWordSlices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWordSlices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWordSlices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWordSlices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWordSlices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWordSlices& from) {
    GetWordSlices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWordSlices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetWordSlices";
  }
  protected:
  explicit GetWordSlices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetWordSlices_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetWordSlices.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetWordSlices_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetWordSlices_Params* release_params();
  ::cqhttp::GetWordSlices_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetWordSlices_Params* params);
  private:
  const ::cqhttp::GetWordSlices_Params& _internal_params() const;
  ::cqhttp::GetWordSlices_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetWordSlices_Params* params);
  ::cqhttp::GetWordSlices_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetWordSlices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetWordSlices_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetWordSlicesResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetWordSlicesResp) */ {
 public:
  inline GetWordSlicesResp() : GetWordSlicesResp(nullptr) {}
  ~GetWordSlicesResp() override;
  explicit PROTOBUF_CONSTEXPR GetWordSlicesResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWordSlicesResp(const GetWordSlicesResp& from);
  GetWordSlicesResp(GetWordSlicesResp&& from) noexcept
    : GetWordSlicesResp() {
    *this = ::std::move(from);
  }

  inline GetWordSlicesResp& operator=(const GetWordSlicesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWordSlicesResp& operator=(GetWordSlicesResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWordSlicesResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWordSlicesResp* internal_default_instance() {
    return reinterpret_cast<const GetWordSlicesResp*>(
               &_GetWordSlicesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(GetWordSlicesResp& a, GetWordSlicesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWordSlicesResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWordSlicesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWordSlicesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWordSlicesResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWordSlicesResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWordSlicesResp& from) {
    GetWordSlicesResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWordSlicesResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetWordSlicesResp";
  }
  protected:
  explicit GetWordSlicesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicesFieldNumber = 1,
  };
  // repeated string slices = 1;
  int slices_size() const;
  private:
  int _internal_slices_size() const;
  public:
  void clear_slices();
  const std::string& slices(int index) const;
  std::string* mutable_slices(int index);
  void set_slices(int index, const std::string& value);
  void set_slices(int index, std::string&& value);
  void set_slices(int index, const char* value);
  void set_slices(int index, const char* value, size_t size);
  std::string* add_slices();
  void add_slices(const std::string& value);
  void add_slices(std::string&& value);
  void add_slices(const char* value);
  void add_slices(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& slices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_slices();
  private:
  const std::string& _internal_slices(int index) const;
  std::string* _internal_add_slices();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetWordSlicesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> slices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class OcrImage_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.OcrImage.Params) */ {
 public:
  inline OcrImage_Params() : OcrImage_Params(nullptr) {}
  ~OcrImage_Params() override;
  explicit PROTOBUF_CONSTEXPR OcrImage_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrImage_Params(const OcrImage_Params& from);
  OcrImage_Params(OcrImage_Params&& from) noexcept
    : OcrImage_Params() {
    *this = ::std::move(from);
  }

  inline OcrImage_Params& operator=(const OcrImage_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrImage_Params& operator=(OcrImage_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OcrImage_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrImage_Params* internal_default_instance() {
    return reinterpret_cast<const OcrImage_Params*>(
               &_OcrImage_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(OcrImage_Params& a, OcrImage_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrImage_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrImage_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrImage_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrImage_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OcrImage_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OcrImage_Params& from) {
    OcrImage_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OcrImage_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.OcrImage.Params";
  }
  protected:
  explicit OcrImage_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // string image = 1;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.OcrImage.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class OcrImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.OcrImage) */ {
 public:
  inline OcrImage() : OcrImage(nullptr) {}
  ~OcrImage() override;
  explicit PROTOBUF_CONSTEXPR OcrImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrImage(const OcrImage& from);
  OcrImage(OcrImage&& from) noexcept
    : OcrImage() {
    *this = ::std::move(from);
  }

  inline OcrImage& operator=(const OcrImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrImage& operator=(OcrImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OcrImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrImage* internal_default_instance() {
    return reinterpret_cast<const OcrImage*>(
               &_OcrImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(OcrImage& a, OcrImage& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OcrImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OcrImage& from) {
    OcrImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OcrImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.OcrImage";
  }
  protected:
  explicit OcrImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OcrImage_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.OcrImage.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::OcrImage_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::OcrImage_Params* release_params();
  ::cqhttp::OcrImage_Params* mutable_params();
  void set_allocated_params(::cqhttp::OcrImage_Params* params);
  private:
  const ::cqhttp::OcrImage_Params& _internal_params() const;
  ::cqhttp::OcrImage_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::OcrImage_Params* params);
  ::cqhttp::OcrImage_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.OcrImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::OcrImage_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class OcrImageResp_TextDetection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.OcrImageResp.TextDetection) */ {
 public:
  inline OcrImageResp_TextDetection() : OcrImageResp_TextDetection(nullptr) {}
  ~OcrImageResp_TextDetection() override;
  explicit PROTOBUF_CONSTEXPR OcrImageResp_TextDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrImageResp_TextDetection(const OcrImageResp_TextDetection& from);
  OcrImageResp_TextDetection(OcrImageResp_TextDetection&& from) noexcept
    : OcrImageResp_TextDetection() {
    *this = ::std::move(from);
  }

  inline OcrImageResp_TextDetection& operator=(const OcrImageResp_TextDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrImageResp_TextDetection& operator=(OcrImageResp_TextDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OcrImageResp_TextDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrImageResp_TextDetection* internal_default_instance() {
    return reinterpret_cast<const OcrImageResp_TextDetection*>(
               &_OcrImageResp_TextDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(OcrImageResp_TextDetection& a, OcrImageResp_TextDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrImageResp_TextDetection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrImageResp_TextDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrImageResp_TextDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrImageResp_TextDetection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OcrImageResp_TextDetection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OcrImageResp_TextDetection& from) {
    OcrImageResp_TextDetection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OcrImageResp_TextDetection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.OcrImageResp.TextDetection";
  }
  protected:
  explicit OcrImageResp_TextDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kCoordinatesFieldNumber = 3,
    kConfidenceFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string coordinates = 3;
  void clear_coordinates();
  const std::string& coordinates() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coordinates(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coordinates();
  PROTOBUF_NODISCARD std::string* release_coordinates();
  void set_allocated_coordinates(std::string* coordinates);
  private:
  const std::string& _internal_coordinates() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinates(const std::string& value);
  std::string* _internal_mutable_coordinates();
  public:

  // int32 confidence = 2;
  void clear_confidence();
  int32_t confidence() const;
  void set_confidence(int32_t value);
  private:
  int32_t _internal_confidence() const;
  void _internal_set_confidence(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.OcrImageResp.TextDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinates_;
    int32_t confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class OcrImageResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.OcrImageResp) */ {
 public:
  inline OcrImageResp() : OcrImageResp(nullptr) {}
  ~OcrImageResp() override;
  explicit PROTOBUF_CONSTEXPR OcrImageResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrImageResp(const OcrImageResp& from);
  OcrImageResp(OcrImageResp&& from) noexcept
    : OcrImageResp() {
    *this = ::std::move(from);
  }

  inline OcrImageResp& operator=(const OcrImageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrImageResp& operator=(OcrImageResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OcrImageResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrImageResp* internal_default_instance() {
    return reinterpret_cast<const OcrImageResp*>(
               &_OcrImageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(OcrImageResp& a, OcrImageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrImageResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrImageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrImageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrImageResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OcrImageResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OcrImageResp& from) {
    OcrImageResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OcrImageResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.OcrImageResp";
  }
  protected:
  explicit OcrImageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OcrImageResp_TextDetection TextDetection;

  // accessors -------------------------------------------------------

  enum : int {
    kTextsFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // repeated .cqhttp.OcrImageResp.TextDetection texts = 1;
  int texts_size() const;
  private:
  int _internal_texts_size() const;
  public:
  void clear_texts();
  ::cqhttp::OcrImageResp_TextDetection* mutable_texts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::OcrImageResp_TextDetection >*
      mutable_texts();
  private:
  const ::cqhttp::OcrImageResp_TextDetection& _internal_texts(int index) const;
  ::cqhttp::OcrImageResp_TextDetection* _internal_add_texts();
  public:
  const ::cqhttp::OcrImageResp_TextDetection& texts(int index) const;
  ::cqhttp::OcrImageResp_TextDetection* add_texts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::OcrImageResp_TextDetection >&
      texts() const;

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.OcrImageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::OcrImageResp_TextDetection > texts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupSystemMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupSystemMsg) */ {
 public:
  inline GetGroupSystemMsg() : GetGroupSystemMsg(nullptr) {}
  ~GetGroupSystemMsg() override;
  explicit PROTOBUF_CONSTEXPR GetGroupSystemMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupSystemMsg(const GetGroupSystemMsg& from);
  GetGroupSystemMsg(GetGroupSystemMsg&& from) noexcept
    : GetGroupSystemMsg() {
    *this = ::std::move(from);
  }

  inline GetGroupSystemMsg& operator=(const GetGroupSystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupSystemMsg& operator=(GetGroupSystemMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupSystemMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupSystemMsg* internal_default_instance() {
    return reinterpret_cast<const GetGroupSystemMsg*>(
               &_GetGroupSystemMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(GetGroupSystemMsg& a, GetGroupSystemMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupSystemMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupSystemMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupSystemMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupSystemMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupSystemMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupSystemMsg& from) {
    GetGroupSystemMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupSystemMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupSystemMsg";
  }
  protected:
  explicit GetGroupSystemMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupSystemMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupSystemMsgResp_InvitedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupSystemMsgResp.InvitedRequest) */ {
 public:
  inline GetGroupSystemMsgResp_InvitedRequest() : GetGroupSystemMsgResp_InvitedRequest(nullptr) {}
  ~GetGroupSystemMsgResp_InvitedRequest() override;
  explicit PROTOBUF_CONSTEXPR GetGroupSystemMsgResp_InvitedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupSystemMsgResp_InvitedRequest(const GetGroupSystemMsgResp_InvitedRequest& from);
  GetGroupSystemMsgResp_InvitedRequest(GetGroupSystemMsgResp_InvitedRequest&& from) noexcept
    : GetGroupSystemMsgResp_InvitedRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupSystemMsgResp_InvitedRequest& operator=(const GetGroupSystemMsgResp_InvitedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupSystemMsgResp_InvitedRequest& operator=(GetGroupSystemMsgResp_InvitedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupSystemMsgResp_InvitedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupSystemMsgResp_InvitedRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupSystemMsgResp_InvitedRequest*>(
               &_GetGroupSystemMsgResp_InvitedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(GetGroupSystemMsgResp_InvitedRequest& a, GetGroupSystemMsgResp_InvitedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupSystemMsgResp_InvitedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupSystemMsgResp_InvitedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupSystemMsgResp_InvitedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupSystemMsgResp_InvitedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupSystemMsgResp_InvitedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupSystemMsgResp_InvitedRequest& from) {
    GetGroupSystemMsgResp_InvitedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupSystemMsgResp_InvitedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupSystemMsgResp.InvitedRequest";
  }
  protected:
  explicit GetGroupSystemMsgResp_InvitedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitorNickFieldNumber = 3,
    kGroupNameFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kInvitorUinFieldNumber = 2,
    kGroupIdFieldNumber = 4,
    kActorFieldNumber = 7,
    kCheckedFieldNumber = 6,
  };
  // string invitor_nick = 3;
  void clear_invitor_nick();
  const std::string& invitor_nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitor_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitor_nick();
  PROTOBUF_NODISCARD std::string* release_invitor_nick();
  void set_allocated_invitor_nick(std::string* invitor_nick);
  private:
  const std::string& _internal_invitor_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitor_nick(const std::string& value);
  std::string* _internal_mutable_invitor_nick();
  public:

  // string group_name = 5;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // int64 request_id = 1;
  void clear_request_id();
  int64_t request_id() const;
  void set_request_id(int64_t value);
  private:
  int64_t _internal_request_id() const;
  void _internal_set_request_id(int64_t value);
  public:

  // int64 invitor_uin = 2;
  void clear_invitor_uin();
  int64_t invitor_uin() const;
  void set_invitor_uin(int64_t value);
  private:
  int64_t _internal_invitor_uin() const;
  void _internal_set_invitor_uin(int64_t value);
  public:

  // int64 group_id = 4;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 actor = 7;
  void clear_actor();
  int64_t actor() const;
  void set_actor(int64_t value);
  private:
  int64_t _internal_actor() const;
  void _internal_set_actor(int64_t value);
  public:

  // bool checked = 6;
  void clear_checked();
  bool checked() const;
  void set_checked(bool value);
  private:
  bool _internal_checked() const;
  void _internal_set_checked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupSystemMsgResp.InvitedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitor_nick_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    int64_t request_id_;
    int64_t invitor_uin_;
    int64_t group_id_;
    int64_t actor_;
    bool checked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupSystemMsgResp_JoinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupSystemMsgResp.JoinRequest) */ {
 public:
  inline GetGroupSystemMsgResp_JoinRequest() : GetGroupSystemMsgResp_JoinRequest(nullptr) {}
  ~GetGroupSystemMsgResp_JoinRequest() override;
  explicit PROTOBUF_CONSTEXPR GetGroupSystemMsgResp_JoinRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupSystemMsgResp_JoinRequest(const GetGroupSystemMsgResp_JoinRequest& from);
  GetGroupSystemMsgResp_JoinRequest(GetGroupSystemMsgResp_JoinRequest&& from) noexcept
    : GetGroupSystemMsgResp_JoinRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupSystemMsgResp_JoinRequest& operator=(const GetGroupSystemMsgResp_JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupSystemMsgResp_JoinRequest& operator=(GetGroupSystemMsgResp_JoinRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupSystemMsgResp_JoinRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupSystemMsgResp_JoinRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupSystemMsgResp_JoinRequest*>(
               &_GetGroupSystemMsgResp_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(GetGroupSystemMsgResp_JoinRequest& a, GetGroupSystemMsgResp_JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupSystemMsgResp_JoinRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupSystemMsgResp_JoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupSystemMsgResp_JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupSystemMsgResp_JoinRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupSystemMsgResp_JoinRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupSystemMsgResp_JoinRequest& from) {
    GetGroupSystemMsgResp_JoinRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupSystemMsgResp_JoinRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupSystemMsgResp.JoinRequest";
  }
  protected:
  explicit GetGroupSystemMsgResp_JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterNickFieldNumber = 3,
    kMessageFieldNumber = 4,
    kGroupNameFieldNumber = 6,
    kRequestIdFieldNumber = 1,
    kRequesterUinFieldNumber = 2,
    kGroupIdFieldNumber = 5,
    kActorFieldNumber = 8,
    kCheckedFieldNumber = 7,
  };
  // string requester_nick = 3;
  void clear_requester_nick();
  const std::string& requester_nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_nick();
  PROTOBUF_NODISCARD std::string* release_requester_nick();
  void set_allocated_requester_nick(std::string* requester_nick);
  private:
  const std::string& _internal_requester_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_nick(const std::string& value);
  std::string* _internal_mutable_requester_nick();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string group_name = 6;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // int64 request_id = 1;
  void clear_request_id();
  int64_t request_id() const;
  void set_request_id(int64_t value);
  private:
  int64_t _internal_request_id() const;
  void _internal_set_request_id(int64_t value);
  public:

  // int64 requester_uin = 2;
  void clear_requester_uin();
  int64_t requester_uin() const;
  void set_requester_uin(int64_t value);
  private:
  int64_t _internal_requester_uin() const;
  void _internal_set_requester_uin(int64_t value);
  public:

  // int64 group_id = 5;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int64 actor = 8;
  void clear_actor();
  int64_t actor() const;
  void set_actor(int64_t value);
  private:
  int64_t _internal_actor() const;
  void _internal_set_actor(int64_t value);
  public:

  // bool checked = 7;
  void clear_checked();
  bool checked() const;
  void set_checked(bool value);
  private:
  bool _internal_checked() const;
  void _internal_set_checked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupSystemMsgResp.JoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_nick_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    int64_t request_id_;
    int64_t requester_uin_;
    int64_t group_id_;
    int64_t actor_;
    bool checked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupSystemMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupSystemMsgResp) */ {
 public:
  inline GetGroupSystemMsgResp() : GetGroupSystemMsgResp(nullptr) {}
  ~GetGroupSystemMsgResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupSystemMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupSystemMsgResp(const GetGroupSystemMsgResp& from);
  GetGroupSystemMsgResp(GetGroupSystemMsgResp&& from) noexcept
    : GetGroupSystemMsgResp() {
    *this = ::std::move(from);
  }

  inline GetGroupSystemMsgResp& operator=(const GetGroupSystemMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupSystemMsgResp& operator=(GetGroupSystemMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupSystemMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupSystemMsgResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupSystemMsgResp*>(
               &_GetGroupSystemMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(GetGroupSystemMsgResp& a, GetGroupSystemMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupSystemMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupSystemMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupSystemMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupSystemMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupSystemMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupSystemMsgResp& from) {
    GetGroupSystemMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupSystemMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupSystemMsgResp";
  }
  protected:
  explicit GetGroupSystemMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupSystemMsgResp_InvitedRequest InvitedRequest;
  typedef GetGroupSystemMsgResp_JoinRequest JoinRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kInvitedRequestsFieldNumber = 1,
    kJoinRequestsFieldNumber = 2,
  };
  // repeated .cqhttp.GetGroupSystemMsgResp.InvitedRequest invited_requests = 1;
  int invited_requests_size() const;
  private:
  int _internal_invited_requests_size() const;
  public:
  void clear_invited_requests();
  ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* mutable_invited_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_InvitedRequest >*
      mutable_invited_requests();
  private:
  const ::cqhttp::GetGroupSystemMsgResp_InvitedRequest& _internal_invited_requests(int index) const;
  ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* _internal_add_invited_requests();
  public:
  const ::cqhttp::GetGroupSystemMsgResp_InvitedRequest& invited_requests(int index) const;
  ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* add_invited_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_InvitedRequest >&
      invited_requests() const;

  // repeated .cqhttp.GetGroupSystemMsgResp.JoinRequest join_requests = 2;
  int join_requests_size() const;
  private:
  int _internal_join_requests_size() const;
  public:
  void clear_join_requests();
  ::cqhttp::GetGroupSystemMsgResp_JoinRequest* mutable_join_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_JoinRequest >*
      mutable_join_requests();
  private:
  const ::cqhttp::GetGroupSystemMsgResp_JoinRequest& _internal_join_requests(int index) const;
  ::cqhttp::GetGroupSystemMsgResp_JoinRequest* _internal_add_join_requests();
  public:
  const ::cqhttp::GetGroupSystemMsgResp_JoinRequest& join_requests(int index) const;
  ::cqhttp::GetGroupSystemMsgResp_JoinRequest* add_join_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_JoinRequest >&
      join_requests() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupSystemMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_InvitedRequest > invited_requests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_JoinRequest > join_requests_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UploadPrivateFile_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UploadPrivateFile.Params) */ {
 public:
  inline UploadPrivateFile_Params() : UploadPrivateFile_Params(nullptr) {}
  ~UploadPrivateFile_Params() override;
  explicit PROTOBUF_CONSTEXPR UploadPrivateFile_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadPrivateFile_Params(const UploadPrivateFile_Params& from);
  UploadPrivateFile_Params(UploadPrivateFile_Params&& from) noexcept
    : UploadPrivateFile_Params() {
    *this = ::std::move(from);
  }

  inline UploadPrivateFile_Params& operator=(const UploadPrivateFile_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadPrivateFile_Params& operator=(UploadPrivateFile_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadPrivateFile_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadPrivateFile_Params* internal_default_instance() {
    return reinterpret_cast<const UploadPrivateFile_Params*>(
               &_UploadPrivateFile_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(UploadPrivateFile_Params& a, UploadPrivateFile_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadPrivateFile_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadPrivateFile_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadPrivateFile_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadPrivateFile_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadPrivateFile_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadPrivateFile_Params& from) {
    UploadPrivateFile_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadPrivateFile_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UploadPrivateFile.Params";
  }
  protected:
  explicit UploadPrivateFile_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kNameFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string file = 2;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.UploadPrivateFile.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UploadPrivateFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UploadPrivateFile) */ {
 public:
  inline UploadPrivateFile() : UploadPrivateFile(nullptr) {}
  ~UploadPrivateFile() override;
  explicit PROTOBUF_CONSTEXPR UploadPrivateFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadPrivateFile(const UploadPrivateFile& from);
  UploadPrivateFile(UploadPrivateFile&& from) noexcept
    : UploadPrivateFile() {
    *this = ::std::move(from);
  }

  inline UploadPrivateFile& operator=(const UploadPrivateFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadPrivateFile& operator=(UploadPrivateFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadPrivateFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadPrivateFile* internal_default_instance() {
    return reinterpret_cast<const UploadPrivateFile*>(
               &_UploadPrivateFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(UploadPrivateFile& a, UploadPrivateFile& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadPrivateFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadPrivateFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadPrivateFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadPrivateFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadPrivateFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadPrivateFile& from) {
    UploadPrivateFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadPrivateFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UploadPrivateFile";
  }
  protected:
  explicit UploadPrivateFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UploadPrivateFile_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.UploadPrivateFile.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::UploadPrivateFile_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::UploadPrivateFile_Params* release_params();
  ::cqhttp::UploadPrivateFile_Params* mutable_params();
  void set_allocated_params(::cqhttp::UploadPrivateFile_Params* params);
  private:
  const ::cqhttp::UploadPrivateFile_Params& _internal_params() const;
  ::cqhttp::UploadPrivateFile_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::UploadPrivateFile_Params* params);
  ::cqhttp::UploadPrivateFile_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.UploadPrivateFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::UploadPrivateFile_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UploadGroupFile_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UploadGroupFile.Params) */ {
 public:
  inline UploadGroupFile_Params() : UploadGroupFile_Params(nullptr) {}
  ~UploadGroupFile_Params() override;
  explicit PROTOBUF_CONSTEXPR UploadGroupFile_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGroupFile_Params(const UploadGroupFile_Params& from);
  UploadGroupFile_Params(UploadGroupFile_Params&& from) noexcept
    : UploadGroupFile_Params() {
    *this = ::std::move(from);
  }

  inline UploadGroupFile_Params& operator=(const UploadGroupFile_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGroupFile_Params& operator=(UploadGroupFile_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGroupFile_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGroupFile_Params* internal_default_instance() {
    return reinterpret_cast<const UploadGroupFile_Params*>(
               &_UploadGroupFile_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(UploadGroupFile_Params& a, UploadGroupFile_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGroupFile_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGroupFile_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadGroupFile_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadGroupFile_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGroupFile_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadGroupFile_Params& from) {
    UploadGroupFile_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGroupFile_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UploadGroupFile.Params";
  }
  protected:
  explicit UploadGroupFile_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kNameFieldNumber = 3,
    kFolderFieldNumber = 4,
    kGroupIdFieldNumber = 1,
  };
  // string file = 2;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string folder = 4;
  void clear_folder();
  const std::string& folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder();
  PROTOBUF_NODISCARD std::string* release_folder();
  void set_allocated_folder(std::string* folder);
  private:
  const std::string& _internal_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder(const std::string& value);
  std::string* _internal_mutable_folder();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.UploadGroupFile.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UploadGroupFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.UploadGroupFile) */ {
 public:
  inline UploadGroupFile() : UploadGroupFile(nullptr) {}
  ~UploadGroupFile() override;
  explicit PROTOBUF_CONSTEXPR UploadGroupFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGroupFile(const UploadGroupFile& from);
  UploadGroupFile(UploadGroupFile&& from) noexcept
    : UploadGroupFile() {
    *this = ::std::move(from);
  }

  inline UploadGroupFile& operator=(const UploadGroupFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGroupFile& operator=(UploadGroupFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGroupFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGroupFile* internal_default_instance() {
    return reinterpret_cast<const UploadGroupFile*>(
               &_UploadGroupFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(UploadGroupFile& a, UploadGroupFile& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGroupFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGroupFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadGroupFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadGroupFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGroupFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadGroupFile& from) {
    UploadGroupFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGroupFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.UploadGroupFile";
  }
  protected:
  explicit UploadGroupFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UploadGroupFile_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.UploadGroupFile.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::UploadGroupFile_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::UploadGroupFile_Params* release_params();
  ::cqhttp::UploadGroupFile_Params* mutable_params();
  void set_allocated_params(::cqhttp::UploadGroupFile_Params* params);
  private:
  const ::cqhttp::UploadGroupFile_Params& _internal_params() const;
  ::cqhttp::UploadGroupFile_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::UploadGroupFile_Params* params);
  ::cqhttp::UploadGroupFile_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.UploadGroupFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::UploadGroupFile_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupFileSystemInfo_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupFileSystemInfo.Params) */ {
 public:
  inline GetGroupFileSystemInfo_Params() : GetGroupFileSystemInfo_Params(nullptr) {}
  ~GetGroupFileSystemInfo_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupFileSystemInfo_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupFileSystemInfo_Params(const GetGroupFileSystemInfo_Params& from);
  GetGroupFileSystemInfo_Params(GetGroupFileSystemInfo_Params&& from) noexcept
    : GetGroupFileSystemInfo_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupFileSystemInfo_Params& operator=(const GetGroupFileSystemInfo_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupFileSystemInfo_Params& operator=(GetGroupFileSystemInfo_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupFileSystemInfo_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupFileSystemInfo_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupFileSystemInfo_Params*>(
               &_GetGroupFileSystemInfo_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(GetGroupFileSystemInfo_Params& a, GetGroupFileSystemInfo_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupFileSystemInfo_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupFileSystemInfo_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupFileSystemInfo_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupFileSystemInfo_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupFileSystemInfo_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupFileSystemInfo_Params& from) {
    GetGroupFileSystemInfo_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupFileSystemInfo_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupFileSystemInfo.Params";
  }
  protected:
  explicit GetGroupFileSystemInfo_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupFileSystemInfo.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupFileSystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupFileSystemInfo) */ {
 public:
  inline GetGroupFileSystemInfo() : GetGroupFileSystemInfo(nullptr) {}
  ~GetGroupFileSystemInfo() override;
  explicit PROTOBUF_CONSTEXPR GetGroupFileSystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupFileSystemInfo(const GetGroupFileSystemInfo& from);
  GetGroupFileSystemInfo(GetGroupFileSystemInfo&& from) noexcept
    : GetGroupFileSystemInfo() {
    *this = ::std::move(from);
  }

  inline GetGroupFileSystemInfo& operator=(const GetGroupFileSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupFileSystemInfo& operator=(GetGroupFileSystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupFileSystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupFileSystemInfo* internal_default_instance() {
    return reinterpret_cast<const GetGroupFileSystemInfo*>(
               &_GetGroupFileSystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(GetGroupFileSystemInfo& a, GetGroupFileSystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupFileSystemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupFileSystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupFileSystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupFileSystemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupFileSystemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupFileSystemInfo& from) {
    GetGroupFileSystemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupFileSystemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupFileSystemInfo";
  }
  protected:
  explicit GetGroupFileSystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupFileSystemInfo_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupFileSystemInfo.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupFileSystemInfo_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupFileSystemInfo_Params* release_params();
  ::cqhttp::GetGroupFileSystemInfo_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupFileSystemInfo_Params* params);
  private:
  const ::cqhttp::GetGroupFileSystemInfo_Params& _internal_params() const;
  ::cqhttp::GetGroupFileSystemInfo_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupFileSystemInfo_Params* params);
  ::cqhttp::GetGroupFileSystemInfo_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupFileSystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupFileSystemInfo_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupFileSystemInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupFileSystemInfoResp) */ {
 public:
  inline GetGroupFileSystemInfoResp() : GetGroupFileSystemInfoResp(nullptr) {}
  ~GetGroupFileSystemInfoResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupFileSystemInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupFileSystemInfoResp(const GetGroupFileSystemInfoResp& from);
  GetGroupFileSystemInfoResp(GetGroupFileSystemInfoResp&& from) noexcept
    : GetGroupFileSystemInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupFileSystemInfoResp& operator=(const GetGroupFileSystemInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupFileSystemInfoResp& operator=(GetGroupFileSystemInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupFileSystemInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupFileSystemInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupFileSystemInfoResp*>(
               &_GetGroupFileSystemInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(GetGroupFileSystemInfoResp& a, GetGroupFileSystemInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupFileSystemInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupFileSystemInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupFileSystemInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupFileSystemInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupFileSystemInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupFileSystemInfoResp& from) {
    GetGroupFileSystemInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupFileSystemInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupFileSystemInfoResp";
  }
  protected:
  explicit GetGroupFileSystemInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileCountFieldNumber = 1,
    kLimitCountFieldNumber = 2,
    kUsedSpaceFieldNumber = 3,
    kTotalSpaceFieldNumber = 4,
  };
  // int32 file_count = 1;
  void clear_file_count();
  int32_t file_count() const;
  void set_file_count(int32_t value);
  private:
  int32_t _internal_file_count() const;
  void _internal_set_file_count(int32_t value);
  public:

  // int32 limit_count = 2;
  void clear_limit_count();
  int32_t limit_count() const;
  void set_limit_count(int32_t value);
  private:
  int32_t _internal_limit_count() const;
  void _internal_set_limit_count(int32_t value);
  public:

  // int64 used_space = 3;
  void clear_used_space();
  int64_t used_space() const;
  void set_used_space(int64_t value);
  private:
  int64_t _internal_used_space() const;
  void _internal_set_used_space(int64_t value);
  public:

  // int64 total_space = 4;
  void clear_total_space();
  int64_t total_space() const;
  void set_total_space(int64_t value);
  private:
  int64_t _internal_total_space() const;
  void _internal_set_total_space(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupFileSystemInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t file_count_;
    int32_t limit_count_;
    int64_t used_space_;
    int64_t total_space_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupRootFiles_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupRootFiles.Params) */ {
 public:
  inline GetGroupRootFiles_Params() : GetGroupRootFiles_Params(nullptr) {}
  ~GetGroupRootFiles_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupRootFiles_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupRootFiles_Params(const GetGroupRootFiles_Params& from);
  GetGroupRootFiles_Params(GetGroupRootFiles_Params&& from) noexcept
    : GetGroupRootFiles_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupRootFiles_Params& operator=(const GetGroupRootFiles_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupRootFiles_Params& operator=(GetGroupRootFiles_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupRootFiles_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupRootFiles_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupRootFiles_Params*>(
               &_GetGroupRootFiles_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(GetGroupRootFiles_Params& a, GetGroupRootFiles_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupRootFiles_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupRootFiles_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupRootFiles_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupRootFiles_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupRootFiles_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupRootFiles_Params& from) {
    GetGroupRootFiles_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupRootFiles_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupRootFiles.Params";
  }
  protected:
  explicit GetGroupRootFiles_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupRootFiles.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupRootFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupRootFiles) */ {
 public:
  inline GetGroupRootFiles() : GetGroupRootFiles(nullptr) {}
  ~GetGroupRootFiles() override;
  explicit PROTOBUF_CONSTEXPR GetGroupRootFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupRootFiles(const GetGroupRootFiles& from);
  GetGroupRootFiles(GetGroupRootFiles&& from) noexcept
    : GetGroupRootFiles() {
    *this = ::std::move(from);
  }

  inline GetGroupRootFiles& operator=(const GetGroupRootFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupRootFiles& operator=(GetGroupRootFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupRootFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupRootFiles* internal_default_instance() {
    return reinterpret_cast<const GetGroupRootFiles*>(
               &_GetGroupRootFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GetGroupRootFiles& a, GetGroupRootFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupRootFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupRootFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupRootFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupRootFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupRootFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupRootFiles& from) {
    GetGroupRootFiles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupRootFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupRootFiles";
  }
  protected:
  explicit GetGroupRootFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupRootFiles_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupRootFiles.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupRootFiles_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupRootFiles_Params* release_params();
  ::cqhttp::GetGroupRootFiles_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupRootFiles_Params* params);
  private:
  const ::cqhttp::GetGroupRootFiles_Params& _internal_params() const;
  ::cqhttp::GetGroupRootFiles_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupRootFiles_Params* params);
  ::cqhttp::GetGroupRootFiles_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupRootFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupRootFiles_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupRootFilesResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupRootFilesResp) */ {
 public:
  inline GetGroupRootFilesResp() : GetGroupRootFilesResp(nullptr) {}
  ~GetGroupRootFilesResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupRootFilesResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupRootFilesResp(const GetGroupRootFilesResp& from);
  GetGroupRootFilesResp(GetGroupRootFilesResp&& from) noexcept
    : GetGroupRootFilesResp() {
    *this = ::std::move(from);
  }

  inline GetGroupRootFilesResp& operator=(const GetGroupRootFilesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupRootFilesResp& operator=(GetGroupRootFilesResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupRootFilesResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupRootFilesResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupRootFilesResp*>(
               &_GetGroupRootFilesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(GetGroupRootFilesResp& a, GetGroupRootFilesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupRootFilesResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupRootFilesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupRootFilesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupRootFilesResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupRootFilesResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupRootFilesResp& from) {
    GetGroupRootFilesResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupRootFilesResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupRootFilesResp";
  }
  protected:
  explicit GetGroupRootFilesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kFoldersFieldNumber = 2,
  };
  // repeated .cqhttp.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::cqhttp::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >*
      mutable_files();
  private:
  const ::cqhttp::File& _internal_files(int index) const;
  ::cqhttp::File* _internal_add_files();
  public:
  const ::cqhttp::File& files(int index) const;
  ::cqhttp::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >&
      files() const;

  // repeated .cqhttp.Folder folders = 2;
  int folders_size() const;
  private:
  int _internal_folders_size() const;
  public:
  void clear_folders();
  ::cqhttp::Folder* mutable_folders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >*
      mutable_folders();
  private:
  const ::cqhttp::Folder& _internal_folders(int index) const;
  ::cqhttp::Folder* _internal_add_folders();
  public:
  const ::cqhttp::Folder& folders(int index) const;
  ::cqhttp::Folder* add_folders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >&
      folders() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupRootFilesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File > files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder > folders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class getGroupFileByFolder_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.getGroupFileByFolder.Params) */ {
 public:
  inline getGroupFileByFolder_Params() : getGroupFileByFolder_Params(nullptr) {}
  ~getGroupFileByFolder_Params() override;
  explicit PROTOBUF_CONSTEXPR getGroupFileByFolder_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGroupFileByFolder_Params(const getGroupFileByFolder_Params& from);
  getGroupFileByFolder_Params(getGroupFileByFolder_Params&& from) noexcept
    : getGroupFileByFolder_Params() {
    *this = ::std::move(from);
  }

  inline getGroupFileByFolder_Params& operator=(const getGroupFileByFolder_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGroupFileByFolder_Params& operator=(getGroupFileByFolder_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getGroupFileByFolder_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGroupFileByFolder_Params* internal_default_instance() {
    return reinterpret_cast<const getGroupFileByFolder_Params*>(
               &_getGroupFileByFolder_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(getGroupFileByFolder_Params& a, getGroupFileByFolder_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(getGroupFileByFolder_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGroupFileByFolder_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getGroupFileByFolder_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getGroupFileByFolder_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getGroupFileByFolder_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getGroupFileByFolder_Params& from) {
    getGroupFileByFolder_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGroupFileByFolder_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.getGroupFileByFolder.Params";
  }
  protected:
  explicit getGroupFileByFolder_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string folder_id = 2;
  void clear_folder_id();
  const std::string& folder_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder_id();
  PROTOBUF_NODISCARD std::string* release_folder_id();
  void set_allocated_folder_id(std::string* folder_id);
  private:
  const std::string& _internal_folder_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder_id(const std::string& value);
  std::string* _internal_mutable_folder_id();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.getGroupFileByFolder.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_id_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class getGroupFileByFolder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.getGroupFileByFolder) */ {
 public:
  inline getGroupFileByFolder() : getGroupFileByFolder(nullptr) {}
  ~getGroupFileByFolder() override;
  explicit PROTOBUF_CONSTEXPR getGroupFileByFolder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGroupFileByFolder(const getGroupFileByFolder& from);
  getGroupFileByFolder(getGroupFileByFolder&& from) noexcept
    : getGroupFileByFolder() {
    *this = ::std::move(from);
  }

  inline getGroupFileByFolder& operator=(const getGroupFileByFolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGroupFileByFolder& operator=(getGroupFileByFolder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getGroupFileByFolder& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGroupFileByFolder* internal_default_instance() {
    return reinterpret_cast<const getGroupFileByFolder*>(
               &_getGroupFileByFolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(getGroupFileByFolder& a, getGroupFileByFolder& b) {
    a.Swap(&b);
  }
  inline void Swap(getGroupFileByFolder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGroupFileByFolder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getGroupFileByFolder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getGroupFileByFolder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getGroupFileByFolder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getGroupFileByFolder& from) {
    getGroupFileByFolder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGroupFileByFolder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.getGroupFileByFolder";
  }
  protected:
  explicit getGroupFileByFolder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef getGroupFileByFolder_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.getGroupFileByFolder.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::getGroupFileByFolder_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::getGroupFileByFolder_Params* release_params();
  ::cqhttp::getGroupFileByFolder_Params* mutable_params();
  void set_allocated_params(::cqhttp::getGroupFileByFolder_Params* params);
  private:
  const ::cqhttp::getGroupFileByFolder_Params& _internal_params() const;
  ::cqhttp::getGroupFileByFolder_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::getGroupFileByFolder_Params* params);
  ::cqhttp::getGroupFileByFolder_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.getGroupFileByFolder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::getGroupFileByFolder_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class getGroupFileByFolderResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.getGroupFileByFolderResp) */ {
 public:
  inline getGroupFileByFolderResp() : getGroupFileByFolderResp(nullptr) {}
  ~getGroupFileByFolderResp() override;
  explicit PROTOBUF_CONSTEXPR getGroupFileByFolderResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGroupFileByFolderResp(const getGroupFileByFolderResp& from);
  getGroupFileByFolderResp(getGroupFileByFolderResp&& from) noexcept
    : getGroupFileByFolderResp() {
    *this = ::std::move(from);
  }

  inline getGroupFileByFolderResp& operator=(const getGroupFileByFolderResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGroupFileByFolderResp& operator=(getGroupFileByFolderResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getGroupFileByFolderResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGroupFileByFolderResp* internal_default_instance() {
    return reinterpret_cast<const getGroupFileByFolderResp*>(
               &_getGroupFileByFolderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(getGroupFileByFolderResp& a, getGroupFileByFolderResp& b) {
    a.Swap(&b);
  }
  inline void Swap(getGroupFileByFolderResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGroupFileByFolderResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getGroupFileByFolderResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getGroupFileByFolderResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getGroupFileByFolderResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getGroupFileByFolderResp& from) {
    getGroupFileByFolderResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGroupFileByFolderResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.getGroupFileByFolderResp";
  }
  protected:
  explicit getGroupFileByFolderResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kFoldersFieldNumber = 2,
  };
  // repeated .cqhttp.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::cqhttp::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >*
      mutable_files();
  private:
  const ::cqhttp::File& _internal_files(int index) const;
  ::cqhttp::File* _internal_add_files();
  public:
  const ::cqhttp::File& files(int index) const;
  ::cqhttp::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >&
      files() const;

  // repeated .cqhttp.Folder folders = 2;
  int folders_size() const;
  private:
  int _internal_folders_size() const;
  public:
  void clear_folders();
  ::cqhttp::Folder* mutable_folders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >*
      mutable_folders();
  private:
  const ::cqhttp::Folder& _internal_folders(int index) const;
  ::cqhttp::Folder* _internal_add_folders();
  public:
  const ::cqhttp::Folder& folders(int index) const;
  ::cqhttp::Folder* add_folders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >&
      folders() const;

  // @@protoc_insertion_point(class_scope:cqhttp.getGroupFileByFolderResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File > files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder > folders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupFileFolder_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CreateGroupFileFolder.Params) */ {
 public:
  inline CreateGroupFileFolder_Params() : CreateGroupFileFolder_Params(nullptr) {}
  ~CreateGroupFileFolder_Params() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupFileFolder_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupFileFolder_Params(const CreateGroupFileFolder_Params& from);
  CreateGroupFileFolder_Params(CreateGroupFileFolder_Params&& from) noexcept
    : CreateGroupFileFolder_Params() {
    *this = ::std::move(from);
  }

  inline CreateGroupFileFolder_Params& operator=(const CreateGroupFileFolder_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupFileFolder_Params& operator=(CreateGroupFileFolder_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupFileFolder_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupFileFolder_Params* internal_default_instance() {
    return reinterpret_cast<const CreateGroupFileFolder_Params*>(
               &_CreateGroupFileFolder_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CreateGroupFileFolder_Params& a, CreateGroupFileFolder_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupFileFolder_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupFileFolder_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupFileFolder_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupFileFolder_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupFileFolder_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupFileFolder_Params& from) {
    CreateGroupFileFolder_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupFileFolder_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CreateGroupFileFolder.Params";
  }
  protected:
  explicit CreateGroupFileFolder_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kParentIdFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string parent_id = 3;
  void clear_parent_id();
  const std::string& parent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_id();
  PROTOBUF_NODISCARD std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CreateGroupFileFolder.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupFileFolder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CreateGroupFileFolder) */ {
 public:
  inline CreateGroupFileFolder() : CreateGroupFileFolder(nullptr) {}
  ~CreateGroupFileFolder() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupFileFolder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupFileFolder(const CreateGroupFileFolder& from);
  CreateGroupFileFolder(CreateGroupFileFolder&& from) noexcept
    : CreateGroupFileFolder() {
    *this = ::std::move(from);
  }

  inline CreateGroupFileFolder& operator=(const CreateGroupFileFolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupFileFolder& operator=(CreateGroupFileFolder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupFileFolder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupFileFolder* internal_default_instance() {
    return reinterpret_cast<const CreateGroupFileFolder*>(
               &_CreateGroupFileFolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CreateGroupFileFolder& a, CreateGroupFileFolder& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupFileFolder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupFileFolder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupFileFolder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupFileFolder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupFileFolder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupFileFolder& from) {
    CreateGroupFileFolder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupFileFolder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CreateGroupFileFolder";
  }
  protected:
  explicit CreateGroupFileFolder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateGroupFileFolder_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.CreateGroupFileFolder.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::CreateGroupFileFolder_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::CreateGroupFileFolder_Params* release_params();
  ::cqhttp::CreateGroupFileFolder_Params* mutable_params();
  void set_allocated_params(::cqhttp::CreateGroupFileFolder_Params* params);
  private:
  const ::cqhttp::CreateGroupFileFolder_Params& _internal_params() const;
  ::cqhttp::CreateGroupFileFolder_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::CreateGroupFileFolder_Params* params);
  ::cqhttp::CreateGroupFileFolder_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.CreateGroupFileFolder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::CreateGroupFileFolder_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupFolder_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteGroupFolder.Params) */ {
 public:
  inline DeleteGroupFolder_Params() : DeleteGroupFolder_Params(nullptr) {}
  ~DeleteGroupFolder_Params() override;
  explicit PROTOBUF_CONSTEXPR DeleteGroupFolder_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupFolder_Params(const DeleteGroupFolder_Params& from);
  DeleteGroupFolder_Params(DeleteGroupFolder_Params&& from) noexcept
    : DeleteGroupFolder_Params() {
    *this = ::std::move(from);
  }

  inline DeleteGroupFolder_Params& operator=(const DeleteGroupFolder_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupFolder_Params& operator=(DeleteGroupFolder_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupFolder_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupFolder_Params* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupFolder_Params*>(
               &_DeleteGroupFolder_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(DeleteGroupFolder_Params& a, DeleteGroupFolder_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupFolder_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupFolder_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteGroupFolder_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteGroupFolder_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupFolder_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteGroupFolder_Params& from) {
    DeleteGroupFolder_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupFolder_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteGroupFolder.Params";
  }
  protected:
  explicit DeleteGroupFolder_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string folder_id = 2;
  void clear_folder_id();
  const std::string& folder_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder_id();
  PROTOBUF_NODISCARD std::string* release_folder_id();
  void set_allocated_folder_id(std::string* folder_id);
  private:
  const std::string& _internal_folder_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder_id(const std::string& value);
  std::string* _internal_mutable_folder_id();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteGroupFolder.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_id_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupFolder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteGroupFolder) */ {
 public:
  inline DeleteGroupFolder() : DeleteGroupFolder(nullptr) {}
  ~DeleteGroupFolder() override;
  explicit PROTOBUF_CONSTEXPR DeleteGroupFolder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupFolder(const DeleteGroupFolder& from);
  DeleteGroupFolder(DeleteGroupFolder&& from) noexcept
    : DeleteGroupFolder() {
    *this = ::std::move(from);
  }

  inline DeleteGroupFolder& operator=(const DeleteGroupFolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupFolder& operator=(DeleteGroupFolder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupFolder& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupFolder* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupFolder*>(
               &_DeleteGroupFolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(DeleteGroupFolder& a, DeleteGroupFolder& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupFolder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupFolder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteGroupFolder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteGroupFolder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupFolder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteGroupFolder& from) {
    DeleteGroupFolder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupFolder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteGroupFolder";
  }
  protected:
  explicit DeleteGroupFolder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeleteGroupFolder_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.DeleteGroupFolder.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DeleteGroupFolder_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DeleteGroupFolder_Params* release_params();
  ::cqhttp::DeleteGroupFolder_Params* mutable_params();
  void set_allocated_params(::cqhttp::DeleteGroupFolder_Params* params);
  private:
  const ::cqhttp::DeleteGroupFolder_Params& _internal_params() const;
  ::cqhttp::DeleteGroupFolder_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DeleteGroupFolder_Params* params);
  ::cqhttp::DeleteGroupFolder_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteGroupFolder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::DeleteGroupFolder_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupFile_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteGroupFile.Params) */ {
 public:
  inline DeleteGroupFile_Params() : DeleteGroupFile_Params(nullptr) {}
  ~DeleteGroupFile_Params() override;
  explicit PROTOBUF_CONSTEXPR DeleteGroupFile_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupFile_Params(const DeleteGroupFile_Params& from);
  DeleteGroupFile_Params(DeleteGroupFile_Params&& from) noexcept
    : DeleteGroupFile_Params() {
    *this = ::std::move(from);
  }

  inline DeleteGroupFile_Params& operator=(const DeleteGroupFile_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupFile_Params& operator=(DeleteGroupFile_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupFile_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupFile_Params* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupFile_Params*>(
               &_DeleteGroupFile_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(DeleteGroupFile_Params& a, DeleteGroupFile_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupFile_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupFile_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteGroupFile_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteGroupFile_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupFile_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteGroupFile_Params& from) {
    DeleteGroupFile_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupFile_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteGroupFile.Params";
  }
  protected:
  explicit DeleteGroupFile_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kBusidFieldNumber = 3,
  };
  // string file_id = 2;
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int32 busid = 3;
  void clear_busid();
  int32_t busid() const;
  void set_busid(int32_t value);
  private:
  int32_t _internal_busid() const;
  void _internal_set_busid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteGroupFile.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
    int64_t group_id_;
    int32_t busid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteGroupFile) */ {
 public:
  inline DeleteGroupFile() : DeleteGroupFile(nullptr) {}
  ~DeleteGroupFile() override;
  explicit PROTOBUF_CONSTEXPR DeleteGroupFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupFile(const DeleteGroupFile& from);
  DeleteGroupFile(DeleteGroupFile&& from) noexcept
    : DeleteGroupFile() {
    *this = ::std::move(from);
  }

  inline DeleteGroupFile& operator=(const DeleteGroupFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupFile& operator=(DeleteGroupFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupFile* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupFile*>(
               &_DeleteGroupFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(DeleteGroupFile& a, DeleteGroupFile& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteGroupFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteGroupFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteGroupFile& from) {
    DeleteGroupFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteGroupFile";
  }
  protected:
  explicit DeleteGroupFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeleteGroupFile_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.DeleteGroupFile.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DeleteGroupFile_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DeleteGroupFile_Params* release_params();
  ::cqhttp::DeleteGroupFile_Params* mutable_params();
  void set_allocated_params(::cqhttp::DeleteGroupFile_Params* params);
  private:
  const ::cqhttp::DeleteGroupFile_Params& _internal_params() const;
  ::cqhttp::DeleteGroupFile_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DeleteGroupFile_Params* params);
  ::cqhttp::DeleteGroupFile_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteGroupFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::DeleteGroupFile_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupFileUrl_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupFileUrl.Params) */ {
 public:
  inline GetGroupFileUrl_Params() : GetGroupFileUrl_Params(nullptr) {}
  ~GetGroupFileUrl_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupFileUrl_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupFileUrl_Params(const GetGroupFileUrl_Params& from);
  GetGroupFileUrl_Params(GetGroupFileUrl_Params&& from) noexcept
    : GetGroupFileUrl_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupFileUrl_Params& operator=(const GetGroupFileUrl_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupFileUrl_Params& operator=(GetGroupFileUrl_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupFileUrl_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupFileUrl_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupFileUrl_Params*>(
               &_GetGroupFileUrl_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(GetGroupFileUrl_Params& a, GetGroupFileUrl_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupFileUrl_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupFileUrl_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupFileUrl_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupFileUrl_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupFileUrl_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupFileUrl_Params& from) {
    GetGroupFileUrl_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupFileUrl_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupFileUrl.Params";
  }
  protected:
  explicit GetGroupFileUrl_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kBusidFieldNumber = 3,
  };
  // string file_id = 2;
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // int32 busid = 3;
  void clear_busid();
  int32_t busid() const;
  void set_busid(int32_t value);
  private:
  int32_t _internal_busid() const;
  void _internal_set_busid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupFileUrl.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
    int64_t group_id_;
    int32_t busid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupFileUrl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupFileUrl) */ {
 public:
  inline GetGroupFileUrl() : GetGroupFileUrl(nullptr) {}
  ~GetGroupFileUrl() override;
  explicit PROTOBUF_CONSTEXPR GetGroupFileUrl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupFileUrl(const GetGroupFileUrl& from);
  GetGroupFileUrl(GetGroupFileUrl&& from) noexcept
    : GetGroupFileUrl() {
    *this = ::std::move(from);
  }

  inline GetGroupFileUrl& operator=(const GetGroupFileUrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupFileUrl& operator=(GetGroupFileUrl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupFileUrl& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupFileUrl* internal_default_instance() {
    return reinterpret_cast<const GetGroupFileUrl*>(
               &_GetGroupFileUrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(GetGroupFileUrl& a, GetGroupFileUrl& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupFileUrl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupFileUrl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupFileUrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupFileUrl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupFileUrl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupFileUrl& from) {
    GetGroupFileUrl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupFileUrl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupFileUrl";
  }
  protected:
  explicit GetGroupFileUrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupFileUrl_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupFileUrl.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupFileUrl_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupFileUrl_Params* release_params();
  ::cqhttp::GetGroupFileUrl_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupFileUrl_Params* params);
  private:
  const ::cqhttp::GetGroupFileUrl_Params& _internal_params() const;
  ::cqhttp::GetGroupFileUrl_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupFileUrl_Params* params);
  ::cqhttp::GetGroupFileUrl_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupFileUrl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupFileUrl_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupFileUrlResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupFileUrlResp) */ {
 public:
  inline GetGroupFileUrlResp() : GetGroupFileUrlResp(nullptr) {}
  ~GetGroupFileUrlResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupFileUrlResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupFileUrlResp(const GetGroupFileUrlResp& from);
  GetGroupFileUrlResp(GetGroupFileUrlResp&& from) noexcept
    : GetGroupFileUrlResp() {
    *this = ::std::move(from);
  }

  inline GetGroupFileUrlResp& operator=(const GetGroupFileUrlResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupFileUrlResp& operator=(GetGroupFileUrlResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupFileUrlResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupFileUrlResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupFileUrlResp*>(
               &_GetGroupFileUrlResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(GetGroupFileUrlResp& a, GetGroupFileUrlResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupFileUrlResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupFileUrlResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupFileUrlResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupFileUrlResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupFileUrlResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupFileUrlResp& from) {
    GetGroupFileUrlResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupFileUrlResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupFileUrlResp";
  }
  protected:
  explicit GetGroupFileUrlResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupFileUrlResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetStatus) */ {
 public:
  inline GetStatus() : GetStatus(nullptr) {}
  ~GetStatus() override;
  explicit PROTOBUF_CONSTEXPR GetStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatus(const GetStatus& from);
  GetStatus(GetStatus&& from) noexcept
    : GetStatus() {
    *this = ::std::move(from);
  }

  inline GetStatus& operator=(const GetStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatus& operator=(GetStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatus* internal_default_instance() {
    return reinterpret_cast<const GetStatus*>(
               &_GetStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(GetStatus& a, GetStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatus& from) {
    GetStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetStatus";
  }
  protected:
  explicit GetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 2;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResp_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetStatusResp.Statistics) */ {
 public:
  inline GetStatusResp_Statistics() : GetStatusResp_Statistics(nullptr) {}
  ~GetStatusResp_Statistics() override;
  explicit PROTOBUF_CONSTEXPR GetStatusResp_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusResp_Statistics(const GetStatusResp_Statistics& from);
  GetStatusResp_Statistics(GetStatusResp_Statistics&& from) noexcept
    : GetStatusResp_Statistics() {
    *this = ::std::move(from);
  }

  inline GetStatusResp_Statistics& operator=(const GetStatusResp_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResp_Statistics& operator=(GetStatusResp_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusResp_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusResp_Statistics* internal_default_instance() {
    return reinterpret_cast<const GetStatusResp_Statistics*>(
               &_GetStatusResp_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(GetStatusResp_Statistics& a, GetStatusResp_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResp_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResp_Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusResp_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusResp_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusResp_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatusResp_Statistics& from) {
    GetStatusResp_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResp_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetStatusResp.Statistics";
  }
  protected:
  explicit GetStatusResp_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketReceivedFieldNumber = 1,
    kPacketSentFieldNumber = 2,
    kMessageReceivedFieldNumber = 4,
    kPacketLostFieldNumber = 3,
    kDisconnectTimesFieldNumber = 6,
    kMessageSentFieldNumber = 5,
    kLastMessageTimeFieldNumber = 8,
    kLostTimesFieldNumber = 7,
  };
  // uint64 PacketReceived = 1;
  void clear_packetreceived();
  uint64_t packetreceived() const;
  void set_packetreceived(uint64_t value);
  private:
  uint64_t _internal_packetreceived() const;
  void _internal_set_packetreceived(uint64_t value);
  public:

  // uint64 PacketSent = 2;
  void clear_packetsent();
  uint64_t packetsent() const;
  void set_packetsent(uint64_t value);
  private:
  uint64_t _internal_packetsent() const;
  void _internal_set_packetsent(uint64_t value);
  public:

  // uint64 MessageReceived = 4;
  void clear_messagereceived();
  uint64_t messagereceived() const;
  void set_messagereceived(uint64_t value);
  private:
  uint64_t _internal_messagereceived() const;
  void _internal_set_messagereceived(uint64_t value);
  public:

  // uint32 PacketLost = 3;
  void clear_packetlost();
  uint32_t packetlost() const;
  void set_packetlost(uint32_t value);
  private:
  uint32_t _internal_packetlost() const;
  void _internal_set_packetlost(uint32_t value);
  public:

  // uint32 DisconnectTimes = 6;
  void clear_disconnecttimes();
  uint32_t disconnecttimes() const;
  void set_disconnecttimes(uint32_t value);
  private:
  uint32_t _internal_disconnecttimes() const;
  void _internal_set_disconnecttimes(uint32_t value);
  public:

  // uint64 MessageSent = 5;
  void clear_messagesent();
  uint64_t messagesent() const;
  void set_messagesent(uint64_t value);
  private:
  uint64_t _internal_messagesent() const;
  void _internal_set_messagesent(uint64_t value);
  public:

  // int64 LastMessageTime = 8;
  void clear_lastmessagetime();
  int64_t lastmessagetime() const;
  void set_lastmessagetime(int64_t value);
  private:
  int64_t _internal_lastmessagetime() const;
  void _internal_set_lastmessagetime(int64_t value);
  public:

  // uint32 LostTimes = 7;
  void clear_losttimes();
  uint32_t losttimes() const;
  void set_losttimes(uint32_t value);
  private:
  uint32_t _internal_losttimes() const;
  void _internal_set_losttimes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetStatusResp.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t packetreceived_;
    uint64_t packetsent_;
    uint64_t messagereceived_;
    uint32_t packetlost_;
    uint32_t disconnecttimes_;
    uint64_t messagesent_;
    int64_t lastmessagetime_;
    uint32_t losttimes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetStatusResp) */ {
 public:
  inline GetStatusResp() : GetStatusResp(nullptr) {}
  ~GetStatusResp() override;
  explicit PROTOBUF_CONSTEXPR GetStatusResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusResp(const GetStatusResp& from);
  GetStatusResp(GetStatusResp&& from) noexcept
    : GetStatusResp() {
    *this = ::std::move(from);
  }

  inline GetStatusResp& operator=(const GetStatusResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResp& operator=(GetStatusResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusResp* internal_default_instance() {
    return reinterpret_cast<const GetStatusResp*>(
               &_GetStatusResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(GetStatusResp& a, GetStatusResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatusResp& from) {
    GetStatusResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetStatusResp";
  }
  protected:
  explicit GetStatusResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetStatusResp_Statistics Statistics;

  // accessors -------------------------------------------------------

  enum : int {
    kStatFieldNumber = 7,
    kAppInitializedFieldNumber = 1,
    kAppEnabledFieldNumber = 2,
    kPluginsGoodFieldNumber = 3,
    kAppGoodFieldNumber = 4,
    kOnlineFieldNumber = 5,
    kGoodFieldNumber = 6,
  };
  // .cqhttp.GetStatusResp.Statistics stat = 7;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::cqhttp::GetStatusResp_Statistics& stat() const;
  PROTOBUF_NODISCARD ::cqhttp::GetStatusResp_Statistics* release_stat();
  ::cqhttp::GetStatusResp_Statistics* mutable_stat();
  void set_allocated_stat(::cqhttp::GetStatusResp_Statistics* stat);
  private:
  const ::cqhttp::GetStatusResp_Statistics& _internal_stat() const;
  ::cqhttp::GetStatusResp_Statistics* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::cqhttp::GetStatusResp_Statistics* stat);
  ::cqhttp::GetStatusResp_Statistics* unsafe_arena_release_stat();

  // bool app_initialized = 1;
  void clear_app_initialized();
  bool app_initialized() const;
  void set_app_initialized(bool value);
  private:
  bool _internal_app_initialized() const;
  void _internal_set_app_initialized(bool value);
  public:

  // bool app_enabled = 2;
  void clear_app_enabled();
  bool app_enabled() const;
  void set_app_enabled(bool value);
  private:
  bool _internal_app_enabled() const;
  void _internal_set_app_enabled(bool value);
  public:

  // bool plugins_good = 3;
  void clear_plugins_good();
  bool plugins_good() const;
  void set_plugins_good(bool value);
  private:
  bool _internal_plugins_good() const;
  void _internal_set_plugins_good(bool value);
  public:

  // bool app_good = 4;
  void clear_app_good();
  bool app_good() const;
  void set_app_good(bool value);
  private:
  bool _internal_app_good() const;
  void _internal_set_app_good(bool value);
  public:

  // bool online = 5;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // bool good = 6;
  void clear_good();
  bool good() const;
  void set_good(bool value);
  private:
  bool _internal_good() const;
  void _internal_set_good(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetStatusResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::GetStatusResp_Statistics* stat_;
    bool app_initialized_;
    bool app_enabled_;
    bool plugins_good_;
    bool app_good_;
    bool online_;
    bool good_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupAtAllRemain_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupAtAllRemain.Params) */ {
 public:
  inline GetGroupAtAllRemain_Params() : GetGroupAtAllRemain_Params(nullptr) {}
  ~GetGroupAtAllRemain_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupAtAllRemain_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupAtAllRemain_Params(const GetGroupAtAllRemain_Params& from);
  GetGroupAtAllRemain_Params(GetGroupAtAllRemain_Params&& from) noexcept
    : GetGroupAtAllRemain_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupAtAllRemain_Params& operator=(const GetGroupAtAllRemain_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupAtAllRemain_Params& operator=(GetGroupAtAllRemain_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupAtAllRemain_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupAtAllRemain_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupAtAllRemain_Params*>(
               &_GetGroupAtAllRemain_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(GetGroupAtAllRemain_Params& a, GetGroupAtAllRemain_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupAtAllRemain_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupAtAllRemain_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupAtAllRemain_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupAtAllRemain_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupAtAllRemain_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupAtAllRemain_Params& from) {
    GetGroupAtAllRemain_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupAtAllRemain_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupAtAllRemain.Params";
  }
  protected:
  explicit GetGroupAtAllRemain_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupAtAllRemain.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupAtAllRemain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupAtAllRemain) */ {
 public:
  inline GetGroupAtAllRemain() : GetGroupAtAllRemain(nullptr) {}
  ~GetGroupAtAllRemain() override;
  explicit PROTOBUF_CONSTEXPR GetGroupAtAllRemain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupAtAllRemain(const GetGroupAtAllRemain& from);
  GetGroupAtAllRemain(GetGroupAtAllRemain&& from) noexcept
    : GetGroupAtAllRemain() {
    *this = ::std::move(from);
  }

  inline GetGroupAtAllRemain& operator=(const GetGroupAtAllRemain& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupAtAllRemain& operator=(GetGroupAtAllRemain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupAtAllRemain& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupAtAllRemain* internal_default_instance() {
    return reinterpret_cast<const GetGroupAtAllRemain*>(
               &_GetGroupAtAllRemain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(GetGroupAtAllRemain& a, GetGroupAtAllRemain& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupAtAllRemain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupAtAllRemain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupAtAllRemain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupAtAllRemain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupAtAllRemain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupAtAllRemain& from) {
    GetGroupAtAllRemain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupAtAllRemain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupAtAllRemain";
  }
  protected:
  explicit GetGroupAtAllRemain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupAtAllRemain_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupAtAllRemain.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupAtAllRemain_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupAtAllRemain_Params* release_params();
  ::cqhttp::GetGroupAtAllRemain_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupAtAllRemain_Params* params);
  private:
  const ::cqhttp::GetGroupAtAllRemain_Params& _internal_params() const;
  ::cqhttp::GetGroupAtAllRemain_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupAtAllRemain_Params* params);
  ::cqhttp::GetGroupAtAllRemain_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupAtAllRemain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupAtAllRemain_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupAtAllRemainResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupAtAllRemainResp) */ {
 public:
  inline GetGroupAtAllRemainResp() : GetGroupAtAllRemainResp(nullptr) {}
  ~GetGroupAtAllRemainResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupAtAllRemainResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupAtAllRemainResp(const GetGroupAtAllRemainResp& from);
  GetGroupAtAllRemainResp(GetGroupAtAllRemainResp&& from) noexcept
    : GetGroupAtAllRemainResp() {
    *this = ::std::move(from);
  }

  inline GetGroupAtAllRemainResp& operator=(const GetGroupAtAllRemainResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupAtAllRemainResp& operator=(GetGroupAtAllRemainResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupAtAllRemainResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupAtAllRemainResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupAtAllRemainResp*>(
               &_GetGroupAtAllRemainResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(GetGroupAtAllRemainResp& a, GetGroupAtAllRemainResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupAtAllRemainResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupAtAllRemainResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupAtAllRemainResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupAtAllRemainResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupAtAllRemainResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupAtAllRemainResp& from) {
    GetGroupAtAllRemainResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupAtAllRemainResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupAtAllRemainResp";
  }
  protected:
  explicit GetGroupAtAllRemainResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanAtAllFieldNumber = 1,
    kRemainAtAllCountForGroupFieldNumber = 2,
    kRemainAtAllCountForUinFieldNumber = 3,
  };
  // bool can_at_all = 1;
  void clear_can_at_all();
  bool can_at_all() const;
  void set_can_at_all(bool value);
  private:
  bool _internal_can_at_all() const;
  void _internal_set_can_at_all(bool value);
  public:

  // int32 remain_at_all_count_for_group = 2;
  void clear_remain_at_all_count_for_group();
  int32_t remain_at_all_count_for_group() const;
  void set_remain_at_all_count_for_group(int32_t value);
  private:
  int32_t _internal_remain_at_all_count_for_group() const;
  void _internal_set_remain_at_all_count_for_group(int32_t value);
  public:

  // int32 remain_at_all_count_for_uin = 3;
  void clear_remain_at_all_count_for_uin();
  int32_t remain_at_all_count_for_uin() const;
  void set_remain_at_all_count_for_uin(int32_t value);
  private:
  int32_t _internal_remain_at_all_count_for_uin() const;
  void _internal_set_remain_at_all_count_for_uin(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupAtAllRemainResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool can_at_all_;
    int32_t remain_at_all_count_for_group_;
    int32_t remain_at_all_count_for_uin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class HandleQuickOperation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.HandleQuickOperation.Params) */ {
 public:
  inline HandleQuickOperation_Params() : HandleQuickOperation_Params(nullptr) {}
  ~HandleQuickOperation_Params() override;
  explicit PROTOBUF_CONSTEXPR HandleQuickOperation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandleQuickOperation_Params(const HandleQuickOperation_Params& from);
  HandleQuickOperation_Params(HandleQuickOperation_Params&& from) noexcept
    : HandleQuickOperation_Params() {
    *this = ::std::move(from);
  }

  inline HandleQuickOperation_Params& operator=(const HandleQuickOperation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleQuickOperation_Params& operator=(HandleQuickOperation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandleQuickOperation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandleQuickOperation_Params* internal_default_instance() {
    return reinterpret_cast<const HandleQuickOperation_Params*>(
               &_HandleQuickOperation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(HandleQuickOperation_Params& a, HandleQuickOperation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(HandleQuickOperation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandleQuickOperation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandleQuickOperation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandleQuickOperation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandleQuickOperation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandleQuickOperation_Params& from) {
    HandleQuickOperation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandleQuickOperation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.HandleQuickOperation.Params";
  }
  protected:
  explicit HandleQuickOperation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string operation = 2;
  void clear_operation();
  const std::string& operation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.HandleQuickOperation.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class HandleQuickOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.HandleQuickOperation) */ {
 public:
  inline HandleQuickOperation() : HandleQuickOperation(nullptr) {}
  ~HandleQuickOperation() override;
  explicit PROTOBUF_CONSTEXPR HandleQuickOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandleQuickOperation(const HandleQuickOperation& from);
  HandleQuickOperation(HandleQuickOperation&& from) noexcept
    : HandleQuickOperation() {
    *this = ::std::move(from);
  }

  inline HandleQuickOperation& operator=(const HandleQuickOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleQuickOperation& operator=(HandleQuickOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandleQuickOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandleQuickOperation* internal_default_instance() {
    return reinterpret_cast<const HandleQuickOperation*>(
               &_HandleQuickOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(HandleQuickOperation& a, HandleQuickOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(HandleQuickOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandleQuickOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandleQuickOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandleQuickOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandleQuickOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandleQuickOperation& from) {
    HandleQuickOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandleQuickOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.HandleQuickOperation";
  }
  protected:
  explicit HandleQuickOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HandleQuickOperation_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.HandleQuickOperation.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::HandleQuickOperation_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::HandleQuickOperation_Params* release_params();
  ::cqhttp::HandleQuickOperation_Params* mutable_params();
  void set_allocated_params(::cqhttp::HandleQuickOperation_Params* params);
  private:
  const ::cqhttp::HandleQuickOperation_Params& _internal_params() const;
  ::cqhttp::HandleQuickOperation_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::HandleQuickOperation_Params* params);
  ::cqhttp::HandleQuickOperation_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.HandleQuickOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::HandleQuickOperation_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupNotice_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupNotice.Params) */ {
 public:
  inline SendGroupNotice_Params() : SendGroupNotice_Params(nullptr) {}
  ~SendGroupNotice_Params() override;
  explicit PROTOBUF_CONSTEXPR SendGroupNotice_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupNotice_Params(const SendGroupNotice_Params& from);
  SendGroupNotice_Params(SendGroupNotice_Params&& from) noexcept
    : SendGroupNotice_Params() {
    *this = ::std::move(from);
  }

  inline SendGroupNotice_Params& operator=(const SendGroupNotice_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupNotice_Params& operator=(SendGroupNotice_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupNotice_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupNotice_Params* internal_default_instance() {
    return reinterpret_cast<const SendGroupNotice_Params*>(
               &_SendGroupNotice_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(SendGroupNotice_Params& a, SendGroupNotice_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupNotice_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupNotice_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupNotice_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupNotice_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupNotice_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupNotice_Params& from) {
    SendGroupNotice_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupNotice_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupNotice.Params";
  }
  protected:
  explicit SendGroupNotice_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kImageFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string image = 3;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupNotice.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendGroupNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendGroupNotice) */ {
 public:
  inline SendGroupNotice() : SendGroupNotice(nullptr) {}
  ~SendGroupNotice() override;
  explicit PROTOBUF_CONSTEXPR SendGroupNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGroupNotice(const SendGroupNotice& from);
  SendGroupNotice(SendGroupNotice&& from) noexcept
    : SendGroupNotice() {
    *this = ::std::move(from);
  }

  inline SendGroupNotice& operator=(const SendGroupNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupNotice& operator=(SendGroupNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGroupNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGroupNotice* internal_default_instance() {
    return reinterpret_cast<const SendGroupNotice*>(
               &_SendGroupNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(SendGroupNotice& a, SendGroupNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGroupNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGroupNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGroupNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendGroupNotice& from) {
    SendGroupNotice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendGroupNotice";
  }
  protected:
  explicit SendGroupNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendGroupNotice_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SendGroupNotice.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendGroupNotice_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendGroupNotice_Params* release_params();
  ::cqhttp::SendGroupNotice_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendGroupNotice_Params* params);
  private:
  const ::cqhttp::SendGroupNotice_Params& _internal_params() const;
  ::cqhttp::SendGroupNotice_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendGroupNotice_Params* params);
  ::cqhttp::SendGroupNotice_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendGroupNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SendGroupNotice_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupNotice_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupNotice.Params) */ {
 public:
  inline GetGroupNotice_Params() : GetGroupNotice_Params(nullptr) {}
  ~GetGroupNotice_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupNotice_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupNotice_Params(const GetGroupNotice_Params& from);
  GetGroupNotice_Params(GetGroupNotice_Params&& from) noexcept
    : GetGroupNotice_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupNotice_Params& operator=(const GetGroupNotice_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupNotice_Params& operator=(GetGroupNotice_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupNotice_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupNotice_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupNotice_Params*>(
               &_GetGroupNotice_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(GetGroupNotice_Params& a, GetGroupNotice_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupNotice_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupNotice_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupNotice_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupNotice_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupNotice_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupNotice_Params& from) {
    GetGroupNotice_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupNotice_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupNotice.Params";
  }
  protected:
  explicit GetGroupNotice_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupNotice.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupNotice) */ {
 public:
  inline GetGroupNotice() : GetGroupNotice(nullptr) {}
  ~GetGroupNotice() override;
  explicit PROTOBUF_CONSTEXPR GetGroupNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupNotice(const GetGroupNotice& from);
  GetGroupNotice(GetGroupNotice&& from) noexcept
    : GetGroupNotice() {
    *this = ::std::move(from);
  }

  inline GetGroupNotice& operator=(const GetGroupNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupNotice& operator=(GetGroupNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupNotice* internal_default_instance() {
    return reinterpret_cast<const GetGroupNotice*>(
               &_GetGroupNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(GetGroupNotice& a, GetGroupNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupNotice& from) {
    GetGroupNotice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupNotice";
  }
  protected:
  explicit GetGroupNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupNotice_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupNotice.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupNotice_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupNotice_Params* release_params();
  ::cqhttp::GetGroupNotice_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupNotice_Params* params);
  private:
  const ::cqhttp::GetGroupNotice_Params& _internal_params() const;
  ::cqhttp::GetGroupNotice_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupNotice_Params* params);
  ::cqhttp::GetGroupNotice_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupNotice_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupNoticeResp_Notice_NoticeMessage_Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image) */ {
 public:
  inline GetGroupNoticeResp_Notice_NoticeMessage_Image() : GetGroupNoticeResp_Notice_NoticeMessage_Image(nullptr) {}
  ~GetGroupNoticeResp_Notice_NoticeMessage_Image() override;
  explicit PROTOBUF_CONSTEXPR GetGroupNoticeResp_Notice_NoticeMessage_Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupNoticeResp_Notice_NoticeMessage_Image(const GetGroupNoticeResp_Notice_NoticeMessage_Image& from);
  GetGroupNoticeResp_Notice_NoticeMessage_Image(GetGroupNoticeResp_Notice_NoticeMessage_Image&& from) noexcept
    : GetGroupNoticeResp_Notice_NoticeMessage_Image() {
    *this = ::std::move(from);
  }

  inline GetGroupNoticeResp_Notice_NoticeMessage_Image& operator=(const GetGroupNoticeResp_Notice_NoticeMessage_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupNoticeResp_Notice_NoticeMessage_Image& operator=(GetGroupNoticeResp_Notice_NoticeMessage_Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupNoticeResp_Notice_NoticeMessage_Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupNoticeResp_Notice_NoticeMessage_Image* internal_default_instance() {
    return reinterpret_cast<const GetGroupNoticeResp_Notice_NoticeMessage_Image*>(
               &_GetGroupNoticeResp_Notice_NoticeMessage_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(GetGroupNoticeResp_Notice_NoticeMessage_Image& a, GetGroupNoticeResp_Notice_NoticeMessage_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupNoticeResp_Notice_NoticeMessage_Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupNoticeResp_Notice_NoticeMessage_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupNoticeResp_Notice_NoticeMessage_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupNoticeResp_Notice_NoticeMessage_Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupNoticeResp_Notice_NoticeMessage_Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupNoticeResp_Notice_NoticeMessage_Image& from) {
    GetGroupNoticeResp_Notice_NoticeMessage_Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupNoticeResp_Notice_NoticeMessage_Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image";
  }
  protected:
  explicit GetGroupNoticeResp_Notice_NoticeMessage_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string height = 1;
  void clear_height();
  const std::string& height() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_height(ArgT0&& arg0, ArgT... args);
  std::string* mutable_height();
  PROTOBUF_NODISCARD std::string* release_height();
  void set_allocated_height(std::string* height);
  private:
  const std::string& _internal_height() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_height(const std::string& value);
  std::string* _internal_mutable_height();
  public:

  // string width = 2;
  void clear_width();
  const std::string& width() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_width(ArgT0&& arg0, ArgT... args);
  std::string* mutable_width();
  PROTOBUF_NODISCARD std::string* release_width();
  void set_allocated_width(std::string* width);
  private:
  const std::string& _internal_width() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_width(const std::string& value);
  std::string* _internal_mutable_width();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr height_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr width_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupNoticeResp_Notice_NoticeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage) */ {
 public:
  inline GetGroupNoticeResp_Notice_NoticeMessage() : GetGroupNoticeResp_Notice_NoticeMessage(nullptr) {}
  ~GetGroupNoticeResp_Notice_NoticeMessage() override;
  explicit PROTOBUF_CONSTEXPR GetGroupNoticeResp_Notice_NoticeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupNoticeResp_Notice_NoticeMessage(const GetGroupNoticeResp_Notice_NoticeMessage& from);
  GetGroupNoticeResp_Notice_NoticeMessage(GetGroupNoticeResp_Notice_NoticeMessage&& from) noexcept
    : GetGroupNoticeResp_Notice_NoticeMessage() {
    *this = ::std::move(from);
  }

  inline GetGroupNoticeResp_Notice_NoticeMessage& operator=(const GetGroupNoticeResp_Notice_NoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupNoticeResp_Notice_NoticeMessage& operator=(GetGroupNoticeResp_Notice_NoticeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupNoticeResp_Notice_NoticeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupNoticeResp_Notice_NoticeMessage* internal_default_instance() {
    return reinterpret_cast<const GetGroupNoticeResp_Notice_NoticeMessage*>(
               &_GetGroupNoticeResp_Notice_NoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(GetGroupNoticeResp_Notice_NoticeMessage& a, GetGroupNoticeResp_Notice_NoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupNoticeResp_Notice_NoticeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupNoticeResp_Notice_NoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupNoticeResp_Notice_NoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupNoticeResp_Notice_NoticeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupNoticeResp_Notice_NoticeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupNoticeResp_Notice_NoticeMessage& from) {
    GetGroupNoticeResp_Notice_NoticeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupNoticeResp_Notice_NoticeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupNoticeResp.Notice.NoticeMessage";
  }
  protected:
  explicit GetGroupNoticeResp_Notice_NoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupNoticeResp_Notice_NoticeMessage_Image Image;

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kTextFieldNumber = 1,
  };
  // repeated .cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image images = 2;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image >*
      mutable_images();
  private:
  const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image& _internal_images(int index) const;
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* _internal_add_images();
  public:
  const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image& images(int index) const;
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image >&
      images() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image > images_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupNoticeResp_Notice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupNoticeResp.Notice) */ {
 public:
  inline GetGroupNoticeResp_Notice() : GetGroupNoticeResp_Notice(nullptr) {}
  ~GetGroupNoticeResp_Notice() override;
  explicit PROTOBUF_CONSTEXPR GetGroupNoticeResp_Notice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupNoticeResp_Notice(const GetGroupNoticeResp_Notice& from);
  GetGroupNoticeResp_Notice(GetGroupNoticeResp_Notice&& from) noexcept
    : GetGroupNoticeResp_Notice() {
    *this = ::std::move(from);
  }

  inline GetGroupNoticeResp_Notice& operator=(const GetGroupNoticeResp_Notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupNoticeResp_Notice& operator=(GetGroupNoticeResp_Notice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupNoticeResp_Notice& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupNoticeResp_Notice* internal_default_instance() {
    return reinterpret_cast<const GetGroupNoticeResp_Notice*>(
               &_GetGroupNoticeResp_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(GetGroupNoticeResp_Notice& a, GetGroupNoticeResp_Notice& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupNoticeResp_Notice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupNoticeResp_Notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupNoticeResp_Notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupNoticeResp_Notice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupNoticeResp_Notice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupNoticeResp_Notice& from) {
    GetGroupNoticeResp_Notice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupNoticeResp_Notice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupNoticeResp.Notice";
  }
  protected:
  explicit GetGroupNoticeResp_Notice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupNoticeResp_Notice_NoticeMessage NoticeMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kPublishTimeFieldNumber = 2,
  };
  // .cqhttp.GetGroupNoticeResp.Notice.NoticeMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage& message() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* release_message();
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* mutable_message();
  void set_allocated_message(::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* message);
  private:
  const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage& _internal_message() const;
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* message);
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* unsafe_arena_release_message();

  // int64 sender_id = 1;
  void clear_sender_id();
  int64_t sender_id() const;
  void set_sender_id(int64_t value);
  private:
  int64_t _internal_sender_id() const;
  void _internal_set_sender_id(int64_t value);
  public:

  // int64 publish_time = 2;
  void clear_publish_time();
  int64_t publish_time() const;
  void set_publish_time(int64_t value);
  private:
  int64_t _internal_publish_time() const;
  void _internal_set_publish_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupNoticeResp.Notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* message_;
    int64_t sender_id_;
    int64_t publish_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupNoticeResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupNoticeResp) */ {
 public:
  inline GetGroupNoticeResp() : GetGroupNoticeResp(nullptr) {}
  ~GetGroupNoticeResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupNoticeResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupNoticeResp(const GetGroupNoticeResp& from);
  GetGroupNoticeResp(GetGroupNoticeResp&& from) noexcept
    : GetGroupNoticeResp() {
    *this = ::std::move(from);
  }

  inline GetGroupNoticeResp& operator=(const GetGroupNoticeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupNoticeResp& operator=(GetGroupNoticeResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupNoticeResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupNoticeResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupNoticeResp*>(
               &_GetGroupNoticeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(GetGroupNoticeResp& a, GetGroupNoticeResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupNoticeResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupNoticeResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupNoticeResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupNoticeResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupNoticeResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupNoticeResp& from) {
    GetGroupNoticeResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupNoticeResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupNoticeResp";
  }
  protected:
  explicit GetGroupNoticeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupNoticeResp_Notice Notice;

  // accessors -------------------------------------------------------

  enum : int {
    kNoticesFieldNumber = 1,
  };
  // repeated .cqhttp.GetGroupNoticeResp.Notice notices = 1;
  int notices_size() const;
  private:
  int _internal_notices_size() const;
  public:
  void clear_notices();
  ::cqhttp::GetGroupNoticeResp_Notice* mutable_notices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice >*
      mutable_notices();
  private:
  const ::cqhttp::GetGroupNoticeResp_Notice& _internal_notices(int index) const;
  ::cqhttp::GetGroupNoticeResp_Notice* _internal_add_notices();
  public:
  const ::cqhttp::GetGroupNoticeResp_Notice& notices(int index) const;
  ::cqhttp::GetGroupNoticeResp_Notice* add_notices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice >&
      notices() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupNoticeResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice > notices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ReloadEventFilter_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.ReloadEventFilter.Params) */ {
 public:
  inline ReloadEventFilter_Params() : ReloadEventFilter_Params(nullptr) {}
  ~ReloadEventFilter_Params() override;
  explicit PROTOBUF_CONSTEXPR ReloadEventFilter_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadEventFilter_Params(const ReloadEventFilter_Params& from);
  ReloadEventFilter_Params(ReloadEventFilter_Params&& from) noexcept
    : ReloadEventFilter_Params() {
    *this = ::std::move(from);
  }

  inline ReloadEventFilter_Params& operator=(const ReloadEventFilter_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadEventFilter_Params& operator=(ReloadEventFilter_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadEventFilter_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadEventFilter_Params* internal_default_instance() {
    return reinterpret_cast<const ReloadEventFilter_Params*>(
               &_ReloadEventFilter_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(ReloadEventFilter_Params& a, ReloadEventFilter_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadEventFilter_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadEventFilter_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadEventFilter_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReloadEventFilter_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReloadEventFilter_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReloadEventFilter_Params& from) {
    ReloadEventFilter_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadEventFilter_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.ReloadEventFilter.Params";
  }
  protected:
  explicit ReloadEventFilter_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.ReloadEventFilter.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ReloadEventFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.ReloadEventFilter) */ {
 public:
  inline ReloadEventFilter() : ReloadEventFilter(nullptr) {}
  ~ReloadEventFilter() override;
  explicit PROTOBUF_CONSTEXPR ReloadEventFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadEventFilter(const ReloadEventFilter& from);
  ReloadEventFilter(ReloadEventFilter&& from) noexcept
    : ReloadEventFilter() {
    *this = ::std::move(from);
  }

  inline ReloadEventFilter& operator=(const ReloadEventFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadEventFilter& operator=(ReloadEventFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadEventFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadEventFilter* internal_default_instance() {
    return reinterpret_cast<const ReloadEventFilter*>(
               &_ReloadEventFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(ReloadEventFilter& a, ReloadEventFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadEventFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadEventFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadEventFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReloadEventFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReloadEventFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReloadEventFilter& from) {
    ReloadEventFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadEventFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.ReloadEventFilter";
  }
  protected:
  explicit ReloadEventFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReloadEventFilter_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.ReloadEventFilter.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::ReloadEventFilter_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::ReloadEventFilter_Params* release_params();
  ::cqhttp::ReloadEventFilter_Params* mutable_params();
  void set_allocated_params(::cqhttp::ReloadEventFilter_Params* params);
  private:
  const ::cqhttp::ReloadEventFilter_Params& _internal_params() const;
  ::cqhttp::ReloadEventFilter_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::ReloadEventFilter_Params* params);
  ::cqhttp::ReloadEventFilter_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.ReloadEventFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::ReloadEventFilter_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DownloadFile_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DownloadFile.Params) */ {
 public:
  inline DownloadFile_Params() : DownloadFile_Params(nullptr) {}
  ~DownloadFile_Params() override;
  explicit PROTOBUF_CONSTEXPR DownloadFile_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadFile_Params(const DownloadFile_Params& from);
  DownloadFile_Params(DownloadFile_Params&& from) noexcept
    : DownloadFile_Params() {
    *this = ::std::move(from);
  }

  inline DownloadFile_Params& operator=(const DownloadFile_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadFile_Params& operator=(DownloadFile_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadFile_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadFile_Params* internal_default_instance() {
    return reinterpret_cast<const DownloadFile_Params*>(
               &_DownloadFile_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(DownloadFile_Params& a, DownloadFile_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadFile_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadFile_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadFile_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadFile_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadFile_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownloadFile_Params& from) {
    DownloadFile_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFile_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DownloadFile.Params";
  }
  protected:
  explicit DownloadFile_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kHeadersFieldNumber = 3,
    kThreadCountFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string headers = 3;
  void clear_headers();
  const std::string& headers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headers();
  PROTOBUF_NODISCARD std::string* release_headers();
  void set_allocated_headers(std::string* headers);
  private:
  const std::string& _internal_headers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headers(const std::string& value);
  std::string* _internal_mutable_headers();
  public:

  // int32 thread_count = 2;
  void clear_thread_count();
  int32_t thread_count() const;
  void set_thread_count(int32_t value);
  private:
  int32_t _internal_thread_count() const;
  void _internal_set_thread_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DownloadFile.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headers_;
    int32_t thread_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DownloadFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DownloadFile) */ {
 public:
  inline DownloadFile() : DownloadFile(nullptr) {}
  ~DownloadFile() override;
  explicit PROTOBUF_CONSTEXPR DownloadFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadFile(const DownloadFile& from);
  DownloadFile(DownloadFile&& from) noexcept
    : DownloadFile() {
    *this = ::std::move(from);
  }

  inline DownloadFile& operator=(const DownloadFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadFile& operator=(DownloadFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadFile* internal_default_instance() {
    return reinterpret_cast<const DownloadFile*>(
               &_DownloadFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(DownloadFile& a, DownloadFile& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownloadFile& from) {
    DownloadFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DownloadFile";
  }
  protected:
  explicit DownloadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DownloadFile_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.DownloadFile.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DownloadFile_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DownloadFile_Params* release_params();
  ::cqhttp::DownloadFile_Params* mutable_params();
  void set_allocated_params(::cqhttp::DownloadFile_Params* params);
  private:
  const ::cqhttp::DownloadFile_Params& _internal_params() const;
  ::cqhttp::DownloadFile_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DownloadFile_Params* params);
  ::cqhttp::DownloadFile_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DownloadFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::DownloadFile_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DownloadFileResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DownloadFileResp) */ {
 public:
  inline DownloadFileResp() : DownloadFileResp(nullptr) {}
  ~DownloadFileResp() override;
  explicit PROTOBUF_CONSTEXPR DownloadFileResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadFileResp(const DownloadFileResp& from);
  DownloadFileResp(DownloadFileResp&& from) noexcept
    : DownloadFileResp() {
    *this = ::std::move(from);
  }

  inline DownloadFileResp& operator=(const DownloadFileResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadFileResp& operator=(DownloadFileResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadFileResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadFileResp* internal_default_instance() {
    return reinterpret_cast<const DownloadFileResp*>(
               &_DownloadFileResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(DownloadFileResp& a, DownloadFileResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadFileResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadFileResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadFileResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadFileResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadFileResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownloadFileResp& from) {
    DownloadFileResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFileResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DownloadFileResp";
  }
  protected:
  explicit DownloadFileResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DownloadFileResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOnlineClients_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetOnlineClients.Params) */ {
 public:
  inline GetOnlineClients_Params() : GetOnlineClients_Params(nullptr) {}
  ~GetOnlineClients_Params() override;
  explicit PROTOBUF_CONSTEXPR GetOnlineClients_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOnlineClients_Params(const GetOnlineClients_Params& from);
  GetOnlineClients_Params(GetOnlineClients_Params&& from) noexcept
    : GetOnlineClients_Params() {
    *this = ::std::move(from);
  }

  inline GetOnlineClients_Params& operator=(const GetOnlineClients_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnlineClients_Params& operator=(GetOnlineClients_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOnlineClients_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOnlineClients_Params* internal_default_instance() {
    return reinterpret_cast<const GetOnlineClients_Params*>(
               &_GetOnlineClients_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(GetOnlineClients_Params& a, GetOnlineClients_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnlineClients_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOnlineClients_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOnlineClients_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOnlineClients_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOnlineClients_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOnlineClients_Params& from) {
    GetOnlineClients_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnlineClients_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetOnlineClients.Params";
  }
  protected:
  explicit GetOnlineClients_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoCacheFieldNumber = 1,
  };
  // bool no_cache = 1;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetOnlineClients.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool no_cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOnlineClients final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetOnlineClients) */ {
 public:
  inline GetOnlineClients() : GetOnlineClients(nullptr) {}
  ~GetOnlineClients() override;
  explicit PROTOBUF_CONSTEXPR GetOnlineClients(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOnlineClients(const GetOnlineClients& from);
  GetOnlineClients(GetOnlineClients&& from) noexcept
    : GetOnlineClients() {
    *this = ::std::move(from);
  }

  inline GetOnlineClients& operator=(const GetOnlineClients& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnlineClients& operator=(GetOnlineClients&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOnlineClients& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOnlineClients* internal_default_instance() {
    return reinterpret_cast<const GetOnlineClients*>(
               &_GetOnlineClients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(GetOnlineClients& a, GetOnlineClients& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnlineClients* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOnlineClients* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOnlineClients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOnlineClients>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOnlineClients& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOnlineClients& from) {
    GetOnlineClients::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnlineClients* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetOnlineClients";
  }
  protected:
  explicit GetOnlineClients(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetOnlineClients_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetOnlineClients.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetOnlineClients_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetOnlineClients_Params* release_params();
  ::cqhttp::GetOnlineClients_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetOnlineClients_Params* params);
  private:
  const ::cqhttp::GetOnlineClients_Params& _internal_params() const;
  ::cqhttp::GetOnlineClients_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetOnlineClients_Params* params);
  ::cqhttp::GetOnlineClients_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetOnlineClients)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetOnlineClients_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOnlineClientsResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetOnlineClientsResp) */ {
 public:
  inline GetOnlineClientsResp() : GetOnlineClientsResp(nullptr) {}
  ~GetOnlineClientsResp() override;
  explicit PROTOBUF_CONSTEXPR GetOnlineClientsResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOnlineClientsResp(const GetOnlineClientsResp& from);
  GetOnlineClientsResp(GetOnlineClientsResp&& from) noexcept
    : GetOnlineClientsResp() {
    *this = ::std::move(from);
  }

  inline GetOnlineClientsResp& operator=(const GetOnlineClientsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnlineClientsResp& operator=(GetOnlineClientsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOnlineClientsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOnlineClientsResp* internal_default_instance() {
    return reinterpret_cast<const GetOnlineClientsResp*>(
               &_GetOnlineClientsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(GetOnlineClientsResp& a, GetOnlineClientsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnlineClientsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOnlineClientsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOnlineClientsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOnlineClientsResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOnlineClientsResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOnlineClientsResp& from) {
    GetOnlineClientsResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnlineClientsResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetOnlineClientsResp";
  }
  protected:
  explicit GetOnlineClientsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
  };
  // repeated .cqhttp.Device clients = 1;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::cqhttp::Device* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Device >*
      mutable_clients();
  private:
  const ::cqhttp::Device& _internal_clients(int index) const;
  ::cqhttp::Device* _internal_add_clients();
  public:
  const ::cqhttp::Device& clients(int index) const;
  ::cqhttp::Device* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Device >&
      clients() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetOnlineClientsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Device > clients_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMsgHistory_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMsgHistory.Params) */ {
 public:
  inline GetGroupMsgHistory_Params() : GetGroupMsgHistory_Params(nullptr) {}
  ~GetGroupMsgHistory_Params() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMsgHistory_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMsgHistory_Params(const GetGroupMsgHistory_Params& from);
  GetGroupMsgHistory_Params(GetGroupMsgHistory_Params&& from) noexcept
    : GetGroupMsgHistory_Params() {
    *this = ::std::move(from);
  }

  inline GetGroupMsgHistory_Params& operator=(const GetGroupMsgHistory_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMsgHistory_Params& operator=(GetGroupMsgHistory_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMsgHistory_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMsgHistory_Params* internal_default_instance() {
    return reinterpret_cast<const GetGroupMsgHistory_Params*>(
               &_GetGroupMsgHistory_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(GetGroupMsgHistory_Params& a, GetGroupMsgHistory_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMsgHistory_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMsgHistory_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMsgHistory_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMsgHistory_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMsgHistory_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMsgHistory_Params& from) {
    GetGroupMsgHistory_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMsgHistory_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMsgHistory.Params";
  }
  protected:
  explicit GetGroupMsgHistory_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageSeqFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // int64 message_seq = 1;
  void clear_message_seq();
  int64_t message_seq() const;
  void set_message_seq(int64_t value);
  private:
  int64_t _internal_message_seq() const;
  void _internal_set_message_seq(int64_t value);
  public:

  // int64 group_id = 2;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMsgHistory.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t message_seq_;
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMsgHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMsgHistory) */ {
 public:
  inline GetGroupMsgHistory() : GetGroupMsgHistory(nullptr) {}
  ~GetGroupMsgHistory() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMsgHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMsgHistory(const GetGroupMsgHistory& from);
  GetGroupMsgHistory(GetGroupMsgHistory&& from) noexcept
    : GetGroupMsgHistory() {
    *this = ::std::move(from);
  }

  inline GetGroupMsgHistory& operator=(const GetGroupMsgHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMsgHistory& operator=(GetGroupMsgHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMsgHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMsgHistory* internal_default_instance() {
    return reinterpret_cast<const GetGroupMsgHistory*>(
               &_GetGroupMsgHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(GetGroupMsgHistory& a, GetGroupMsgHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMsgHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMsgHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMsgHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMsgHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMsgHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMsgHistory& from) {
    GetGroupMsgHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMsgHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMsgHistory";
  }
  protected:
  explicit GetGroupMsgHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetGroupMsgHistory_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetGroupMsgHistory.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetGroupMsgHistory_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetGroupMsgHistory_Params* release_params();
  ::cqhttp::GetGroupMsgHistory_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetGroupMsgHistory_Params* params);
  private:
  const ::cqhttp::GetGroupMsgHistory_Params& _internal_params() const;
  ::cqhttp::GetGroupMsgHistory_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetGroupMsgHistory_Params* params);
  ::cqhttp::GetGroupMsgHistory_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMsgHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetGroupMsgHistory_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMsgHistoryResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetGroupMsgHistoryResp) */ {
 public:
  inline GetGroupMsgHistoryResp() : GetGroupMsgHistoryResp(nullptr) {}
  ~GetGroupMsgHistoryResp() override;
  explicit PROTOBUF_CONSTEXPR GetGroupMsgHistoryResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMsgHistoryResp(const GetGroupMsgHistoryResp& from);
  GetGroupMsgHistoryResp(GetGroupMsgHistoryResp&& from) noexcept
    : GetGroupMsgHistoryResp() {
    *this = ::std::move(from);
  }

  inline GetGroupMsgHistoryResp& operator=(const GetGroupMsgHistoryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMsgHistoryResp& operator=(GetGroupMsgHistoryResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMsgHistoryResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMsgHistoryResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupMsgHistoryResp*>(
               &_GetGroupMsgHistoryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(GetGroupMsgHistoryResp& a, GetGroupMsgHistoryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMsgHistoryResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMsgHistoryResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupMsgHistoryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupMsgHistoryResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMsgHistoryResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupMsgHistoryResp& from) {
    GetGroupMsgHistoryResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMsgHistoryResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetGroupMsgHistoryResp";
  }
  protected:
  explicit GetGroupMsgHistoryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated string messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const char* value, size_t size);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();
  private:
  const std::string& _internal_messages(int index) const;
  std::string* _internal_add_messages();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetGroupMsgHistoryResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetEssenceMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetEssenceMsg.Params) */ {
 public:
  inline SetEssenceMsg_Params() : SetEssenceMsg_Params(nullptr) {}
  ~SetEssenceMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR SetEssenceMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEssenceMsg_Params(const SetEssenceMsg_Params& from);
  SetEssenceMsg_Params(SetEssenceMsg_Params&& from) noexcept
    : SetEssenceMsg_Params() {
    *this = ::std::move(from);
  }

  inline SetEssenceMsg_Params& operator=(const SetEssenceMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEssenceMsg_Params& operator=(SetEssenceMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEssenceMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEssenceMsg_Params* internal_default_instance() {
    return reinterpret_cast<const SetEssenceMsg_Params*>(
               &_SetEssenceMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(SetEssenceMsg_Params& a, SetEssenceMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEssenceMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEssenceMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEssenceMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEssenceMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetEssenceMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetEssenceMsg_Params& from) {
    SetEssenceMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEssenceMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetEssenceMsg.Params";
  }
  protected:
  explicit SetEssenceMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetEssenceMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetEssenceMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetEssenceMsg) */ {
 public:
  inline SetEssenceMsg() : SetEssenceMsg(nullptr) {}
  ~SetEssenceMsg() override;
  explicit PROTOBUF_CONSTEXPR SetEssenceMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEssenceMsg(const SetEssenceMsg& from);
  SetEssenceMsg(SetEssenceMsg&& from) noexcept
    : SetEssenceMsg() {
    *this = ::std::move(from);
  }

  inline SetEssenceMsg& operator=(const SetEssenceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEssenceMsg& operator=(SetEssenceMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEssenceMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEssenceMsg* internal_default_instance() {
    return reinterpret_cast<const SetEssenceMsg*>(
               &_SetEssenceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(SetEssenceMsg& a, SetEssenceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEssenceMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEssenceMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEssenceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEssenceMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetEssenceMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetEssenceMsg& from) {
    SetEssenceMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEssenceMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetEssenceMsg";
  }
  protected:
  explicit SetEssenceMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetEssenceMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetEssenceMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetEssenceMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetEssenceMsg_Params* release_params();
  ::cqhttp::SetEssenceMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetEssenceMsg_Params* params);
  private:
  const ::cqhttp::SetEssenceMsg_Params& _internal_params() const;
  ::cqhttp::SetEssenceMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetEssenceMsg_Params* params);
  ::cqhttp::SetEssenceMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetEssenceMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetEssenceMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteEssenceMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteEssenceMsg.Params) */ {
 public:
  inline DeleteEssenceMsg_Params() : DeleteEssenceMsg_Params(nullptr) {}
  ~DeleteEssenceMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR DeleteEssenceMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteEssenceMsg_Params(const DeleteEssenceMsg_Params& from);
  DeleteEssenceMsg_Params(DeleteEssenceMsg_Params&& from) noexcept
    : DeleteEssenceMsg_Params() {
    *this = ::std::move(from);
  }

  inline DeleteEssenceMsg_Params& operator=(const DeleteEssenceMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEssenceMsg_Params& operator=(DeleteEssenceMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteEssenceMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteEssenceMsg_Params* internal_default_instance() {
    return reinterpret_cast<const DeleteEssenceMsg_Params*>(
               &_DeleteEssenceMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(DeleteEssenceMsg_Params& a, DeleteEssenceMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEssenceMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEssenceMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteEssenceMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteEssenceMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteEssenceMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteEssenceMsg_Params& from) {
    DeleteEssenceMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEssenceMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteEssenceMsg.Params";
  }
  protected:
  explicit DeleteEssenceMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteEssenceMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteEssenceMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteEssenceMsg) */ {
 public:
  inline DeleteEssenceMsg() : DeleteEssenceMsg(nullptr) {}
  ~DeleteEssenceMsg() override;
  explicit PROTOBUF_CONSTEXPR DeleteEssenceMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteEssenceMsg(const DeleteEssenceMsg& from);
  DeleteEssenceMsg(DeleteEssenceMsg&& from) noexcept
    : DeleteEssenceMsg() {
    *this = ::std::move(from);
  }

  inline DeleteEssenceMsg& operator=(const DeleteEssenceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEssenceMsg& operator=(DeleteEssenceMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteEssenceMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteEssenceMsg* internal_default_instance() {
    return reinterpret_cast<const DeleteEssenceMsg*>(
               &_DeleteEssenceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(DeleteEssenceMsg& a, DeleteEssenceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEssenceMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEssenceMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteEssenceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteEssenceMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteEssenceMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteEssenceMsg& from) {
    DeleteEssenceMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEssenceMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteEssenceMsg";
  }
  protected:
  explicit DeleteEssenceMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeleteEssenceMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.DeleteEssenceMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DeleteEssenceMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DeleteEssenceMsg_Params* release_params();
  ::cqhttp::DeleteEssenceMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::DeleteEssenceMsg_Params* params);
  private:
  const ::cqhttp::DeleteEssenceMsg_Params& _internal_params() const;
  ::cqhttp::DeleteEssenceMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DeleteEssenceMsg_Params* params);
  ::cqhttp::DeleteEssenceMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteEssenceMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::DeleteEssenceMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetEssenceMsgList_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetEssenceMsgList.Params) */ {
 public:
  inline GetEssenceMsgList_Params() : GetEssenceMsgList_Params(nullptr) {}
  ~GetEssenceMsgList_Params() override;
  explicit PROTOBUF_CONSTEXPR GetEssenceMsgList_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEssenceMsgList_Params(const GetEssenceMsgList_Params& from);
  GetEssenceMsgList_Params(GetEssenceMsgList_Params&& from) noexcept
    : GetEssenceMsgList_Params() {
    *this = ::std::move(from);
  }

  inline GetEssenceMsgList_Params& operator=(const GetEssenceMsgList_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEssenceMsgList_Params& operator=(GetEssenceMsgList_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEssenceMsgList_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEssenceMsgList_Params* internal_default_instance() {
    return reinterpret_cast<const GetEssenceMsgList_Params*>(
               &_GetEssenceMsgList_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(GetEssenceMsgList_Params& a, GetEssenceMsgList_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEssenceMsgList_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEssenceMsgList_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEssenceMsgList_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEssenceMsgList_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEssenceMsgList_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEssenceMsgList_Params& from) {
    GetEssenceMsgList_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEssenceMsgList_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetEssenceMsgList.Params";
  }
  protected:
  explicit GetEssenceMsgList_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  int64_t group_id() const;
  void set_group_id(int64_t value);
  private:
  int64_t _internal_group_id() const;
  void _internal_set_group_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetEssenceMsgList.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetEssenceMsgList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetEssenceMsgList) */ {
 public:
  inline GetEssenceMsgList() : GetEssenceMsgList(nullptr) {}
  ~GetEssenceMsgList() override;
  explicit PROTOBUF_CONSTEXPR GetEssenceMsgList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEssenceMsgList(const GetEssenceMsgList& from);
  GetEssenceMsgList(GetEssenceMsgList&& from) noexcept
    : GetEssenceMsgList() {
    *this = ::std::move(from);
  }

  inline GetEssenceMsgList& operator=(const GetEssenceMsgList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEssenceMsgList& operator=(GetEssenceMsgList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEssenceMsgList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEssenceMsgList* internal_default_instance() {
    return reinterpret_cast<const GetEssenceMsgList*>(
               &_GetEssenceMsgList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(GetEssenceMsgList& a, GetEssenceMsgList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEssenceMsgList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEssenceMsgList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEssenceMsgList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEssenceMsgList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEssenceMsgList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEssenceMsgList& from) {
    GetEssenceMsgList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEssenceMsgList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetEssenceMsgList";
  }
  protected:
  explicit GetEssenceMsgList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetEssenceMsgList_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetEssenceMsgList.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetEssenceMsgList_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetEssenceMsgList_Params* release_params();
  ::cqhttp::GetEssenceMsgList_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetEssenceMsgList_Params* params);
  private:
  const ::cqhttp::GetEssenceMsgList_Params& _internal_params() const;
  ::cqhttp::GetEssenceMsgList_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetEssenceMsgList_Params* params);
  ::cqhttp::GetEssenceMsgList_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetEssenceMsgList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetEssenceMsgList_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetEssenceMsgListResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetEssenceMsgListResp) */ {
 public:
  inline GetEssenceMsgListResp() : GetEssenceMsgListResp(nullptr) {}
  ~GetEssenceMsgListResp() override;
  explicit PROTOBUF_CONSTEXPR GetEssenceMsgListResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEssenceMsgListResp(const GetEssenceMsgListResp& from);
  GetEssenceMsgListResp(GetEssenceMsgListResp&& from) noexcept
    : GetEssenceMsgListResp() {
    *this = ::std::move(from);
  }

  inline GetEssenceMsgListResp& operator=(const GetEssenceMsgListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEssenceMsgListResp& operator=(GetEssenceMsgListResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEssenceMsgListResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEssenceMsgListResp* internal_default_instance() {
    return reinterpret_cast<const GetEssenceMsgListResp*>(
               &_GetEssenceMsgListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(GetEssenceMsgListResp& a, GetEssenceMsgListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEssenceMsgListResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEssenceMsgListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEssenceMsgListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEssenceMsgListResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEssenceMsgListResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEssenceMsgListResp& from) {
    GetEssenceMsgListResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEssenceMsgListResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetEssenceMsgListResp";
  }
  protected:
  explicit GetEssenceMsgListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderNickFieldNumber = 2,
    kOperatorNickFieldNumber = 5,
    kSenderIdFieldNumber = 1,
    kSenderTimeFieldNumber = 3,
    kOperatorIdFieldNumber = 4,
    kOperatorTimeFieldNumber = 6,
    kMessageIdFieldNumber = 7,
  };
  // string sender_nick = 2;
  void clear_sender_nick();
  const std::string& sender_nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_nick();
  PROTOBUF_NODISCARD std::string* release_sender_nick();
  void set_allocated_sender_nick(std::string* sender_nick);
  private:
  const std::string& _internal_sender_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_nick(const std::string& value);
  std::string* _internal_mutable_sender_nick();
  public:

  // string operator_nick = 5;
  void clear_operator_nick();
  const std::string& operator_nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_nick();
  PROTOBUF_NODISCARD std::string* release_operator_nick();
  void set_allocated_operator_nick(std::string* operator_nick);
  private:
  const std::string& _internal_operator_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_nick(const std::string& value);
  std::string* _internal_mutable_operator_nick();
  public:

  // int64 sender_id = 1;
  void clear_sender_id();
  int64_t sender_id() const;
  void set_sender_id(int64_t value);
  private:
  int64_t _internal_sender_id() const;
  void _internal_set_sender_id(int64_t value);
  public:

  // int64 sender_time = 3;
  void clear_sender_time();
  int64_t sender_time() const;
  void set_sender_time(int64_t value);
  private:
  int64_t _internal_sender_time() const;
  void _internal_set_sender_time(int64_t value);
  public:

  // int64 operator_id = 4;
  void clear_operator_id();
  int64_t operator_id() const;
  void set_operator_id(int64_t value);
  private:
  int64_t _internal_operator_id() const;
  void _internal_set_operator_id(int64_t value);
  public:

  // int64 operator_time = 6;
  void clear_operator_time();
  int64_t operator_time() const;
  void set_operator_time(int64_t value);
  private:
  int64_t _internal_operator_time() const;
  void _internal_set_operator_time(int64_t value);
  public:

  // int32 message_id = 7;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetEssenceMsgListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_nick_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_nick_;
    int64_t sender_id_;
    int64_t sender_time_;
    int64_t operator_id_;
    int64_t operator_time_;
    int32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CheckUlrSafely_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CheckUlrSafely.Params) */ {
 public:
  inline CheckUlrSafely_Params() : CheckUlrSafely_Params(nullptr) {}
  ~CheckUlrSafely_Params() override;
  explicit PROTOBUF_CONSTEXPR CheckUlrSafely_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUlrSafely_Params(const CheckUlrSafely_Params& from);
  CheckUlrSafely_Params(CheckUlrSafely_Params&& from) noexcept
    : CheckUlrSafely_Params() {
    *this = ::std::move(from);
  }

  inline CheckUlrSafely_Params& operator=(const CheckUlrSafely_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUlrSafely_Params& operator=(CheckUlrSafely_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUlrSafely_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUlrSafely_Params* internal_default_instance() {
    return reinterpret_cast<const CheckUlrSafely_Params*>(
               &_CheckUlrSafely_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(CheckUlrSafely_Params& a, CheckUlrSafely_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUlrSafely_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUlrSafely_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckUlrSafely_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckUlrSafely_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUlrSafely_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckUlrSafely_Params& from) {
    CheckUlrSafely_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUlrSafely_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CheckUlrSafely.Params";
  }
  protected:
  explicit CheckUlrSafely_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CheckUlrSafely.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CheckUlrSafely final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CheckUlrSafely) */ {
 public:
  inline CheckUlrSafely() : CheckUlrSafely(nullptr) {}
  ~CheckUlrSafely() override;
  explicit PROTOBUF_CONSTEXPR CheckUlrSafely(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUlrSafely(const CheckUlrSafely& from);
  CheckUlrSafely(CheckUlrSafely&& from) noexcept
    : CheckUlrSafely() {
    *this = ::std::move(from);
  }

  inline CheckUlrSafely& operator=(const CheckUlrSafely& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUlrSafely& operator=(CheckUlrSafely&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUlrSafely& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUlrSafely* internal_default_instance() {
    return reinterpret_cast<const CheckUlrSafely*>(
               &_CheckUlrSafely_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(CheckUlrSafely& a, CheckUlrSafely& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUlrSafely* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUlrSafely* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckUlrSafely* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckUlrSafely>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUlrSafely& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckUlrSafely& from) {
    CheckUlrSafely::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUlrSafely* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CheckUlrSafely";
  }
  protected:
  explicit CheckUlrSafely(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckUlrSafely_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.CheckUlrSafely.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::CheckUlrSafely_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::CheckUlrSafely_Params* release_params();
  ::cqhttp::CheckUlrSafely_Params* mutable_params();
  void set_allocated_params(::cqhttp::CheckUlrSafely_Params* params);
  private:
  const ::cqhttp::CheckUlrSafely_Params& _internal_params() const;
  ::cqhttp::CheckUlrSafely_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::CheckUlrSafely_Params* params);
  ::cqhttp::CheckUlrSafely_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.CheckUlrSafely)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::CheckUlrSafely_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CheckUlrSafelyResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.CheckUlrSafelyResp) */ {
 public:
  inline CheckUlrSafelyResp() : CheckUlrSafelyResp(nullptr) {}
  ~CheckUlrSafelyResp() override;
  explicit PROTOBUF_CONSTEXPR CheckUlrSafelyResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUlrSafelyResp(const CheckUlrSafelyResp& from);
  CheckUlrSafelyResp(CheckUlrSafelyResp&& from) noexcept
    : CheckUlrSafelyResp() {
    *this = ::std::move(from);
  }

  inline CheckUlrSafelyResp& operator=(const CheckUlrSafelyResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUlrSafelyResp& operator=(CheckUlrSafelyResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUlrSafelyResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUlrSafelyResp* internal_default_instance() {
    return reinterpret_cast<const CheckUlrSafelyResp*>(
               &_CheckUlrSafelyResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(CheckUlrSafelyResp& a, CheckUlrSafelyResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUlrSafelyResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUlrSafelyResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckUlrSafelyResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckUlrSafelyResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUlrSafelyResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckUlrSafelyResp& from) {
    CheckUlrSafelyResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUlrSafelyResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.CheckUlrSafelyResp";
  }
  protected:
  explicit CheckUlrSafelyResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.CheckUlrSafelyResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetModelShow_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetModelShow.Params) */ {
 public:
  inline GetModelShow_Params() : GetModelShow_Params(nullptr) {}
  ~GetModelShow_Params() override;
  explicit PROTOBUF_CONSTEXPR GetModelShow_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelShow_Params(const GetModelShow_Params& from);
  GetModelShow_Params(GetModelShow_Params&& from) noexcept
    : GetModelShow_Params() {
    *this = ::std::move(from);
  }

  inline GetModelShow_Params& operator=(const GetModelShow_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelShow_Params& operator=(GetModelShow_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelShow_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelShow_Params* internal_default_instance() {
    return reinterpret_cast<const GetModelShow_Params*>(
               &_GetModelShow_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(GetModelShow_Params& a, GetModelShow_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelShow_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelShow_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelShow_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelShow_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelShow_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModelShow_Params& from) {
    GetModelShow_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelShow_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetModelShow.Params";
  }
  protected:
  explicit GetModelShow_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetModelShow.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetModelShow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetModelShow) */ {
 public:
  inline GetModelShow() : GetModelShow(nullptr) {}
  ~GetModelShow() override;
  explicit PROTOBUF_CONSTEXPR GetModelShow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelShow(const GetModelShow& from);
  GetModelShow(GetModelShow&& from) noexcept
    : GetModelShow() {
    *this = ::std::move(from);
  }

  inline GetModelShow& operator=(const GetModelShow& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelShow& operator=(GetModelShow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelShow& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelShow* internal_default_instance() {
    return reinterpret_cast<const GetModelShow*>(
               &_GetModelShow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(GetModelShow& a, GetModelShow& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelShow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelShow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelShow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelShow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelShow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModelShow& from) {
    GetModelShow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelShow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetModelShow";
  }
  protected:
  explicit GetModelShow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetModelShow_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.GetModelShow.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::GetModelShow_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::GetModelShow_Params* release_params();
  ::cqhttp::GetModelShow_Params* mutable_params();
  void set_allocated_params(::cqhttp::GetModelShow_Params* params);
  private:
  const ::cqhttp::GetModelShow_Params& _internal_params() const;
  ::cqhttp::GetModelShow_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::GetModelShow_Params* params);
  ::cqhttp::GetModelShow_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.GetModelShow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::GetModelShow_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetModelShowResp_Variant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetModelShowResp.Variant) */ {
 public:
  inline GetModelShowResp_Variant() : GetModelShowResp_Variant(nullptr) {}
  ~GetModelShowResp_Variant() override;
  explicit PROTOBUF_CONSTEXPR GetModelShowResp_Variant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelShowResp_Variant(const GetModelShowResp_Variant& from);
  GetModelShowResp_Variant(GetModelShowResp_Variant&& from) noexcept
    : GetModelShowResp_Variant() {
    *this = ::std::move(from);
  }

  inline GetModelShowResp_Variant& operator=(const GetModelShowResp_Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelShowResp_Variant& operator=(GetModelShowResp_Variant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelShowResp_Variant& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelShowResp_Variant* internal_default_instance() {
    return reinterpret_cast<const GetModelShowResp_Variant*>(
               &_GetModelShowResp_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(GetModelShowResp_Variant& a, GetModelShowResp_Variant& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelShowResp_Variant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelShowResp_Variant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelShowResp_Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelShowResp_Variant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelShowResp_Variant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModelShowResp_Variant& from) {
    GetModelShowResp_Variant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelShowResp_Variant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetModelShowResp.Variant";
  }
  protected:
  explicit GetModelShowResp_Variant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelShowFieldNumber = 1,
    kNeedPayFieldNumber = 2,
  };
  // string model_show = 1;
  void clear_model_show();
  const std::string& model_show() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_show(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_show();
  PROTOBUF_NODISCARD std::string* release_model_show();
  void set_allocated_model_show(std::string* model_show);
  private:
  const std::string& _internal_model_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_show(const std::string& value);
  std::string* _internal_mutable_model_show();
  public:

  // bool need_pay = 2;
  void clear_need_pay();
  bool need_pay() const;
  void set_need_pay(bool value);
  private:
  bool _internal_need_pay() const;
  void _internal_set_need_pay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.GetModelShowResp.Variant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_show_;
    bool need_pay_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetModelShowResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.GetModelShowResp) */ {
 public:
  inline GetModelShowResp() : GetModelShowResp(nullptr) {}
  ~GetModelShowResp() override;
  explicit PROTOBUF_CONSTEXPR GetModelShowResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelShowResp(const GetModelShowResp& from);
  GetModelShowResp(GetModelShowResp&& from) noexcept
    : GetModelShowResp() {
    *this = ::std::move(from);
  }

  inline GetModelShowResp& operator=(const GetModelShowResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelShowResp& operator=(GetModelShowResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelShowResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelShowResp* internal_default_instance() {
    return reinterpret_cast<const GetModelShowResp*>(
               &_GetModelShowResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(GetModelShowResp& a, GetModelShowResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelShowResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelShowResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelShowResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelShowResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelShowResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModelShowResp& from) {
    GetModelShowResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelShowResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.GetModelShowResp";
  }
  protected:
  explicit GetModelShowResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetModelShowResp_Variant Variant;

  // accessors -------------------------------------------------------

  enum : int {
    kVariantsFieldNumber = 1,
  };
  // repeated .cqhttp.GetModelShowResp.Variant variants = 1;
  int variants_size() const;
  private:
  int _internal_variants_size() const;
  public:
  void clear_variants();
  ::cqhttp::GetModelShowResp_Variant* mutable_variants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetModelShowResp_Variant >*
      mutable_variants();
  private:
  const ::cqhttp::GetModelShowResp_Variant& _internal_variants(int index) const;
  ::cqhttp::GetModelShowResp_Variant* _internal_add_variants();
  public:
  const ::cqhttp::GetModelShowResp_Variant& variants(int index) const;
  ::cqhttp::GetModelShowResp_Variant* add_variants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetModelShowResp_Variant >&
      variants() const;

  // @@protoc_insertion_point(class_scope:cqhttp.GetModelShowResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetModelShowResp_Variant > variants_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetModelShow_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetModelShow.Params) */ {
 public:
  inline SetModelShow_Params() : SetModelShow_Params(nullptr) {}
  ~SetModelShow_Params() override;
  explicit PROTOBUF_CONSTEXPR SetModelShow_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetModelShow_Params(const SetModelShow_Params& from);
  SetModelShow_Params(SetModelShow_Params&& from) noexcept
    : SetModelShow_Params() {
    *this = ::std::move(from);
  }

  inline SetModelShow_Params& operator=(const SetModelShow_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModelShow_Params& operator=(SetModelShow_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetModelShow_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetModelShow_Params* internal_default_instance() {
    return reinterpret_cast<const SetModelShow_Params*>(
               &_SetModelShow_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(SetModelShow_Params& a, SetModelShow_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModelShow_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetModelShow_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetModelShow_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetModelShow_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetModelShow_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetModelShow_Params& from) {
    SetModelShow_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModelShow_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetModelShow.Params";
  }
  protected:
  explicit SetModelShow_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kModelShowFieldNumber = 2,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string model_show = 2;
  void clear_model_show();
  const std::string& model_show() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_show(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_show();
  PROTOBUF_NODISCARD std::string* release_model_show();
  void set_allocated_model_show(std::string* model_show);
  private:
  const std::string& _internal_model_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_show(const std::string& value);
  std::string* _internal_mutable_model_show();
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SetModelShow.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_show_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SetModelShow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SetModelShow) */ {
 public:
  inline SetModelShow() : SetModelShow(nullptr) {}
  ~SetModelShow() override;
  explicit PROTOBUF_CONSTEXPR SetModelShow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetModelShow(const SetModelShow& from);
  SetModelShow(SetModelShow&& from) noexcept
    : SetModelShow() {
    *this = ::std::move(from);
  }

  inline SetModelShow& operator=(const SetModelShow& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModelShow& operator=(SetModelShow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetModelShow& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetModelShow* internal_default_instance() {
    return reinterpret_cast<const SetModelShow*>(
               &_SetModelShow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(SetModelShow& a, SetModelShow& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModelShow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetModelShow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetModelShow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetModelShow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetModelShow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetModelShow& from) {
    SetModelShow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModelShow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SetModelShow";
  }
  protected:
  explicit SetModelShow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetModelShow_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.SetModelShow.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SetModelShow_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SetModelShow_Params* release_params();
  ::cqhttp::SetModelShow_Params* mutable_params();
  void set_allocated_params(::cqhttp::SetModelShow_Params* params);
  private:
  const ::cqhttp::SetModelShow_Params& _internal_params() const;
  ::cqhttp::SetModelShow_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SetModelShow_Params* params);
  ::cqhttp::SetModelShow_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SetModelShow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::SetModelShow_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteUnidirectionalFriend_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteUnidirectionalFriend.Params) */ {
 public:
  inline DeleteUnidirectionalFriend_Params() : DeleteUnidirectionalFriend_Params(nullptr) {}
  ~DeleteUnidirectionalFriend_Params() override;
  explicit PROTOBUF_CONSTEXPR DeleteUnidirectionalFriend_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUnidirectionalFriend_Params(const DeleteUnidirectionalFriend_Params& from);
  DeleteUnidirectionalFriend_Params(DeleteUnidirectionalFriend_Params&& from) noexcept
    : DeleteUnidirectionalFriend_Params() {
    *this = ::std::move(from);
  }

  inline DeleteUnidirectionalFriend_Params& operator=(const DeleteUnidirectionalFriend_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUnidirectionalFriend_Params& operator=(DeleteUnidirectionalFriend_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUnidirectionalFriend_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUnidirectionalFriend_Params* internal_default_instance() {
    return reinterpret_cast<const DeleteUnidirectionalFriend_Params*>(
               &_DeleteUnidirectionalFriend_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(DeleteUnidirectionalFriend_Params& a, DeleteUnidirectionalFriend_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUnidirectionalFriend_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUnidirectionalFriend_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUnidirectionalFriend_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUnidirectionalFriend_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUnidirectionalFriend_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteUnidirectionalFriend_Params& from) {
    DeleteUnidirectionalFriend_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUnidirectionalFriend_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteUnidirectionalFriend.Params";
  }
  protected:
  explicit DeleteUnidirectionalFriend_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteUnidirectionalFriend.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteUnidirectionalFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.DeleteUnidirectionalFriend) */ {
 public:
  inline DeleteUnidirectionalFriend() : DeleteUnidirectionalFriend(nullptr) {}
  ~DeleteUnidirectionalFriend() override;
  explicit PROTOBUF_CONSTEXPR DeleteUnidirectionalFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUnidirectionalFriend(const DeleteUnidirectionalFriend& from);
  DeleteUnidirectionalFriend(DeleteUnidirectionalFriend&& from) noexcept
    : DeleteUnidirectionalFriend() {
    *this = ::std::move(from);
  }

  inline DeleteUnidirectionalFriend& operator=(const DeleteUnidirectionalFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUnidirectionalFriend& operator=(DeleteUnidirectionalFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUnidirectionalFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUnidirectionalFriend* internal_default_instance() {
    return reinterpret_cast<const DeleteUnidirectionalFriend*>(
               &_DeleteUnidirectionalFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(DeleteUnidirectionalFriend& a, DeleteUnidirectionalFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUnidirectionalFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUnidirectionalFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUnidirectionalFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUnidirectionalFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUnidirectionalFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteUnidirectionalFriend& from) {
    DeleteUnidirectionalFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUnidirectionalFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.DeleteUnidirectionalFriend";
  }
  protected:
  explicit DeleteUnidirectionalFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeleteUnidirectionalFriend_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .cqhttp.DeleteUnidirectionalFriend.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::DeleteUnidirectionalFriend_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::DeleteUnidirectionalFriend_Params* release_params();
  ::cqhttp::DeleteUnidirectionalFriend_Params* mutable_params();
  void set_allocated_params(::cqhttp::DeleteUnidirectionalFriend_Params* params);
  private:
  const ::cqhttp::DeleteUnidirectionalFriend_Params& _internal_params() const;
  ::cqhttp::DeleteUnidirectionalFriend_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::DeleteUnidirectionalFriend_Params* params);
  ::cqhttp::DeleteUnidirectionalFriend_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.DeleteUnidirectionalFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::cqhttp::DeleteUnidirectionalFriend_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendPrivateForwardMsg_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendPrivateForwardMsg.Params) */ {
 public:
  inline SendPrivateForwardMsg_Params() : SendPrivateForwardMsg_Params(nullptr) {}
  ~SendPrivateForwardMsg_Params() override;
  explicit PROTOBUF_CONSTEXPR SendPrivateForwardMsg_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPrivateForwardMsg_Params(const SendPrivateForwardMsg_Params& from);
  SendPrivateForwardMsg_Params(SendPrivateForwardMsg_Params&& from) noexcept
    : SendPrivateForwardMsg_Params() {
    *this = ::std::move(from);
  }

  inline SendPrivateForwardMsg_Params& operator=(const SendPrivateForwardMsg_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateForwardMsg_Params& operator=(SendPrivateForwardMsg_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPrivateForwardMsg_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPrivateForwardMsg_Params* internal_default_instance() {
    return reinterpret_cast<const SendPrivateForwardMsg_Params*>(
               &_SendPrivateForwardMsg_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(SendPrivateForwardMsg_Params& a, SendPrivateForwardMsg_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateForwardMsg_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateForwardMsg_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPrivateForwardMsg_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPrivateForwardMsg_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPrivateForwardMsg_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPrivateForwardMsg_Params& from) {
    SendPrivateForwardMsg_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateForwardMsg_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendPrivateForwardMsg.Params";
  }
  protected:
  explicit SendPrivateForwardMsg_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated .cqhttp.ForwardMessage messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::cqhttp::ForwardMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::ForwardMessage >*
      mutable_messages();
  private:
  const ::cqhttp::ForwardMessage& _internal_messages(int index) const;
  ::cqhttp::ForwardMessage* _internal_add_messages();
  public:
  const ::cqhttp::ForwardMessage& messages(int index) const;
  ::cqhttp::ForwardMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::ForwardMessage >&
      messages() const;

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendPrivateForwardMsg.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::ForwardMessage > messages_;
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendPrivateForwardMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendPrivateForwardMsg) */ {
 public:
  inline SendPrivateForwardMsg() : SendPrivateForwardMsg(nullptr) {}
  ~SendPrivateForwardMsg() override;
  explicit PROTOBUF_CONSTEXPR SendPrivateForwardMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPrivateForwardMsg(const SendPrivateForwardMsg& from);
  SendPrivateForwardMsg(SendPrivateForwardMsg&& from) noexcept
    : SendPrivateForwardMsg() {
    *this = ::std::move(from);
  }

  inline SendPrivateForwardMsg& operator=(const SendPrivateForwardMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateForwardMsg& operator=(SendPrivateForwardMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPrivateForwardMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPrivateForwardMsg* internal_default_instance() {
    return reinterpret_cast<const SendPrivateForwardMsg*>(
               &_SendPrivateForwardMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(SendPrivateForwardMsg& a, SendPrivateForwardMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateForwardMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateForwardMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPrivateForwardMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPrivateForwardMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPrivateForwardMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPrivateForwardMsg& from) {
    SendPrivateForwardMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateForwardMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendPrivateForwardMsg";
  }
  protected:
  explicit SendPrivateForwardMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendPrivateForwardMsg_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kEchoFieldNumber = 3,
    kParamsFieldNumber = 2,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string echo = 3;
  void clear_echo();
  const std::string& echo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_echo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // .cqhttp.SendPrivateForwardMsg.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::cqhttp::SendPrivateForwardMsg_Params& params() const;
  PROTOBUF_NODISCARD ::cqhttp::SendPrivateForwardMsg_Params* release_params();
  ::cqhttp::SendPrivateForwardMsg_Params* mutable_params();
  void set_allocated_params(::cqhttp::SendPrivateForwardMsg_Params* params);
  private:
  const ::cqhttp::SendPrivateForwardMsg_Params& _internal_params() const;
  ::cqhttp::SendPrivateForwardMsg_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cqhttp::SendPrivateForwardMsg_Params* params);
  ::cqhttp::SendPrivateForwardMsg_Params* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:cqhttp.SendPrivateForwardMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
    ::cqhttp::SendPrivateForwardMsg_Params* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendPrivateForwardMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cqhttp.SendPrivateForwardMsgResp) */ {
 public:
  inline SendPrivateForwardMsgResp() : SendPrivateForwardMsgResp(nullptr) {}
  ~SendPrivateForwardMsgResp() override;
  explicit PROTOBUF_CONSTEXPR SendPrivateForwardMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPrivateForwardMsgResp(const SendPrivateForwardMsgResp& from);
  SendPrivateForwardMsgResp(SendPrivateForwardMsgResp&& from) noexcept
    : SendPrivateForwardMsgResp() {
    *this = ::std::move(from);
  }

  inline SendPrivateForwardMsgResp& operator=(const SendPrivateForwardMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateForwardMsgResp& operator=(SendPrivateForwardMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPrivateForwardMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPrivateForwardMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendPrivateForwardMsgResp*>(
               &_SendPrivateForwardMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(SendPrivateForwardMsgResp& a, SendPrivateForwardMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateForwardMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateForwardMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPrivateForwardMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPrivateForwardMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPrivateForwardMsgResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPrivateForwardMsgResp& from) {
    SendPrivateForwardMsgResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateForwardMsgResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cqhttp.SendPrivateForwardMsgResp";
  }
  protected:
  explicit SendPrivateForwardMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardIdFieldNumber = 2,
    kMessageIdFieldNumber = 1,
  };
  // string forward_id = 2;
  void clear_forward_id();
  const std::string& forward_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_forward_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_forward_id();
  PROTOBUF_NODISCARD std::string* release_forward_id();
  void set_allocated_forward_id(std::string* forward_id);
  private:
  const std::string& _internal_forward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forward_id(const std::string& value);
  std::string* _internal_mutable_forward_id();
  public:

  // int64 message_id = 1;
  void clear_message_id();
  int64_t message_id() const;
  void set_message_id(int64_t value);
  private:
  int64_t _internal_message_id() const;
  void _internal_set_message_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cqhttp.SendPrivateForwardMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr forward_id_;
    int64_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cqhttp_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendPrivateMsg_Params

// int64 user_id = 1;
inline void SendPrivateMsg_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SendPrivateMsg_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SendPrivateMsg_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.Params.user_id)
  return _internal_user_id();
}
inline void SendPrivateMsg_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SendPrivateMsg_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsg.Params.user_id)
}

// int64 group_id = 2;
inline void SendPrivateMsg_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SendPrivateMsg_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SendPrivateMsg_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.Params.group_id)
  return _internal_group_id();
}
inline void SendPrivateMsg_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SendPrivateMsg_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsg.Params.group_id)
}

// string messgae = 3;
inline void SendPrivateMsg_Params::clear_messgae() {
  _impl_.messgae_.ClearToEmpty();
}
inline const std::string& SendPrivateMsg_Params::messgae() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.Params.messgae)
  return _internal_messgae();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPrivateMsg_Params::set_messgae(ArgT0&& arg0, ArgT... args) {
 
 _impl_.messgae_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsg.Params.messgae)
}
inline std::string* SendPrivateMsg_Params::mutable_messgae() {
  std::string* _s = _internal_mutable_messgae();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateMsg.Params.messgae)
  return _s;
}
inline const std::string& SendPrivateMsg_Params::_internal_messgae() const {
  return _impl_.messgae_.Get();
}
inline void SendPrivateMsg_Params::_internal_set_messgae(const std::string& value) {
  
  _impl_.messgae_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPrivateMsg_Params::_internal_mutable_messgae() {
  
  return _impl_.messgae_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPrivateMsg_Params::release_messgae() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateMsg.Params.messgae)
  return _impl_.messgae_.Release();
}
inline void SendPrivateMsg_Params::set_allocated_messgae(std::string* messgae) {
  if (messgae != nullptr) {
    
  } else {
    
  }
  _impl_.messgae_.SetAllocated(messgae, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.messgae_.IsDefault()) {
    _impl_.messgae_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateMsg.Params.messgae)
}

// bool auto_escape = 4;
inline void SendPrivateMsg_Params::clear_auto_escape() {
  _impl_.auto_escape_ = false;
}
inline bool SendPrivateMsg_Params::_internal_auto_escape() const {
  return _impl_.auto_escape_;
}
inline bool SendPrivateMsg_Params::auto_escape() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.Params.auto_escape)
  return _internal_auto_escape();
}
inline void SendPrivateMsg_Params::_internal_set_auto_escape(bool value) {
  
  _impl_.auto_escape_ = value;
}
inline void SendPrivateMsg_Params::set_auto_escape(bool value) {
  _internal_set_auto_escape(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsg.Params.auto_escape)
}

// -------------------------------------------------------------------

// SendPrivateMsg

// string action = 1;
inline void SendPrivateMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendPrivateMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPrivateMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsg.action)
}
inline std::string* SendPrivateMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateMsg.action)
  return _s;
}
inline const std::string& SendPrivateMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendPrivateMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPrivateMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPrivateMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateMsg.action)
  return _impl_.action_.Release();
}
inline void SendPrivateMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateMsg.action)
}

// .cqhttp.SendPrivateMsg.Params params = 2;
inline bool SendPrivateMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendPrivateMsg::has_params() const {
  return _internal_has_params();
}
inline void SendPrivateMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendPrivateMsg_Params& SendPrivateMsg::_internal_params() const {
  const ::cqhttp::SendPrivateMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendPrivateMsg_Params&>(
      ::cqhttp::_SendPrivateMsg_Params_default_instance_);
}
inline const ::cqhttp::SendPrivateMsg_Params& SendPrivateMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.params)
  return _internal_params();
}
inline void SendPrivateMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::SendPrivateMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendPrivateMsg.params)
}
inline ::cqhttp::SendPrivateMsg_Params* SendPrivateMsg::release_params() {
  
  ::cqhttp::SendPrivateMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendPrivateMsg_Params* SendPrivateMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateMsg.params)
  
  ::cqhttp::SendPrivateMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendPrivateMsg_Params* SendPrivateMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendPrivateMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendPrivateMsg_Params* SendPrivateMsg::mutable_params() {
  ::cqhttp::SendPrivateMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateMsg.params)
  return _msg;
}
inline void SendPrivateMsg::set_allocated_params(::cqhttp::SendPrivateMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateMsg.params)
}

// string echo = 3;
inline void SendPrivateMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& SendPrivateMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPrivateMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsg.echo)
}
inline std::string* SendPrivateMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateMsg.echo)
  return _s;
}
inline const std::string& SendPrivateMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void SendPrivateMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPrivateMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPrivateMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateMsg.echo)
  return _impl_.echo_.Release();
}
inline void SendPrivateMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateMsg.echo)
}

// -------------------------------------------------------------------

// SendPrivateMsgResp

// int32 message_id = 1;
inline void SendPrivateMsgResp::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t SendPrivateMsgResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t SendPrivateMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateMsgResp.message_id)
  return _internal_message_id();
}
inline void SendPrivateMsgResp::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void SendPrivateMsgResp::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateMsgResp.message_id)
}

// -------------------------------------------------------------------

// SendGroupMsg_Params

// int64 group_id = 1;
inline void SendGroupMsg_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SendGroupMsg_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SendGroupMsg_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsg.Params.group_id)
  return _internal_group_id();
}
inline void SendGroupMsg_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SendGroupMsg_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupMsg.Params.group_id)
}

// int64 messgae = 2;
inline void SendGroupMsg_Params::clear_messgae() {
  _impl_.messgae_ = int64_t{0};
}
inline int64_t SendGroupMsg_Params::_internal_messgae() const {
  return _impl_.messgae_;
}
inline int64_t SendGroupMsg_Params::messgae() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsg.Params.messgae)
  return _internal_messgae();
}
inline void SendGroupMsg_Params::_internal_set_messgae(int64_t value) {
  
  _impl_.messgae_ = value;
}
inline void SendGroupMsg_Params::set_messgae(int64_t value) {
  _internal_set_messgae(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupMsg.Params.messgae)
}

// bool auto_escape = 3;
inline void SendGroupMsg_Params::clear_auto_escape() {
  _impl_.auto_escape_ = false;
}
inline bool SendGroupMsg_Params::_internal_auto_escape() const {
  return _impl_.auto_escape_;
}
inline bool SendGroupMsg_Params::auto_escape() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsg.Params.auto_escape)
  return _internal_auto_escape();
}
inline void SendGroupMsg_Params::_internal_set_auto_escape(bool value) {
  
  _impl_.auto_escape_ = value;
}
inline void SendGroupMsg_Params::set_auto_escape(bool value) {
  _internal_set_auto_escape(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupMsg.Params.auto_escape)
}

// -------------------------------------------------------------------

// SendGroupMsg

// string action = 1;
inline void SendGroupMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendGroupMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupMsg.action)
}
inline std::string* SendGroupMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupMsg.action)
  return _s;
}
inline const std::string& SendGroupMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendGroupMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupMsg.action)
  return _impl_.action_.Release();
}
inline void SendGroupMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupMsg.action)
}

// .cqhttp.SendGroupMsg.Params params = 2;
inline bool SendGroupMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendGroupMsg::has_params() const {
  return _internal_has_params();
}
inline void SendGroupMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendGroupMsg_Params& SendGroupMsg::_internal_params() const {
  const ::cqhttp::SendGroupMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendGroupMsg_Params&>(
      ::cqhttp::_SendGroupMsg_Params_default_instance_);
}
inline const ::cqhttp::SendGroupMsg_Params& SendGroupMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsg.params)
  return _internal_params();
}
inline void SendGroupMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::SendGroupMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendGroupMsg.params)
}
inline ::cqhttp::SendGroupMsg_Params* SendGroupMsg::release_params() {
  
  ::cqhttp::SendGroupMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendGroupMsg_Params* SendGroupMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupMsg.params)
  
  ::cqhttp::SendGroupMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendGroupMsg_Params* SendGroupMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendGroupMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendGroupMsg_Params* SendGroupMsg::mutable_params() {
  ::cqhttp::SendGroupMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupMsg.params)
  return _msg;
}
inline void SendGroupMsg::set_allocated_params(::cqhttp::SendGroupMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupMsg.params)
}

// string echo = 3;
inline void SendGroupMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& SendGroupMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupMsg.echo)
}
inline std::string* SendGroupMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupMsg.echo)
  return _s;
}
inline const std::string& SendGroupMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void SendGroupMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupMsg.echo)
  return _impl_.echo_.Release();
}
inline void SendGroupMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupMsg.echo)
}

// -------------------------------------------------------------------

// SendGroupMsgResp

// int32 message_id = 1;
inline void SendGroupMsgResp::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t SendGroupMsgResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t SendGroupMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupMsgResp.message_id)
  return _internal_message_id();
}
inline void SendGroupMsgResp::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void SendGroupMsgResp::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupMsgResp.message_id)
}

// -------------------------------------------------------------------

// SendGroupForwardMsg_Params

// int64 group_id = 1;
inline void SendGroupForwardMsg_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SendGroupForwardMsg_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SendGroupForwardMsg_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsg.Params.group_id)
  return _internal_group_id();
}
inline void SendGroupForwardMsg_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SendGroupForwardMsg_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupForwardMsg.Params.group_id)
}

// int64 messgae = 2;
inline void SendGroupForwardMsg_Params::clear_messgae() {
  _impl_.messgae_ = int64_t{0};
}
inline int64_t SendGroupForwardMsg_Params::_internal_messgae() const {
  return _impl_.messgae_;
}
inline int64_t SendGroupForwardMsg_Params::messgae() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsg.Params.messgae)
  return _internal_messgae();
}
inline void SendGroupForwardMsg_Params::_internal_set_messgae(int64_t value) {
  
  _impl_.messgae_ = value;
}
inline void SendGroupForwardMsg_Params::set_messgae(int64_t value) {
  _internal_set_messgae(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupForwardMsg.Params.messgae)
}

// -------------------------------------------------------------------

// SendGroupForwardMsg

// string action = 1;
inline void SendGroupForwardMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendGroupForwardMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupForwardMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupForwardMsg.action)
}
inline std::string* SendGroupForwardMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupForwardMsg.action)
  return _s;
}
inline const std::string& SendGroupForwardMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendGroupForwardMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupForwardMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupForwardMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupForwardMsg.action)
  return _impl_.action_.Release();
}
inline void SendGroupForwardMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupForwardMsg.action)
}

// .cqhttp.SendGroupForwardMsg.Params params = 2;
inline bool SendGroupForwardMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendGroupForwardMsg::has_params() const {
  return _internal_has_params();
}
inline void SendGroupForwardMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendGroupForwardMsg_Params& SendGroupForwardMsg::_internal_params() const {
  const ::cqhttp::SendGroupForwardMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendGroupForwardMsg_Params&>(
      ::cqhttp::_SendGroupForwardMsg_Params_default_instance_);
}
inline const ::cqhttp::SendGroupForwardMsg_Params& SendGroupForwardMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsg.params)
  return _internal_params();
}
inline void SendGroupForwardMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::SendGroupForwardMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendGroupForwardMsg.params)
}
inline ::cqhttp::SendGroupForwardMsg_Params* SendGroupForwardMsg::release_params() {
  
  ::cqhttp::SendGroupForwardMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendGroupForwardMsg_Params* SendGroupForwardMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupForwardMsg.params)
  
  ::cqhttp::SendGroupForwardMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendGroupForwardMsg_Params* SendGroupForwardMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendGroupForwardMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendGroupForwardMsg_Params* SendGroupForwardMsg::mutable_params() {
  ::cqhttp::SendGroupForwardMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupForwardMsg.params)
  return _msg;
}
inline void SendGroupForwardMsg::set_allocated_params(::cqhttp::SendGroupForwardMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupForwardMsg.params)
}

// string echo = 3;
inline void SendGroupForwardMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& SendGroupForwardMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupForwardMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupForwardMsg.echo)
}
inline std::string* SendGroupForwardMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupForwardMsg.echo)
  return _s;
}
inline const std::string& SendGroupForwardMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void SendGroupForwardMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupForwardMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupForwardMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupForwardMsg.echo)
  return _impl_.echo_.Release();
}
inline void SendGroupForwardMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupForwardMsg.echo)
}

// -------------------------------------------------------------------

// SendGroupForwardMsgResp

// int64 message_id = 1;
inline void SendGroupForwardMsgResp::clear_message_id() {
  _impl_.message_id_ = int64_t{0};
}
inline int64_t SendGroupForwardMsgResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int64_t SendGroupForwardMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsgResp.message_id)
  return _internal_message_id();
}
inline void SendGroupForwardMsgResp::_internal_set_message_id(int64_t value) {
  
  _impl_.message_id_ = value;
}
inline void SendGroupForwardMsgResp::set_message_id(int64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupForwardMsgResp.message_id)
}

// string forward_id = 2;
inline void SendGroupForwardMsgResp::clear_forward_id() {
  _impl_.forward_id_.ClearToEmpty();
}
inline const std::string& SendGroupForwardMsgResp::forward_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupForwardMsgResp.forward_id)
  return _internal_forward_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupForwardMsgResp::set_forward_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.forward_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupForwardMsgResp.forward_id)
}
inline std::string* SendGroupForwardMsgResp::mutable_forward_id() {
  std::string* _s = _internal_mutable_forward_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupForwardMsgResp.forward_id)
  return _s;
}
inline const std::string& SendGroupForwardMsgResp::_internal_forward_id() const {
  return _impl_.forward_id_.Get();
}
inline void SendGroupForwardMsgResp::_internal_set_forward_id(const std::string& value) {
  
  _impl_.forward_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupForwardMsgResp::_internal_mutable_forward_id() {
  
  return _impl_.forward_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupForwardMsgResp::release_forward_id() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupForwardMsgResp.forward_id)
  return _impl_.forward_id_.Release();
}
inline void SendGroupForwardMsgResp::set_allocated_forward_id(std::string* forward_id) {
  if (forward_id != nullptr) {
    
  } else {
    
  }
  _impl_.forward_id_.SetAllocated(forward_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.forward_id_.IsDefault()) {
    _impl_.forward_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupForwardMsgResp.forward_id)
}

// -------------------------------------------------------------------

// SendMessage_Params

// string message_type = 1;
inline void SendMessage_Params::clear_message_type() {
  _impl_.message_type_.ClearToEmpty();
}
inline const std::string& SendMessage_Params::message_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.Params.message_type)
  return _internal_message_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendMessage_Params::set_message_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.Params.message_type)
}
inline std::string* SendMessage_Params::mutable_message_type() {
  std::string* _s = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendMessage.Params.message_type)
  return _s;
}
inline const std::string& SendMessage_Params::_internal_message_type() const {
  return _impl_.message_type_.Get();
}
inline void SendMessage_Params::_internal_set_message_type(const std::string& value) {
  
  _impl_.message_type_.Set(value, GetArenaForAllocation());
}
inline std::string* SendMessage_Params::_internal_mutable_message_type() {
  
  return _impl_.message_type_.Mutable(GetArenaForAllocation());
}
inline std::string* SendMessage_Params::release_message_type() {
  // @@protoc_insertion_point(field_release:cqhttp.SendMessage.Params.message_type)
  return _impl_.message_type_.Release();
}
inline void SendMessage_Params::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  _impl_.message_type_.SetAllocated(message_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_type_.IsDefault()) {
    _impl_.message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendMessage.Params.message_type)
}

// int64 user_id = 2;
inline void SendMessage_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SendMessage_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SendMessage_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.Params.user_id)
  return _internal_user_id();
}
inline void SendMessage_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SendMessage_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.Params.user_id)
}

// int64 group_id = 3;
inline void SendMessage_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SendMessage_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SendMessage_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.Params.group_id)
  return _internal_group_id();
}
inline void SendMessage_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SendMessage_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.Params.group_id)
}

// string message = 4;
inline void SendMessage_Params::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SendMessage_Params::message() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.Params.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendMessage_Params::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.Params.message)
}
inline std::string* SendMessage_Params::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendMessage.Params.message)
  return _s;
}
inline const std::string& SendMessage_Params::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SendMessage_Params::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SendMessage_Params::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SendMessage_Params::release_message() {
  // @@protoc_insertion_point(field_release:cqhttp.SendMessage.Params.message)
  return _impl_.message_.Release();
}
inline void SendMessage_Params::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendMessage.Params.message)
}

// bool auto_escape = 5;
inline void SendMessage_Params::clear_auto_escape() {
  _impl_.auto_escape_ = false;
}
inline bool SendMessage_Params::_internal_auto_escape() const {
  return _impl_.auto_escape_;
}
inline bool SendMessage_Params::auto_escape() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.Params.auto_escape)
  return _internal_auto_escape();
}
inline void SendMessage_Params::_internal_set_auto_escape(bool value) {
  
  _impl_.auto_escape_ = value;
}
inline void SendMessage_Params::set_auto_escape(bool value) {
  _internal_set_auto_escape(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.Params.auto_escape)
}

// -------------------------------------------------------------------

// SendMessage

// string action = 1;
inline void SendMessage::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendMessage::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendMessage::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.action)
}
inline std::string* SendMessage::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendMessage.action)
  return _s;
}
inline const std::string& SendMessage::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendMessage::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendMessage::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendMessage::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendMessage.action)
  return _impl_.action_.Release();
}
inline void SendMessage::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendMessage.action)
}

// .cqhttp.SendMessage.Params params = 2;
inline bool SendMessage::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendMessage::has_params() const {
  return _internal_has_params();
}
inline void SendMessage::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendMessage_Params& SendMessage::_internal_params() const {
  const ::cqhttp::SendMessage_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendMessage_Params&>(
      ::cqhttp::_SendMessage_Params_default_instance_);
}
inline const ::cqhttp::SendMessage_Params& SendMessage::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.params)
  return _internal_params();
}
inline void SendMessage::unsafe_arena_set_allocated_params(
    ::cqhttp::SendMessage_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendMessage.params)
}
inline ::cqhttp::SendMessage_Params* SendMessage::release_params() {
  
  ::cqhttp::SendMessage_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendMessage_Params* SendMessage::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendMessage.params)
  
  ::cqhttp::SendMessage_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendMessage_Params* SendMessage::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendMessage_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendMessage_Params* SendMessage::mutable_params() {
  ::cqhttp::SendMessage_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendMessage.params)
  return _msg;
}
inline void SendMessage::set_allocated_params(::cqhttp::SendMessage_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendMessage.params)
}

// string echo = 3;
inline void SendMessage::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& SendMessage::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessage.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendMessage::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendMessage.echo)
}
inline std::string* SendMessage::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendMessage.echo)
  return _s;
}
inline const std::string& SendMessage::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void SendMessage::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* SendMessage::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* SendMessage::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.SendMessage.echo)
  return _impl_.echo_.Release();
}
inline void SendMessage::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendMessage.echo)
}

// -------------------------------------------------------------------

// SendMessageResp

// int32 message_id = 2;
inline void SendMessageResp::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t SendMessageResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t SendMessageResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendMessageResp.message_id)
  return _internal_message_id();
}
inline void SendMessageResp::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void SendMessageResp::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendMessageResp.message_id)
}

// -------------------------------------------------------------------

// DeleteMsg_Params

// int32 message_id = 1;
inline void DeleteMsg_Params::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t DeleteMsg_Params::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t DeleteMsg_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteMsg.Params.message_id)
  return _internal_message_id();
}
inline void DeleteMsg_Params::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void DeleteMsg_Params::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteMsg.Params.message_id)
}

// -------------------------------------------------------------------

// DeleteMsg

// string action = 1;
inline void DeleteMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DeleteMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteMsg.action)
}
inline std::string* DeleteMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteMsg.action)
  return _s;
}
inline const std::string& DeleteMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DeleteMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteMsg.action)
  return _impl_.action_.Release();
}
inline void DeleteMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteMsg.action)
}

// .cqhttp.DeleteMsg.Params params = 2;
inline bool DeleteMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DeleteMsg::has_params() const {
  return _internal_has_params();
}
inline void DeleteMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DeleteMsg_Params& DeleteMsg::_internal_params() const {
  const ::cqhttp::DeleteMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DeleteMsg_Params&>(
      ::cqhttp::_DeleteMsg_Params_default_instance_);
}
inline const ::cqhttp::DeleteMsg_Params& DeleteMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteMsg.params)
  return _internal_params();
}
inline void DeleteMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::DeleteMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DeleteMsg.params)
}
inline ::cqhttp::DeleteMsg_Params* DeleteMsg::release_params() {
  
  ::cqhttp::DeleteMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DeleteMsg_Params* DeleteMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteMsg.params)
  
  ::cqhttp::DeleteMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DeleteMsg_Params* DeleteMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DeleteMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DeleteMsg_Params* DeleteMsg::mutable_params() {
  ::cqhttp::DeleteMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteMsg.params)
  return _msg;
}
inline void DeleteMsg::set_allocated_params(::cqhttp::DeleteMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteMsg.params)
}

// -------------------------------------------------------------------

// getMsg_Params

// int32 message_id = 1;
inline void getMsg_Params::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t getMsg_Params::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t getMsg_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsg.Params.message_id)
  return _internal_message_id();
}
inline void getMsg_Params::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void getMsg_Params::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.getMsg.Params.message_id)
}

// -------------------------------------------------------------------

// getMsg

// string action = 1;
inline void getMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& getMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getMsg.action)
}
inline std::string* getMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsg.action)
  return _s;
}
inline const std::string& getMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void getMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* getMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* getMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsg.action)
  return _impl_.action_.Release();
}
inline void getMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsg.action)
}

// .cqhttp.getMsg.Params params = 2;
inline bool getMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool getMsg::has_params() const {
  return _internal_has_params();
}
inline void getMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::getMsg_Params& getMsg::_internal_params() const {
  const ::cqhttp::getMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::getMsg_Params&>(
      ::cqhttp::_getMsg_Params_default_instance_);
}
inline const ::cqhttp::getMsg_Params& getMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsg.params)
  return _internal_params();
}
inline void getMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::getMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.getMsg.params)
}
inline ::cqhttp::getMsg_Params* getMsg::release_params() {
  
  ::cqhttp::getMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::getMsg_Params* getMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsg.params)
  
  ::cqhttp::getMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::getMsg_Params* getMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::getMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::getMsg_Params* getMsg::mutable_params() {
  ::cqhttp::getMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsg.params)
  return _msg;
}
inline void getMsg::set_allocated_params(::cqhttp::getMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsg.params)
}

// string echo = 3;
inline void getMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& getMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getMsg.echo)
}
inline std::string* getMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsg.echo)
  return _s;
}
inline const std::string& getMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void getMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* getMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* getMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsg.echo)
  return _impl_.echo_.Release();
}
inline void getMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsg.echo)
}

// -------------------------------------------------------------------

// getMsgResp

// bool group = 1;
inline void getMsgResp::clear_group() {
  _impl_.group_ = false;
}
inline bool getMsgResp::_internal_group() const {
  return _impl_.group_;
}
inline bool getMsgResp::group() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.group)
  return _internal_group();
}
inline void getMsgResp::_internal_set_group(bool value) {
  
  _impl_.group_ = value;
}
inline void getMsgResp::set_group(bool value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.group)
}

// int64 group_id = 2;
inline void getMsgResp::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t getMsgResp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t getMsgResp::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.group_id)
  return _internal_group_id();
}
inline void getMsgResp::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void getMsgResp::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.group_id)
}

// int32 message_id = 3;
inline void getMsgResp::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t getMsgResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t getMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.message_id)
  return _internal_message_id();
}
inline void getMsgResp::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void getMsgResp::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.message_id)
}

// int32 real_id = 4;
inline void getMsgResp::clear_real_id() {
  _impl_.real_id_ = 0;
}
inline int32_t getMsgResp::_internal_real_id() const {
  return _impl_.real_id_;
}
inline int32_t getMsgResp::real_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.real_id)
  return _internal_real_id();
}
inline void getMsgResp::_internal_set_real_id(int32_t value) {
  
  _impl_.real_id_ = value;
}
inline void getMsgResp::set_real_id(int32_t value) {
  _internal_set_real_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.real_id)
}

// string message_type = 5;
inline void getMsgResp::clear_message_type() {
  _impl_.message_type_.ClearToEmpty();
}
inline const std::string& getMsgResp::message_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.message_type)
  return _internal_message_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMsgResp::set_message_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.message_type)
}
inline std::string* getMsgResp::mutable_message_type() {
  std::string* _s = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsgResp.message_type)
  return _s;
}
inline const std::string& getMsgResp::_internal_message_type() const {
  return _impl_.message_type_.Get();
}
inline void getMsgResp::_internal_set_message_type(const std::string& value) {
  
  _impl_.message_type_.Set(value, GetArenaForAllocation());
}
inline std::string* getMsgResp::_internal_mutable_message_type() {
  
  return _impl_.message_type_.Mutable(GetArenaForAllocation());
}
inline std::string* getMsgResp::release_message_type() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsgResp.message_type)
  return _impl_.message_type_.Release();
}
inline void getMsgResp::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  _impl_.message_type_.SetAllocated(message_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_type_.IsDefault()) {
    _impl_.message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsgResp.message_type)
}

// .cqhttp.Sender sender = 6;
inline bool getMsgResp::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool getMsgResp::has_sender() const {
  return _internal_has_sender();
}
inline const ::cqhttp::Sender& getMsgResp::_internal_sender() const {
  const ::cqhttp::Sender* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Sender&>(
      ::cqhttp::_Sender_default_instance_);
}
inline const ::cqhttp::Sender& getMsgResp::sender() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.sender)
  return _internal_sender();
}
inline void getMsgResp::unsafe_arena_set_allocated_sender(
    ::cqhttp::Sender* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.getMsgResp.sender)
}
inline ::cqhttp::Sender* getMsgResp::release_sender() {
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Sender* getMsgResp::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsgResp.sender)
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::cqhttp::Sender* getMsgResp::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Sender>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::cqhttp::Sender* getMsgResp::mutable_sender() {
  ::cqhttp::Sender* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsgResp.sender)
  return _msg;
}
inline void getMsgResp::set_allocated_sender(::cqhttp::Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsgResp.sender)
}

// int32 time = 7;
inline void getMsgResp::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t getMsgResp::_internal_time() const {
  return _impl_.time_;
}
inline int32_t getMsgResp::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.time)
  return _internal_time();
}
inline void getMsgResp::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void getMsgResp::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.time)
}

// string message = 8;
inline void getMsgResp::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& getMsgResp::message() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMsgResp::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.message)
}
inline std::string* getMsgResp::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsgResp.message)
  return _s;
}
inline const std::string& getMsgResp::_internal_message() const {
  return _impl_.message_.Get();
}
inline void getMsgResp::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* getMsgResp::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* getMsgResp::release_message() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsgResp.message)
  return _impl_.message_.Release();
}
inline void getMsgResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsgResp.message)
}

// string raw_message = 9;
inline void getMsgResp::clear_raw_message() {
  _impl_.raw_message_.ClearToEmpty();
}
inline const std::string& getMsgResp::raw_message() const {
  // @@protoc_insertion_point(field_get:cqhttp.getMsgResp.raw_message)
  return _internal_raw_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMsgResp::set_raw_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getMsgResp.raw_message)
}
inline std::string* getMsgResp::mutable_raw_message() {
  std::string* _s = _internal_mutable_raw_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.getMsgResp.raw_message)
  return _s;
}
inline const std::string& getMsgResp::_internal_raw_message() const {
  return _impl_.raw_message_.Get();
}
inline void getMsgResp::_internal_set_raw_message(const std::string& value) {
  
  _impl_.raw_message_.Set(value, GetArenaForAllocation());
}
inline std::string* getMsgResp::_internal_mutable_raw_message() {
  
  return _impl_.raw_message_.Mutable(GetArenaForAllocation());
}
inline std::string* getMsgResp::release_raw_message() {
  // @@protoc_insertion_point(field_release:cqhttp.getMsgResp.raw_message)
  return _impl_.raw_message_.Release();
}
inline void getMsgResp::set_allocated_raw_message(std::string* raw_message) {
  if (raw_message != nullptr) {
    
  } else {
    
  }
  _impl_.raw_message_.SetAllocated(raw_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_message_.IsDefault()) {
    _impl_.raw_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getMsgResp.raw_message)
}

// -------------------------------------------------------------------

// GetForwardMsg_Params

// string message_id = 1;
inline void GetForwardMsg_Params::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& GetForwardMsg_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsg.Params.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetForwardMsg_Params::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetForwardMsg.Params.message_id)
}
inline std::string* GetForwardMsg_Params::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsg.Params.message_id)
  return _s;
}
inline const std::string& GetForwardMsg_Params::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void GetForwardMsg_Params::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetForwardMsg_Params::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetForwardMsg_Params::release_message_id() {
  // @@protoc_insertion_point(field_release:cqhttp.GetForwardMsg.Params.message_id)
  return _impl_.message_id_.Release();
}
inline void GetForwardMsg_Params::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetForwardMsg.Params.message_id)
}

// -------------------------------------------------------------------

// GetForwardMsg

// string action = 1;
inline void GetForwardMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetForwardMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetForwardMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetForwardMsg.action)
}
inline std::string* GetForwardMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsg.action)
  return _s;
}
inline const std::string& GetForwardMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetForwardMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetForwardMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetForwardMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetForwardMsg.action)
  return _impl_.action_.Release();
}
inline void GetForwardMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetForwardMsg.action)
}

// .cqhttp.GetForwardMsg.Params params = 2;
inline bool GetForwardMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetForwardMsg::has_params() const {
  return _internal_has_params();
}
inline void GetForwardMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetForwardMsg_Params& GetForwardMsg::_internal_params() const {
  const ::cqhttp::GetForwardMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetForwardMsg_Params&>(
      ::cqhttp::_GetForwardMsg_Params_default_instance_);
}
inline const ::cqhttp::GetForwardMsg_Params& GetForwardMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsg.params)
  return _internal_params();
}
inline void GetForwardMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::GetForwardMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetForwardMsg.params)
}
inline ::cqhttp::GetForwardMsg_Params* GetForwardMsg::release_params() {
  
  ::cqhttp::GetForwardMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetForwardMsg_Params* GetForwardMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetForwardMsg.params)
  
  ::cqhttp::GetForwardMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetForwardMsg_Params* GetForwardMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetForwardMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetForwardMsg_Params* GetForwardMsg::mutable_params() {
  ::cqhttp::GetForwardMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsg.params)
  return _msg;
}
inline void GetForwardMsg::set_allocated_params(::cqhttp::GetForwardMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetForwardMsg.params)
}

// string echo = 3;
inline void GetForwardMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetForwardMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetForwardMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetForwardMsg.echo)
}
inline std::string* GetForwardMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsg.echo)
  return _s;
}
inline const std::string& GetForwardMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetForwardMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetForwardMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetForwardMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetForwardMsg.echo)
  return _impl_.echo_.Release();
}
inline void GetForwardMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetForwardMsg.echo)
}

// -------------------------------------------------------------------

// GetForwardMsgResp_Messages

// string content = 1;
inline void GetForwardMsgResp_Messages::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GetForwardMsgResp_Messages::content() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsgResp.Messages.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetForwardMsgResp_Messages::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetForwardMsgResp.Messages.content)
}
inline std::string* GetForwardMsgResp_Messages::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsgResp.Messages.content)
  return _s;
}
inline const std::string& GetForwardMsgResp_Messages::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GetForwardMsgResp_Messages::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GetForwardMsgResp_Messages::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GetForwardMsgResp_Messages::release_content() {
  // @@protoc_insertion_point(field_release:cqhttp.GetForwardMsgResp.Messages.content)
  return _impl_.content_.Release();
}
inline void GetForwardMsgResp_Messages::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetForwardMsgResp.Messages.content)
}

// .cqhttp.Sender sender = 2;
inline bool GetForwardMsgResp_Messages::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool GetForwardMsgResp_Messages::has_sender() const {
  return _internal_has_sender();
}
inline const ::cqhttp::Sender& GetForwardMsgResp_Messages::_internal_sender() const {
  const ::cqhttp::Sender* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Sender&>(
      ::cqhttp::_Sender_default_instance_);
}
inline const ::cqhttp::Sender& GetForwardMsgResp_Messages::sender() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsgResp.Messages.sender)
  return _internal_sender();
}
inline void GetForwardMsgResp_Messages::unsafe_arena_set_allocated_sender(
    ::cqhttp::Sender* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetForwardMsgResp.Messages.sender)
}
inline ::cqhttp::Sender* GetForwardMsgResp_Messages::release_sender() {
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Sender* GetForwardMsgResp_Messages::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:cqhttp.GetForwardMsgResp.Messages.sender)
  
  ::cqhttp::Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::cqhttp::Sender* GetForwardMsgResp_Messages::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Sender>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::cqhttp::Sender* GetForwardMsgResp_Messages::mutable_sender() {
  ::cqhttp::Sender* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsgResp.Messages.sender)
  return _msg;
}
inline void GetForwardMsgResp_Messages::set_allocated_sender(::cqhttp::Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetForwardMsgResp.Messages.sender)
}

// int64 time = 3;
inline void GetForwardMsgResp_Messages::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t GetForwardMsgResp_Messages::_internal_time() const {
  return _impl_.time_;
}
inline int64_t GetForwardMsgResp_Messages::time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsgResp.Messages.time)
  return _internal_time();
}
inline void GetForwardMsgResp_Messages::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void GetForwardMsgResp_Messages::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetForwardMsgResp.Messages.time)
}

// -------------------------------------------------------------------

// GetForwardMsgResp

// repeated .cqhttp.GetForwardMsgResp.Messages messages = 1;
inline int GetForwardMsgResp::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int GetForwardMsgResp::messages_size() const {
  return _internal_messages_size();
}
inline void GetForwardMsgResp::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::cqhttp::GetForwardMsgResp_Messages* GetForwardMsgResp::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetForwardMsgResp.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetForwardMsgResp_Messages >*
GetForwardMsgResp::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetForwardMsgResp.messages)
  return &_impl_.messages_;
}
inline const ::cqhttp::GetForwardMsgResp_Messages& GetForwardMsgResp::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::cqhttp::GetForwardMsgResp_Messages& GetForwardMsgResp::messages(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetForwardMsgResp.messages)
  return _internal_messages(index);
}
inline ::cqhttp::GetForwardMsgResp_Messages* GetForwardMsgResp::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::cqhttp::GetForwardMsgResp_Messages* GetForwardMsgResp::add_messages() {
  ::cqhttp::GetForwardMsgResp_Messages* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:cqhttp.GetForwardMsgResp.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetForwardMsgResp_Messages >&
GetForwardMsgResp::messages() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetForwardMsgResp.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// GetImage_Params

// string file = 1;
inline void GetImage_Params::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& GetImage_Params::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImage.Params.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImage_Params::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetImage.Params.file)
}
inline std::string* GetImage_Params::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetImage.Params.file)
  return _s;
}
inline const std::string& GetImage_Params::_internal_file() const {
  return _impl_.file_.Get();
}
inline void GetImage_Params::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImage_Params::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImage_Params::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.GetImage.Params.file)
  return _impl_.file_.Release();
}
inline void GetImage_Params::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetImage.Params.file)
}

// -------------------------------------------------------------------

// GetImage

// string action = 1;
inline void GetImage::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetImage::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImage.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImage::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetImage.action)
}
inline std::string* GetImage::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetImage.action)
  return _s;
}
inline const std::string& GetImage::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetImage::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImage::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImage::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetImage.action)
  return _impl_.action_.Release();
}
inline void GetImage::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetImage.action)
}

// .cqhttp.GetImage.Params params = 2;
inline bool GetImage::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetImage::has_params() const {
  return _internal_has_params();
}
inline void GetImage::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetImage_Params& GetImage::_internal_params() const {
  const ::cqhttp::GetImage_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetImage_Params&>(
      ::cqhttp::_GetImage_Params_default_instance_);
}
inline const ::cqhttp::GetImage_Params& GetImage::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImage.params)
  return _internal_params();
}
inline void GetImage::unsafe_arena_set_allocated_params(
    ::cqhttp::GetImage_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetImage.params)
}
inline ::cqhttp::GetImage_Params* GetImage::release_params() {
  
  ::cqhttp::GetImage_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetImage_Params* GetImage::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetImage.params)
  
  ::cqhttp::GetImage_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetImage_Params* GetImage::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetImage_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetImage_Params* GetImage::mutable_params() {
  ::cqhttp::GetImage_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetImage.params)
  return _msg;
}
inline void GetImage::set_allocated_params(::cqhttp::GetImage_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetImage.params)
}

// string echo = 3;
inline void GetImage::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetImage::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImage.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImage::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetImage.echo)
}
inline std::string* GetImage::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetImage.echo)
  return _s;
}
inline const std::string& GetImage::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetImage::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImage::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImage::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetImage.echo)
  return _impl_.echo_.Release();
}
inline void GetImage::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetImage.echo)
}

// -------------------------------------------------------------------

// GetImageResp

// int32 size = 1;
inline void GetImageResp::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t GetImageResp::_internal_size() const {
  return _impl_.size_;
}
inline int32_t GetImageResp::size() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImageResp.size)
  return _internal_size();
}
inline void GetImageResp::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void GetImageResp::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetImageResp.size)
}

// string filename = 2;
inline void GetImageResp::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& GetImageResp::filename() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImageResp.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageResp::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetImageResp.filename)
}
inline std::string* GetImageResp::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetImageResp.filename)
  return _s;
}
inline const std::string& GetImageResp::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void GetImageResp::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImageResp::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImageResp::release_filename() {
  // @@protoc_insertion_point(field_release:cqhttp.GetImageResp.filename)
  return _impl_.filename_.Release();
}
inline void GetImageResp::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetImageResp.filename)
}

// string url = 3;
inline void GetImageResp::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& GetImageResp::url() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetImageResp.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageResp::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetImageResp.url)
}
inline std::string* GetImageResp::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetImageResp.url)
  return _s;
}
inline const std::string& GetImageResp::_internal_url() const {
  return _impl_.url_.Get();
}
inline void GetImageResp::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImageResp::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImageResp::release_url() {
  // @@protoc_insertion_point(field_release:cqhttp.GetImageResp.url)
  return _impl_.url_.Release();
}
inline void GetImageResp::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetImageResp.url)
}

// -------------------------------------------------------------------

// MarkMsgAsRead_Params

// int32 message_id = 1;
inline void MarkMsgAsRead_Params::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t MarkMsgAsRead_Params::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t MarkMsgAsRead_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.MarkMsgAsRead.Params.message_id)
  return _internal_message_id();
}
inline void MarkMsgAsRead_Params::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void MarkMsgAsRead_Params::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.MarkMsgAsRead.Params.message_id)
}

// -------------------------------------------------------------------

// MarkMsgAsRead

// string action = 1;
inline void MarkMsgAsRead::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& MarkMsgAsRead::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.MarkMsgAsRead.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarkMsgAsRead::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.MarkMsgAsRead.action)
}
inline std::string* MarkMsgAsRead::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.MarkMsgAsRead.action)
  return _s;
}
inline const std::string& MarkMsgAsRead::_internal_action() const {
  return _impl_.action_.Get();
}
inline void MarkMsgAsRead::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* MarkMsgAsRead::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* MarkMsgAsRead::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.MarkMsgAsRead.action)
  return _impl_.action_.Release();
}
inline void MarkMsgAsRead::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.MarkMsgAsRead.action)
}

// .cqhttp.MarkMsgAsRead.Params params = 2;
inline bool MarkMsgAsRead::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool MarkMsgAsRead::has_params() const {
  return _internal_has_params();
}
inline void MarkMsgAsRead::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::MarkMsgAsRead_Params& MarkMsgAsRead::_internal_params() const {
  const ::cqhttp::MarkMsgAsRead_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::MarkMsgAsRead_Params&>(
      ::cqhttp::_MarkMsgAsRead_Params_default_instance_);
}
inline const ::cqhttp::MarkMsgAsRead_Params& MarkMsgAsRead::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.MarkMsgAsRead.params)
  return _internal_params();
}
inline void MarkMsgAsRead::unsafe_arena_set_allocated_params(
    ::cqhttp::MarkMsgAsRead_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.MarkMsgAsRead.params)
}
inline ::cqhttp::MarkMsgAsRead_Params* MarkMsgAsRead::release_params() {
  
  ::cqhttp::MarkMsgAsRead_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::MarkMsgAsRead_Params* MarkMsgAsRead::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.MarkMsgAsRead.params)
  
  ::cqhttp::MarkMsgAsRead_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::MarkMsgAsRead_Params* MarkMsgAsRead::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::MarkMsgAsRead_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::MarkMsgAsRead_Params* MarkMsgAsRead::mutable_params() {
  ::cqhttp::MarkMsgAsRead_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.MarkMsgAsRead.params)
  return _msg;
}
inline void MarkMsgAsRead::set_allocated_params(::cqhttp::MarkMsgAsRead_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.MarkMsgAsRead.params)
}

// -------------------------------------------------------------------

// SetGroupKick_Params

// int64 message_id = 1;
inline void SetGroupKick_Params::clear_message_id() {
  _impl_.message_id_ = int64_t{0};
}
inline int64_t SetGroupKick_Params::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int64_t SetGroupKick_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupKick.Params.message_id)
  return _internal_message_id();
}
inline void SetGroupKick_Params::_internal_set_message_id(int64_t value) {
  
  _impl_.message_id_ = value;
}
inline void SetGroupKick_Params::set_message_id(int64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupKick.Params.message_id)
}

// int64 user_id = 2;
inline void SetGroupKick_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SetGroupKick_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SetGroupKick_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupKick.Params.user_id)
  return _internal_user_id();
}
inline void SetGroupKick_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SetGroupKick_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupKick.Params.user_id)
}

// bool reject_add_request = 3;
inline void SetGroupKick_Params::clear_reject_add_request() {
  _impl_.reject_add_request_ = false;
}
inline bool SetGroupKick_Params::_internal_reject_add_request() const {
  return _impl_.reject_add_request_;
}
inline bool SetGroupKick_Params::reject_add_request() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupKick.Params.reject_add_request)
  return _internal_reject_add_request();
}
inline void SetGroupKick_Params::_internal_set_reject_add_request(bool value) {
  
  _impl_.reject_add_request_ = value;
}
inline void SetGroupKick_Params::set_reject_add_request(bool value) {
  _internal_set_reject_add_request(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupKick.Params.reject_add_request)
}

// -------------------------------------------------------------------

// SetGroupKick

// string action = 1;
inline void SetGroupKick::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupKick::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupKick.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupKick::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupKick.action)
}
inline std::string* SetGroupKick::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupKick.action)
  return _s;
}
inline const std::string& SetGroupKick::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupKick::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupKick::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupKick::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupKick.action)
  return _impl_.action_.Release();
}
inline void SetGroupKick::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupKick.action)
}

// .cqhttp.SetGroupKick.Params params = 2;
inline bool SetGroupKick::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupKick::has_params() const {
  return _internal_has_params();
}
inline void SetGroupKick::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupKick_Params& SetGroupKick::_internal_params() const {
  const ::cqhttp::SetGroupKick_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupKick_Params&>(
      ::cqhttp::_SetGroupKick_Params_default_instance_);
}
inline const ::cqhttp::SetGroupKick_Params& SetGroupKick::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupKick.params)
  return _internal_params();
}
inline void SetGroupKick::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupKick_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupKick.params)
}
inline ::cqhttp::SetGroupKick_Params* SetGroupKick::release_params() {
  
  ::cqhttp::SetGroupKick_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupKick_Params* SetGroupKick::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupKick.params)
  
  ::cqhttp::SetGroupKick_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupKick_Params* SetGroupKick::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupKick_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupKick_Params* SetGroupKick::mutable_params() {
  ::cqhttp::SetGroupKick_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupKick.params)
  return _msg;
}
inline void SetGroupKick::set_allocated_params(::cqhttp::SetGroupKick_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupKick.params)
}

// -------------------------------------------------------------------

// SetGroupBan_Params

// int64 group_id = 1;
inline void SetGroupBan_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupBan_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupBan_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupBan.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupBan_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupBan_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupBan.Params.group_id)
}

// int64 user_id = 2;
inline void SetGroupBan_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SetGroupBan_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SetGroupBan_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupBan.Params.user_id)
  return _internal_user_id();
}
inline void SetGroupBan_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SetGroupBan_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupBan.Params.user_id)
}

// int32 duration = 3;
inline void SetGroupBan_Params::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t SetGroupBan_Params::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t SetGroupBan_Params::duration() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupBan.Params.duration)
  return _internal_duration();
}
inline void SetGroupBan_Params::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void SetGroupBan_Params::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupBan.Params.duration)
}

// -------------------------------------------------------------------

// SetGroupBan

// string action = 1;
inline void SetGroupBan::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupBan::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupBan.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupBan::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupBan.action)
}
inline std::string* SetGroupBan::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupBan.action)
  return _s;
}
inline const std::string& SetGroupBan::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupBan::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupBan::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupBan::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupBan.action)
  return _impl_.action_.Release();
}
inline void SetGroupBan::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupBan.action)
}

// .cqhttp.SetGroupBan.Params params = 2;
inline bool SetGroupBan::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupBan::has_params() const {
  return _internal_has_params();
}
inline void SetGroupBan::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupBan_Params& SetGroupBan::_internal_params() const {
  const ::cqhttp::SetGroupBan_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupBan_Params&>(
      ::cqhttp::_SetGroupBan_Params_default_instance_);
}
inline const ::cqhttp::SetGroupBan_Params& SetGroupBan::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupBan.params)
  return _internal_params();
}
inline void SetGroupBan::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupBan_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupBan.params)
}
inline ::cqhttp::SetGroupBan_Params* SetGroupBan::release_params() {
  
  ::cqhttp::SetGroupBan_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupBan_Params* SetGroupBan::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupBan.params)
  
  ::cqhttp::SetGroupBan_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupBan_Params* SetGroupBan::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupBan_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupBan_Params* SetGroupBan::mutable_params() {
  ::cqhttp::SetGroupBan_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupBan.params)
  return _msg;
}
inline void SetGroupBan::set_allocated_params(::cqhttp::SetGroupBan_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupBan.params)
}

// -------------------------------------------------------------------

// SetGroupAnonymousBan_Params

// int64 group_id = 1;
inline void SetGroupAnonymousBan_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupAnonymousBan_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupAnonymousBan_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymousBan.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupAnonymousBan_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupAnonymousBan_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymousBan.Params.group_id)
}

// .cqhttp.Anonymous anonymous = 2;
inline bool SetGroupAnonymousBan_Params::_internal_has_anonymous() const {
  return this != internal_default_instance() && _impl_.anonymous_ != nullptr;
}
inline bool SetGroupAnonymousBan_Params::has_anonymous() const {
  return _internal_has_anonymous();
}
inline const ::cqhttp::Anonymous& SetGroupAnonymousBan_Params::_internal_anonymous() const {
  const ::cqhttp::Anonymous* p = _impl_.anonymous_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::Anonymous&>(
      ::cqhttp::_Anonymous_default_instance_);
}
inline const ::cqhttp::Anonymous& SetGroupAnonymousBan_Params::anonymous() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymousBan.Params.anonymous)
  return _internal_anonymous();
}
inline void SetGroupAnonymousBan_Params::unsafe_arena_set_allocated_anonymous(
    ::cqhttp::Anonymous* anonymous) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymous_);
  }
  _impl_.anonymous_ = anonymous;
  if (anonymous) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupAnonymousBan.Params.anonymous)
}
inline ::cqhttp::Anonymous* SetGroupAnonymousBan_Params::release_anonymous() {
  
  ::cqhttp::Anonymous* temp = _impl_.anonymous_;
  _impl_.anonymous_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::Anonymous* SetGroupAnonymousBan_Params::unsafe_arena_release_anonymous() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAnonymousBan.Params.anonymous)
  
  ::cqhttp::Anonymous* temp = _impl_.anonymous_;
  _impl_.anonymous_ = nullptr;
  return temp;
}
inline ::cqhttp::Anonymous* SetGroupAnonymousBan_Params::_internal_mutable_anonymous() {
  
  if (_impl_.anonymous_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::Anonymous>(GetArenaForAllocation());
    _impl_.anonymous_ = p;
  }
  return _impl_.anonymous_;
}
inline ::cqhttp::Anonymous* SetGroupAnonymousBan_Params::mutable_anonymous() {
  ::cqhttp::Anonymous* _msg = _internal_mutable_anonymous();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAnonymousBan.Params.anonymous)
  return _msg;
}
inline void SetGroupAnonymousBan_Params::set_allocated_anonymous(::cqhttp::Anonymous* anonymous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymous_);
  }
  if (anonymous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anonymous));
    if (message_arena != submessage_arena) {
      anonymous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymous, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anonymous_ = anonymous;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAnonymousBan.Params.anonymous)
}

// string anonymous_flag = 3;
inline void SetGroupAnonymousBan_Params::clear_anonymous_flag() {
  _impl_.anonymous_flag_.ClearToEmpty();
}
inline const std::string& SetGroupAnonymousBan_Params::anonymous_flag() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymousBan.Params.anonymous_flag)
  return _internal_anonymous_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAnonymousBan_Params::set_anonymous_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.anonymous_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymousBan.Params.anonymous_flag)
}
inline std::string* SetGroupAnonymousBan_Params::mutable_anonymous_flag() {
  std::string* _s = _internal_mutable_anonymous_flag();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAnonymousBan.Params.anonymous_flag)
  return _s;
}
inline const std::string& SetGroupAnonymousBan_Params::_internal_anonymous_flag() const {
  return _impl_.anonymous_flag_.Get();
}
inline void SetGroupAnonymousBan_Params::_internal_set_anonymous_flag(const std::string& value) {
  
  _impl_.anonymous_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAnonymousBan_Params::_internal_mutable_anonymous_flag() {
  
  return _impl_.anonymous_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAnonymousBan_Params::release_anonymous_flag() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAnonymousBan.Params.anonymous_flag)
  return _impl_.anonymous_flag_.Release();
}
inline void SetGroupAnonymousBan_Params::set_allocated_anonymous_flag(std::string* anonymous_flag) {
  if (anonymous_flag != nullptr) {
    
  } else {
    
  }
  _impl_.anonymous_flag_.SetAllocated(anonymous_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anonymous_flag_.IsDefault()) {
    _impl_.anonymous_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAnonymousBan.Params.anonymous_flag)
}

// int32 duration = 4;
inline void SetGroupAnonymousBan_Params::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t SetGroupAnonymousBan_Params::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t SetGroupAnonymousBan_Params::duration() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymousBan.Params.duration)
  return _internal_duration();
}
inline void SetGroupAnonymousBan_Params::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void SetGroupAnonymousBan_Params::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymousBan.Params.duration)
}

// -------------------------------------------------------------------

// SetGroupAnonymousBan

// string action = 1;
inline void SetGroupAnonymousBan::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupAnonymousBan::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymousBan.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAnonymousBan::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymousBan.action)
}
inline std::string* SetGroupAnonymousBan::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAnonymousBan.action)
  return _s;
}
inline const std::string& SetGroupAnonymousBan::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupAnonymousBan::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAnonymousBan::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAnonymousBan::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAnonymousBan.action)
  return _impl_.action_.Release();
}
inline void SetGroupAnonymousBan::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAnonymousBan.action)
}

// .cqhttp.SetGroupAnonymousBan.Params params = 2;
inline bool SetGroupAnonymousBan::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupAnonymousBan::has_params() const {
  return _internal_has_params();
}
inline void SetGroupAnonymousBan::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupAnonymousBan_Params& SetGroupAnonymousBan::_internal_params() const {
  const ::cqhttp::SetGroupAnonymousBan_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupAnonymousBan_Params&>(
      ::cqhttp::_SetGroupAnonymousBan_Params_default_instance_);
}
inline const ::cqhttp::SetGroupAnonymousBan_Params& SetGroupAnonymousBan::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymousBan.params)
  return _internal_params();
}
inline void SetGroupAnonymousBan::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupAnonymousBan_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupAnonymousBan.params)
}
inline ::cqhttp::SetGroupAnonymousBan_Params* SetGroupAnonymousBan::release_params() {
  
  ::cqhttp::SetGroupAnonymousBan_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupAnonymousBan_Params* SetGroupAnonymousBan::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAnonymousBan.params)
  
  ::cqhttp::SetGroupAnonymousBan_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupAnonymousBan_Params* SetGroupAnonymousBan::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupAnonymousBan_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupAnonymousBan_Params* SetGroupAnonymousBan::mutable_params() {
  ::cqhttp::SetGroupAnonymousBan_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAnonymousBan.params)
  return _msg;
}
inline void SetGroupAnonymousBan::set_allocated_params(::cqhttp::SetGroupAnonymousBan_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAnonymousBan.params)
}

// -------------------------------------------------------------------

// SetGroupWholeBan_Params

// int64 group_id = 1;
inline void SetGroupWholeBan_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupWholeBan_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupWholeBan_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupWholeBan.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupWholeBan_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupWholeBan_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupWholeBan.Params.group_id)
}

// bool enable = 2;
inline void SetGroupWholeBan_Params::clear_enable() {
  _impl_.enable_ = false;
}
inline bool SetGroupWholeBan_Params::_internal_enable() const {
  return _impl_.enable_;
}
inline bool SetGroupWholeBan_Params::enable() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupWholeBan.Params.enable)
  return _internal_enable();
}
inline void SetGroupWholeBan_Params::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void SetGroupWholeBan_Params::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupWholeBan.Params.enable)
}

// -------------------------------------------------------------------

// SetGroupWholeBan

// string action = 1;
inline void SetGroupWholeBan::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupWholeBan::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupWholeBan.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupWholeBan::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupWholeBan.action)
}
inline std::string* SetGroupWholeBan::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupWholeBan.action)
  return _s;
}
inline const std::string& SetGroupWholeBan::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupWholeBan::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupWholeBan::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupWholeBan::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupWholeBan.action)
  return _impl_.action_.Release();
}
inline void SetGroupWholeBan::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupWholeBan.action)
}

// .cqhttp.SetGroupWholeBan.Params params = 2;
inline bool SetGroupWholeBan::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupWholeBan::has_params() const {
  return _internal_has_params();
}
inline void SetGroupWholeBan::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupWholeBan_Params& SetGroupWholeBan::_internal_params() const {
  const ::cqhttp::SetGroupWholeBan_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupWholeBan_Params&>(
      ::cqhttp::_SetGroupWholeBan_Params_default_instance_);
}
inline const ::cqhttp::SetGroupWholeBan_Params& SetGroupWholeBan::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupWholeBan.params)
  return _internal_params();
}
inline void SetGroupWholeBan::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupWholeBan_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupWholeBan.params)
}
inline ::cqhttp::SetGroupWholeBan_Params* SetGroupWholeBan::release_params() {
  
  ::cqhttp::SetGroupWholeBan_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupWholeBan_Params* SetGroupWholeBan::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupWholeBan.params)
  
  ::cqhttp::SetGroupWholeBan_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupWholeBan_Params* SetGroupWholeBan::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupWholeBan_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupWholeBan_Params* SetGroupWholeBan::mutable_params() {
  ::cqhttp::SetGroupWholeBan_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupWholeBan.params)
  return _msg;
}
inline void SetGroupWholeBan::set_allocated_params(::cqhttp::SetGroupWholeBan_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupWholeBan.params)
}

// -------------------------------------------------------------------

// SetGroupAdmin_Params

// int64 group_id = 1;
inline void SetGroupAdmin_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupAdmin_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupAdmin_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAdmin.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupAdmin_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupAdmin_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAdmin.Params.group_id)
}

// int64 user_id = 2;
inline void SetGroupAdmin_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SetGroupAdmin_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SetGroupAdmin_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAdmin.Params.user_id)
  return _internal_user_id();
}
inline void SetGroupAdmin_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SetGroupAdmin_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAdmin.Params.user_id)
}

// bool enable = 3;
inline void SetGroupAdmin_Params::clear_enable() {
  _impl_.enable_ = false;
}
inline bool SetGroupAdmin_Params::_internal_enable() const {
  return _impl_.enable_;
}
inline bool SetGroupAdmin_Params::enable() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAdmin.Params.enable)
  return _internal_enable();
}
inline void SetGroupAdmin_Params::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void SetGroupAdmin_Params::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAdmin.Params.enable)
}

// -------------------------------------------------------------------

// SetGroupAdmin

// string action = 1;
inline void SetGroupAdmin::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupAdmin::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAdmin.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAdmin::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAdmin.action)
}
inline std::string* SetGroupAdmin::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAdmin.action)
  return _s;
}
inline const std::string& SetGroupAdmin::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupAdmin::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAdmin::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAdmin::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAdmin.action)
  return _impl_.action_.Release();
}
inline void SetGroupAdmin::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAdmin.action)
}

// .cqhttp.SetGroupAdmin.Params params = 2;
inline bool SetGroupAdmin::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupAdmin::has_params() const {
  return _internal_has_params();
}
inline void SetGroupAdmin::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupAdmin_Params& SetGroupAdmin::_internal_params() const {
  const ::cqhttp::SetGroupAdmin_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupAdmin_Params&>(
      ::cqhttp::_SetGroupAdmin_Params_default_instance_);
}
inline const ::cqhttp::SetGroupAdmin_Params& SetGroupAdmin::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAdmin.params)
  return _internal_params();
}
inline void SetGroupAdmin::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupAdmin_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupAdmin.params)
}
inline ::cqhttp::SetGroupAdmin_Params* SetGroupAdmin::release_params() {
  
  ::cqhttp::SetGroupAdmin_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupAdmin_Params* SetGroupAdmin::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAdmin.params)
  
  ::cqhttp::SetGroupAdmin_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupAdmin_Params* SetGroupAdmin::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupAdmin_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupAdmin_Params* SetGroupAdmin::mutable_params() {
  ::cqhttp::SetGroupAdmin_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAdmin.params)
  return _msg;
}
inline void SetGroupAdmin::set_allocated_params(::cqhttp::SetGroupAdmin_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAdmin.params)
}

// -------------------------------------------------------------------

// SetGroupAnonymous_Params

// int64 group_id = 1;
inline void SetGroupAnonymous_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupAnonymous_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupAnonymous_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymous.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupAnonymous_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupAnonymous_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymous.Params.group_id)
}

// bool enable = 2;
inline void SetGroupAnonymous_Params::clear_enable() {
  _impl_.enable_ = false;
}
inline bool SetGroupAnonymous_Params::_internal_enable() const {
  return _impl_.enable_;
}
inline bool SetGroupAnonymous_Params::enable() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymous.Params.enable)
  return _internal_enable();
}
inline void SetGroupAnonymous_Params::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void SetGroupAnonymous_Params::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymous.Params.enable)
}

// -------------------------------------------------------------------

// SetGroupAnonymous

// string action = 1;
inline void SetGroupAnonymous::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupAnonymous::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymous.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAnonymous::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAnonymous.action)
}
inline std::string* SetGroupAnonymous::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAnonymous.action)
  return _s;
}
inline const std::string& SetGroupAnonymous::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupAnonymous::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAnonymous::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAnonymous::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAnonymous.action)
  return _impl_.action_.Release();
}
inline void SetGroupAnonymous::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAnonymous.action)
}

// .cqhttp.SetGroupAnonymous.Params params = 2;
inline bool SetGroupAnonymous::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupAnonymous::has_params() const {
  return _internal_has_params();
}
inline void SetGroupAnonymous::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupAnonymous_Params& SetGroupAnonymous::_internal_params() const {
  const ::cqhttp::SetGroupAnonymous_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupAnonymous_Params&>(
      ::cqhttp::_SetGroupAnonymous_Params_default_instance_);
}
inline const ::cqhttp::SetGroupAnonymous_Params& SetGroupAnonymous::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAnonymous.params)
  return _internal_params();
}
inline void SetGroupAnonymous::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupAnonymous_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupAnonymous.params)
}
inline ::cqhttp::SetGroupAnonymous_Params* SetGroupAnonymous::release_params() {
  
  ::cqhttp::SetGroupAnonymous_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupAnonymous_Params* SetGroupAnonymous::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAnonymous.params)
  
  ::cqhttp::SetGroupAnonymous_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupAnonymous_Params* SetGroupAnonymous::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupAnonymous_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupAnonymous_Params* SetGroupAnonymous::mutable_params() {
  ::cqhttp::SetGroupAnonymous_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAnonymous.params)
  return _msg;
}
inline void SetGroupAnonymous::set_allocated_params(::cqhttp::SetGroupAnonymous_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAnonymous.params)
}

// -------------------------------------------------------------------

// SetGroupCard_Params

// int64 group_id = 1;
inline void SetGroupCard_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupCard_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupCard_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupCard.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupCard_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupCard_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupCard.Params.group_id)
}

// int64 user_id = 2;
inline void SetGroupCard_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SetGroupCard_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SetGroupCard_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupCard.Params.user_id)
  return _internal_user_id();
}
inline void SetGroupCard_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SetGroupCard_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupCard.Params.user_id)
}

// string card = 3;
inline void SetGroupCard_Params::clear_card() {
  _impl_.card_.ClearToEmpty();
}
inline const std::string& SetGroupCard_Params::card() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupCard.Params.card)
  return _internal_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupCard_Params::set_card(ArgT0&& arg0, ArgT... args) {
 
 _impl_.card_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupCard.Params.card)
}
inline std::string* SetGroupCard_Params::mutable_card() {
  std::string* _s = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupCard.Params.card)
  return _s;
}
inline const std::string& SetGroupCard_Params::_internal_card() const {
  return _impl_.card_.Get();
}
inline void SetGroupCard_Params::_internal_set_card(const std::string& value) {
  
  _impl_.card_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupCard_Params::_internal_mutable_card() {
  
  return _impl_.card_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupCard_Params::release_card() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupCard.Params.card)
  return _impl_.card_.Release();
}
inline void SetGroupCard_Params::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  _impl_.card_.SetAllocated(card, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.card_.IsDefault()) {
    _impl_.card_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupCard.Params.card)
}

// -------------------------------------------------------------------

// SetGroupCard

// string action = 1;
inline void SetGroupCard::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupCard::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupCard.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupCard::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupCard.action)
}
inline std::string* SetGroupCard::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupCard.action)
  return _s;
}
inline const std::string& SetGroupCard::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupCard::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupCard::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupCard::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupCard.action)
  return _impl_.action_.Release();
}
inline void SetGroupCard::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupCard.action)
}

// .cqhttp.SetGroupCard.Params params = 2;
inline bool SetGroupCard::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupCard::has_params() const {
  return _internal_has_params();
}
inline void SetGroupCard::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupCard_Params& SetGroupCard::_internal_params() const {
  const ::cqhttp::SetGroupCard_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupCard_Params&>(
      ::cqhttp::_SetGroupCard_Params_default_instance_);
}
inline const ::cqhttp::SetGroupCard_Params& SetGroupCard::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupCard.params)
  return _internal_params();
}
inline void SetGroupCard::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupCard_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupCard.params)
}
inline ::cqhttp::SetGroupCard_Params* SetGroupCard::release_params() {
  
  ::cqhttp::SetGroupCard_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupCard_Params* SetGroupCard::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupCard.params)
  
  ::cqhttp::SetGroupCard_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupCard_Params* SetGroupCard::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupCard_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupCard_Params* SetGroupCard::mutable_params() {
  ::cqhttp::SetGroupCard_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupCard.params)
  return _msg;
}
inline void SetGroupCard::set_allocated_params(::cqhttp::SetGroupCard_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupCard.params)
}

// -------------------------------------------------------------------

// SetGroupName_Params

// int64 group_id = 1;
inline void SetGroupName_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupName_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupName_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupName.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupName_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupName_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupName.Params.group_id)
}

// string group_name = 2;
inline void SetGroupName_Params::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& SetGroupName_Params::group_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupName.Params.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupName_Params::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupName.Params.group_name)
}
inline std::string* SetGroupName_Params::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupName.Params.group_name)
  return _s;
}
inline const std::string& SetGroupName_Params::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void SetGroupName_Params::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupName_Params::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupName_Params::release_group_name() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupName.Params.group_name)
  return _impl_.group_name_.Release();
}
inline void SetGroupName_Params::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupName.Params.group_name)
}

// -------------------------------------------------------------------

// SetGroupName

// string action = 1;
inline void SetGroupName::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupName::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupName.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupName::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupName.action)
}
inline std::string* SetGroupName::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupName.action)
  return _s;
}
inline const std::string& SetGroupName::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupName::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupName::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupName::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupName.action)
  return _impl_.action_.Release();
}
inline void SetGroupName::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupName.action)
}

// .cqhttp.SetGroupName.Params params = 2;
inline bool SetGroupName::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupName::has_params() const {
  return _internal_has_params();
}
inline void SetGroupName::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupName_Params& SetGroupName::_internal_params() const {
  const ::cqhttp::SetGroupName_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupName_Params&>(
      ::cqhttp::_SetGroupName_Params_default_instance_);
}
inline const ::cqhttp::SetGroupName_Params& SetGroupName::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupName.params)
  return _internal_params();
}
inline void SetGroupName::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupName_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupName.params)
}
inline ::cqhttp::SetGroupName_Params* SetGroupName::release_params() {
  
  ::cqhttp::SetGroupName_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupName_Params* SetGroupName::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupName.params)
  
  ::cqhttp::SetGroupName_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupName_Params* SetGroupName::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupName_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupName_Params* SetGroupName::mutable_params() {
  ::cqhttp::SetGroupName_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupName.params)
  return _msg;
}
inline void SetGroupName::set_allocated_params(::cqhttp::SetGroupName_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupName.params)
}

// -------------------------------------------------------------------

// SetGroupLeave_Params

// int64 group_id = 1;
inline void SetGroupLeave_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupLeave_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupLeave_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupLeave.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupLeave_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupLeave_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupLeave.Params.group_id)
}

// bool is_dismiss = 2;
inline void SetGroupLeave_Params::clear_is_dismiss() {
  _impl_.is_dismiss_ = false;
}
inline bool SetGroupLeave_Params::_internal_is_dismiss() const {
  return _impl_.is_dismiss_;
}
inline bool SetGroupLeave_Params::is_dismiss() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupLeave.Params.is_dismiss)
  return _internal_is_dismiss();
}
inline void SetGroupLeave_Params::_internal_set_is_dismiss(bool value) {
  
  _impl_.is_dismiss_ = value;
}
inline void SetGroupLeave_Params::set_is_dismiss(bool value) {
  _internal_set_is_dismiss(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupLeave.Params.is_dismiss)
}

// -------------------------------------------------------------------

// SetGroupLeave

// string action = 1;
inline void SetGroupLeave::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupLeave::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupLeave.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupLeave::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupLeave.action)
}
inline std::string* SetGroupLeave::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupLeave.action)
  return _s;
}
inline const std::string& SetGroupLeave::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupLeave::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupLeave::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupLeave::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupLeave.action)
  return _impl_.action_.Release();
}
inline void SetGroupLeave::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupLeave.action)
}

// .cqhttp.SetGroupLeave.Params params = 2;
inline bool SetGroupLeave::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupLeave::has_params() const {
  return _internal_has_params();
}
inline void SetGroupLeave::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupLeave_Params& SetGroupLeave::_internal_params() const {
  const ::cqhttp::SetGroupLeave_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupLeave_Params&>(
      ::cqhttp::_SetGroupLeave_Params_default_instance_);
}
inline const ::cqhttp::SetGroupLeave_Params& SetGroupLeave::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupLeave.params)
  return _internal_params();
}
inline void SetGroupLeave::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupLeave_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupLeave.params)
}
inline ::cqhttp::SetGroupLeave_Params* SetGroupLeave::release_params() {
  
  ::cqhttp::SetGroupLeave_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupLeave_Params* SetGroupLeave::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupLeave.params)
  
  ::cqhttp::SetGroupLeave_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupLeave_Params* SetGroupLeave::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupLeave_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupLeave_Params* SetGroupLeave::mutable_params() {
  ::cqhttp::SetGroupLeave_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupLeave.params)
  return _msg;
}
inline void SetGroupLeave::set_allocated_params(::cqhttp::SetGroupLeave_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupLeave.params)
}

// -------------------------------------------------------------------

// SetGroupSpecialTitle_Params

// int64 group_id = 1;
inline void SetGroupSpecialTitle_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupSpecialTitle_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupSpecialTitle_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupSpecialTitle.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupSpecialTitle_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupSpecialTitle_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupSpecialTitle.Params.group_id)
}

// int64 user_id = 2;
inline void SetGroupSpecialTitle_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SetGroupSpecialTitle_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SetGroupSpecialTitle_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupSpecialTitle.Params.user_id)
  return _internal_user_id();
}
inline void SetGroupSpecialTitle_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SetGroupSpecialTitle_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupSpecialTitle.Params.user_id)
}

// string special_title = 3;
inline void SetGroupSpecialTitle_Params::clear_special_title() {
  _impl_.special_title_.ClearToEmpty();
}
inline const std::string& SetGroupSpecialTitle_Params::special_title() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupSpecialTitle.Params.special_title)
  return _internal_special_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupSpecialTitle_Params::set_special_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.special_title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupSpecialTitle.Params.special_title)
}
inline std::string* SetGroupSpecialTitle_Params::mutable_special_title() {
  std::string* _s = _internal_mutable_special_title();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupSpecialTitle.Params.special_title)
  return _s;
}
inline const std::string& SetGroupSpecialTitle_Params::_internal_special_title() const {
  return _impl_.special_title_.Get();
}
inline void SetGroupSpecialTitle_Params::_internal_set_special_title(const std::string& value) {
  
  _impl_.special_title_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupSpecialTitle_Params::_internal_mutable_special_title() {
  
  return _impl_.special_title_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupSpecialTitle_Params::release_special_title() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupSpecialTitle.Params.special_title)
  return _impl_.special_title_.Release();
}
inline void SetGroupSpecialTitle_Params::set_allocated_special_title(std::string* special_title) {
  if (special_title != nullptr) {
    
  } else {
    
  }
  _impl_.special_title_.SetAllocated(special_title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.special_title_.IsDefault()) {
    _impl_.special_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupSpecialTitle.Params.special_title)
}

// int32 duration = 4;
inline void SetGroupSpecialTitle_Params::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t SetGroupSpecialTitle_Params::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t SetGroupSpecialTitle_Params::duration() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupSpecialTitle.Params.duration)
  return _internal_duration();
}
inline void SetGroupSpecialTitle_Params::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void SetGroupSpecialTitle_Params::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupSpecialTitle.Params.duration)
}

// -------------------------------------------------------------------

// SetGroupSpecialTitle

// string action = 1;
inline void SetGroupSpecialTitle::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupSpecialTitle::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupSpecialTitle.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupSpecialTitle::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupSpecialTitle.action)
}
inline std::string* SetGroupSpecialTitle::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupSpecialTitle.action)
  return _s;
}
inline const std::string& SetGroupSpecialTitle::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupSpecialTitle::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupSpecialTitle::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupSpecialTitle::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupSpecialTitle.action)
  return _impl_.action_.Release();
}
inline void SetGroupSpecialTitle::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupSpecialTitle.action)
}

// .cqhttp.SetGroupSpecialTitle.Params params = 2;
inline bool SetGroupSpecialTitle::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupSpecialTitle::has_params() const {
  return _internal_has_params();
}
inline void SetGroupSpecialTitle::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupSpecialTitle_Params& SetGroupSpecialTitle::_internal_params() const {
  const ::cqhttp::SetGroupSpecialTitle_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupSpecialTitle_Params&>(
      ::cqhttp::_SetGroupSpecialTitle_Params_default_instance_);
}
inline const ::cqhttp::SetGroupSpecialTitle_Params& SetGroupSpecialTitle::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupSpecialTitle.params)
  return _internal_params();
}
inline void SetGroupSpecialTitle::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupSpecialTitle_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupSpecialTitle.params)
}
inline ::cqhttp::SetGroupSpecialTitle_Params* SetGroupSpecialTitle::release_params() {
  
  ::cqhttp::SetGroupSpecialTitle_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupSpecialTitle_Params* SetGroupSpecialTitle::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupSpecialTitle.params)
  
  ::cqhttp::SetGroupSpecialTitle_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupSpecialTitle_Params* SetGroupSpecialTitle::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupSpecialTitle_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupSpecialTitle_Params* SetGroupSpecialTitle::mutable_params() {
  ::cqhttp::SetGroupSpecialTitle_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupSpecialTitle.params)
  return _msg;
}
inline void SetGroupSpecialTitle::set_allocated_params(::cqhttp::SetGroupSpecialTitle_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupSpecialTitle.params)
}

// -------------------------------------------------------------------

// SendGroupSign_Params

// int64 group_id = 1;
inline void SendGroupSign_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SendGroupSign_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SendGroupSign_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupSign.Params.group_id)
  return _internal_group_id();
}
inline void SendGroupSign_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SendGroupSign_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupSign.Params.group_id)
}

// -------------------------------------------------------------------

// SendGroupSign

// string action = 1;
inline void SendGroupSign::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendGroupSign::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupSign.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupSign::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupSign.action)
}
inline std::string* SendGroupSign::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupSign.action)
  return _s;
}
inline const std::string& SendGroupSign::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendGroupSign::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupSign::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupSign::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupSign.action)
  return _impl_.action_.Release();
}
inline void SendGroupSign::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupSign.action)
}

// .cqhttp.SendGroupSign.Params params = 2;
inline bool SendGroupSign::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendGroupSign::has_params() const {
  return _internal_has_params();
}
inline void SendGroupSign::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendGroupSign_Params& SendGroupSign::_internal_params() const {
  const ::cqhttp::SendGroupSign_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendGroupSign_Params&>(
      ::cqhttp::_SendGroupSign_Params_default_instance_);
}
inline const ::cqhttp::SendGroupSign_Params& SendGroupSign::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupSign.params)
  return _internal_params();
}
inline void SendGroupSign::unsafe_arena_set_allocated_params(
    ::cqhttp::SendGroupSign_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendGroupSign.params)
}
inline ::cqhttp::SendGroupSign_Params* SendGroupSign::release_params() {
  
  ::cqhttp::SendGroupSign_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendGroupSign_Params* SendGroupSign::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupSign.params)
  
  ::cqhttp::SendGroupSign_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendGroupSign_Params* SendGroupSign::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendGroupSign_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendGroupSign_Params* SendGroupSign::mutable_params() {
  ::cqhttp::SendGroupSign_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupSign.params)
  return _msg;
}
inline void SendGroupSign::set_allocated_params(::cqhttp::SendGroupSign_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupSign.params)
}

// -------------------------------------------------------------------

// SetFriendAddRequest_Params

// string flag = 1;
inline void SetFriendAddRequest_Params::clear_flag() {
  _impl_.flag_.ClearToEmpty();
}
inline const std::string& SetFriendAddRequest_Params::flag() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetFriendAddRequest.Params.flag)
  return _internal_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetFriendAddRequest_Params::set_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetFriendAddRequest.Params.flag)
}
inline std::string* SetFriendAddRequest_Params::mutable_flag() {
  std::string* _s = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetFriendAddRequest.Params.flag)
  return _s;
}
inline const std::string& SetFriendAddRequest_Params::_internal_flag() const {
  return _impl_.flag_.Get();
}
inline void SetFriendAddRequest_Params::_internal_set_flag(const std::string& value) {
  
  _impl_.flag_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFriendAddRequest_Params::_internal_mutable_flag() {
  
  return _impl_.flag_.Mutable(GetArenaForAllocation());
}
inline std::string* SetFriendAddRequest_Params::release_flag() {
  // @@protoc_insertion_point(field_release:cqhttp.SetFriendAddRequest.Params.flag)
  return _impl_.flag_.Release();
}
inline void SetFriendAddRequest_Params::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  _impl_.flag_.SetAllocated(flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_.IsDefault()) {
    _impl_.flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetFriendAddRequest.Params.flag)
}

// bool approve = 2;
inline void SetFriendAddRequest_Params::clear_approve() {
  _impl_.approve_ = false;
}
inline bool SetFriendAddRequest_Params::_internal_approve() const {
  return _impl_.approve_;
}
inline bool SetFriendAddRequest_Params::approve() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetFriendAddRequest.Params.approve)
  return _internal_approve();
}
inline void SetFriendAddRequest_Params::_internal_set_approve(bool value) {
  
  _impl_.approve_ = value;
}
inline void SetFriendAddRequest_Params::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetFriendAddRequest.Params.approve)
}

// string remark = 3;
inline void SetFriendAddRequest_Params::clear_remark() {
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& SetFriendAddRequest_Params::remark() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetFriendAddRequest.Params.remark)
  return _internal_remark();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetFriendAddRequest_Params::set_remark(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remark_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetFriendAddRequest.Params.remark)
}
inline std::string* SetFriendAddRequest_Params::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetFriendAddRequest.Params.remark)
  return _s;
}
inline const std::string& SetFriendAddRequest_Params::_internal_remark() const {
  return _impl_.remark_.Get();
}
inline void SetFriendAddRequest_Params::_internal_set_remark(const std::string& value) {
  
  _impl_.remark_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFriendAddRequest_Params::_internal_mutable_remark() {
  
  return _impl_.remark_.Mutable(GetArenaForAllocation());
}
inline std::string* SetFriendAddRequest_Params::release_remark() {
  // @@protoc_insertion_point(field_release:cqhttp.SetFriendAddRequest.Params.remark)
  return _impl_.remark_.Release();
}
inline void SetFriendAddRequest_Params::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  _impl_.remark_.SetAllocated(remark, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remark_.IsDefault()) {
    _impl_.remark_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetFriendAddRequest.Params.remark)
}

// -------------------------------------------------------------------

// SetFriendAddRequest

// string action = 1;
inline void SetFriendAddRequest::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetFriendAddRequest::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetFriendAddRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetFriendAddRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetFriendAddRequest.action)
}
inline std::string* SetFriendAddRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetFriendAddRequest.action)
  return _s;
}
inline const std::string& SetFriendAddRequest::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetFriendAddRequest::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFriendAddRequest::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetFriendAddRequest::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetFriendAddRequest.action)
  return _impl_.action_.Release();
}
inline void SetFriendAddRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetFriendAddRequest.action)
}

// .cqhttp.SetFriendAddRequest.Params params = 2;
inline bool SetFriendAddRequest::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetFriendAddRequest::has_params() const {
  return _internal_has_params();
}
inline void SetFriendAddRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetFriendAddRequest_Params& SetFriendAddRequest::_internal_params() const {
  const ::cqhttp::SetFriendAddRequest_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetFriendAddRequest_Params&>(
      ::cqhttp::_SetFriendAddRequest_Params_default_instance_);
}
inline const ::cqhttp::SetFriendAddRequest_Params& SetFriendAddRequest::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetFriendAddRequest.params)
  return _internal_params();
}
inline void SetFriendAddRequest::unsafe_arena_set_allocated_params(
    ::cqhttp::SetFriendAddRequest_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetFriendAddRequest.params)
}
inline ::cqhttp::SetFriendAddRequest_Params* SetFriendAddRequest::release_params() {
  
  ::cqhttp::SetFriendAddRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetFriendAddRequest_Params* SetFriendAddRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetFriendAddRequest.params)
  
  ::cqhttp::SetFriendAddRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetFriendAddRequest_Params* SetFriendAddRequest::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetFriendAddRequest_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetFriendAddRequest_Params* SetFriendAddRequest::mutable_params() {
  ::cqhttp::SetFriendAddRequest_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetFriendAddRequest.params)
  return _msg;
}
inline void SetFriendAddRequest::set_allocated_params(::cqhttp::SetFriendAddRequest_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetFriendAddRequest.params)
}

// -------------------------------------------------------------------

// SetGroupAddRequest_Params

// string flag = 1;
inline void SetGroupAddRequest_Params::clear_flag() {
  _impl_.flag_.ClearToEmpty();
}
inline const std::string& SetGroupAddRequest_Params::flag() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAddRequest.Params.flag)
  return _internal_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAddRequest_Params::set_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAddRequest.Params.flag)
}
inline std::string* SetGroupAddRequest_Params::mutable_flag() {
  std::string* _s = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAddRequest.Params.flag)
  return _s;
}
inline const std::string& SetGroupAddRequest_Params::_internal_flag() const {
  return _impl_.flag_.Get();
}
inline void SetGroupAddRequest_Params::_internal_set_flag(const std::string& value) {
  
  _impl_.flag_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest_Params::_internal_mutable_flag() {
  
  return _impl_.flag_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest_Params::release_flag() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAddRequest.Params.flag)
  return _impl_.flag_.Release();
}
inline void SetGroupAddRequest_Params::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  _impl_.flag_.SetAllocated(flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_.IsDefault()) {
    _impl_.flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAddRequest.Params.flag)
}

// string sub_type = 2;
inline void SetGroupAddRequest_Params::clear_sub_type() {
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& SetGroupAddRequest_Params::sub_type() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAddRequest.Params.sub_type)
  return _internal_sub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAddRequest_Params::set_sub_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAddRequest.Params.sub_type)
}
inline std::string* SetGroupAddRequest_Params::mutable_sub_type() {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAddRequest.Params.sub_type)
  return _s;
}
inline const std::string& SetGroupAddRequest_Params::_internal_sub_type() const {
  return _impl_.sub_type_.Get();
}
inline void SetGroupAddRequest_Params::_internal_set_sub_type(const std::string& value) {
  
  _impl_.sub_type_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest_Params::_internal_mutable_sub_type() {
  
  return _impl_.sub_type_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest_Params::release_sub_type() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAddRequest.Params.sub_type)
  return _impl_.sub_type_.Release();
}
inline void SetGroupAddRequest_Params::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  _impl_.sub_type_.SetAllocated(sub_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_type_.IsDefault()) {
    _impl_.sub_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAddRequest.Params.sub_type)
}

// bool approve = 3;
inline void SetGroupAddRequest_Params::clear_approve() {
  _impl_.approve_ = false;
}
inline bool SetGroupAddRequest_Params::_internal_approve() const {
  return _impl_.approve_;
}
inline bool SetGroupAddRequest_Params::approve() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAddRequest.Params.approve)
  return _internal_approve();
}
inline void SetGroupAddRequest_Params::_internal_set_approve(bool value) {
  
  _impl_.approve_ = value;
}
inline void SetGroupAddRequest_Params::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAddRequest.Params.approve)
}

// string reason = 4;
inline void SetGroupAddRequest_Params::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& SetGroupAddRequest_Params::reason() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAddRequest.Params.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAddRequest_Params::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAddRequest.Params.reason)
}
inline std::string* SetGroupAddRequest_Params::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAddRequest.Params.reason)
  return _s;
}
inline const std::string& SetGroupAddRequest_Params::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void SetGroupAddRequest_Params::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest_Params::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest_Params::release_reason() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAddRequest.Params.reason)
  return _impl_.reason_.Release();
}
inline void SetGroupAddRequest_Params::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAddRequest.Params.reason)
}

// -------------------------------------------------------------------

// SetGroupAddRequest

// string action = 1;
inline void SetGroupAddRequest::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupAddRequest::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAddRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupAddRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupAddRequest.action)
}
inline std::string* SetGroupAddRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAddRequest.action)
  return _s;
}
inline const std::string& SetGroupAddRequest::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupAddRequest::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupAddRequest::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAddRequest.action)
  return _impl_.action_.Release();
}
inline void SetGroupAddRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAddRequest.action)
}

// .cqhttp.SetGroupAddRequest.Params params = 2;
inline bool SetGroupAddRequest::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupAddRequest::has_params() const {
  return _internal_has_params();
}
inline void SetGroupAddRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupAddRequest_Params& SetGroupAddRequest::_internal_params() const {
  const ::cqhttp::SetGroupAddRequest_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupAddRequest_Params&>(
      ::cqhttp::_SetGroupAddRequest_Params_default_instance_);
}
inline const ::cqhttp::SetGroupAddRequest_Params& SetGroupAddRequest::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupAddRequest.params)
  return _internal_params();
}
inline void SetGroupAddRequest::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupAddRequest_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupAddRequest.params)
}
inline ::cqhttp::SetGroupAddRequest_Params* SetGroupAddRequest::release_params() {
  
  ::cqhttp::SetGroupAddRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupAddRequest_Params* SetGroupAddRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupAddRequest.params)
  
  ::cqhttp::SetGroupAddRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupAddRequest_Params* SetGroupAddRequest::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupAddRequest_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupAddRequest_Params* SetGroupAddRequest::mutable_params() {
  ::cqhttp::SetGroupAddRequest_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupAddRequest.params)
  return _msg;
}
inline void SetGroupAddRequest::set_allocated_params(::cqhttp::SetGroupAddRequest_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupAddRequest.params)
}

// -------------------------------------------------------------------

// GetLoginInfo_Params

// int64 user_id = 1;
inline void GetLoginInfo_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetLoginInfo_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetLoginInfo_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfo.Params.user_id)
  return _internal_user_id();
}
inline void GetLoginInfo_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetLoginInfo_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetLoginInfo.Params.user_id)
}

// string nickname = 2;
inline void GetLoginInfo_Params::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GetLoginInfo_Params::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfo.Params.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoginInfo_Params::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetLoginInfo.Params.nickname)
}
inline std::string* GetLoginInfo_Params::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetLoginInfo.Params.nickname)
  return _s;
}
inline const std::string& GetLoginInfo_Params::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GetLoginInfo_Params::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoginInfo_Params::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoginInfo_Params::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.GetLoginInfo.Params.nickname)
  return _impl_.nickname_.Release();
}
inline void GetLoginInfo_Params::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetLoginInfo.Params.nickname)
}

// -------------------------------------------------------------------

// GetLoginInfo

// string action = 1;
inline void GetLoginInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetLoginInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoginInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetLoginInfo.action)
}
inline std::string* GetLoginInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetLoginInfo.action)
  return _s;
}
inline const std::string& GetLoginInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetLoginInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoginInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoginInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetLoginInfo.action)
  return _impl_.action_.Release();
}
inline void GetLoginInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetLoginInfo.action)
}

// .cqhttp.GetLoginInfo.Params params = 2;
inline bool GetLoginInfo::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetLoginInfo::has_params() const {
  return _internal_has_params();
}
inline void GetLoginInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetLoginInfo_Params& GetLoginInfo::_internal_params() const {
  const ::cqhttp::GetLoginInfo_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetLoginInfo_Params&>(
      ::cqhttp::_GetLoginInfo_Params_default_instance_);
}
inline const ::cqhttp::GetLoginInfo_Params& GetLoginInfo::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfo.params)
  return _internal_params();
}
inline void GetLoginInfo::unsafe_arena_set_allocated_params(
    ::cqhttp::GetLoginInfo_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetLoginInfo.params)
}
inline ::cqhttp::GetLoginInfo_Params* GetLoginInfo::release_params() {
  
  ::cqhttp::GetLoginInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetLoginInfo_Params* GetLoginInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetLoginInfo.params)
  
  ::cqhttp::GetLoginInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetLoginInfo_Params* GetLoginInfo::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetLoginInfo_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetLoginInfo_Params* GetLoginInfo::mutable_params() {
  ::cqhttp::GetLoginInfo_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetLoginInfo.params)
  return _msg;
}
inline void GetLoginInfo::set_allocated_params(::cqhttp::GetLoginInfo_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetLoginInfo.params)
}

// string echo = 3;
inline void GetLoginInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetLoginInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoginInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetLoginInfo.echo)
}
inline std::string* GetLoginInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetLoginInfo.echo)
  return _s;
}
inline const std::string& GetLoginInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetLoginInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoginInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoginInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetLoginInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetLoginInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetLoginInfo.echo)
}

// -------------------------------------------------------------------

// GetLoginInfoResp

// int64 user_id = 1;
inline void GetLoginInfoResp::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetLoginInfoResp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetLoginInfoResp::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfoResp.user_id)
  return _internal_user_id();
}
inline void GetLoginInfoResp::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetLoginInfoResp::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetLoginInfoResp.user_id)
}

// string nickname = 2;
inline void GetLoginInfoResp::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GetLoginInfoResp::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetLoginInfoResp.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoginInfoResp::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetLoginInfoResp.nickname)
}
inline std::string* GetLoginInfoResp::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetLoginInfoResp.nickname)
  return _s;
}
inline const std::string& GetLoginInfoResp::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GetLoginInfoResp::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoginInfoResp::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoginInfoResp::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.GetLoginInfoResp.nickname)
  return _impl_.nickname_.Release();
}
inline void GetLoginInfoResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetLoginInfoResp.nickname)
}

// -------------------------------------------------------------------

// QiDianGetAccountInfo

// string action = 1;
inline void QiDianGetAccountInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& QiDianGetAccountInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.QiDianGetAccountInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QiDianGetAccountInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.QiDianGetAccountInfo.action)
}
inline std::string* QiDianGetAccountInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.QiDianGetAccountInfo.action)
  return _s;
}
inline const std::string& QiDianGetAccountInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void QiDianGetAccountInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* QiDianGetAccountInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* QiDianGetAccountInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.QiDianGetAccountInfo.action)
  return _impl_.action_.Release();
}
inline void QiDianGetAccountInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.QiDianGetAccountInfo.action)
}

// string echo = 2;
inline void QiDianGetAccountInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& QiDianGetAccountInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.QiDianGetAccountInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QiDianGetAccountInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.QiDianGetAccountInfo.echo)
}
inline std::string* QiDianGetAccountInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.QiDianGetAccountInfo.echo)
  return _s;
}
inline const std::string& QiDianGetAccountInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void QiDianGetAccountInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* QiDianGetAccountInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* QiDianGetAccountInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.QiDianGetAccountInfo.echo)
  return _impl_.echo_.Release();
}
inline void QiDianGetAccountInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.QiDianGetAccountInfo.echo)
}

// -------------------------------------------------------------------

// QiDianGetAccountInfoResp

// int64 master_id = 1;
inline void QiDianGetAccountInfoResp::clear_master_id() {
  _impl_.master_id_ = int64_t{0};
}
inline int64_t QiDianGetAccountInfoResp::_internal_master_id() const {
  return _impl_.master_id_;
}
inline int64_t QiDianGetAccountInfoResp::master_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.QiDianGetAccountInfoResp.master_id)
  return _internal_master_id();
}
inline void QiDianGetAccountInfoResp::_internal_set_master_id(int64_t value) {
  
  _impl_.master_id_ = value;
}
inline void QiDianGetAccountInfoResp::set_master_id(int64_t value) {
  _internal_set_master_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.QiDianGetAccountInfoResp.master_id)
}

// string ext_name = 2;
inline void QiDianGetAccountInfoResp::clear_ext_name() {
  _impl_.ext_name_.ClearToEmpty();
}
inline const std::string& QiDianGetAccountInfoResp::ext_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.QiDianGetAccountInfoResp.ext_name)
  return _internal_ext_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QiDianGetAccountInfoResp::set_ext_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ext_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.QiDianGetAccountInfoResp.ext_name)
}
inline std::string* QiDianGetAccountInfoResp::mutable_ext_name() {
  std::string* _s = _internal_mutable_ext_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.QiDianGetAccountInfoResp.ext_name)
  return _s;
}
inline const std::string& QiDianGetAccountInfoResp::_internal_ext_name() const {
  return _impl_.ext_name_.Get();
}
inline void QiDianGetAccountInfoResp::_internal_set_ext_name(const std::string& value) {
  
  _impl_.ext_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QiDianGetAccountInfoResp::_internal_mutable_ext_name() {
  
  return _impl_.ext_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QiDianGetAccountInfoResp::release_ext_name() {
  // @@protoc_insertion_point(field_release:cqhttp.QiDianGetAccountInfoResp.ext_name)
  return _impl_.ext_name_.Release();
}
inline void QiDianGetAccountInfoResp::set_allocated_ext_name(std::string* ext_name) {
  if (ext_name != nullptr) {
    
  } else {
    
  }
  _impl_.ext_name_.SetAllocated(ext_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ext_name_.IsDefault()) {
    _impl_.ext_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.QiDianGetAccountInfoResp.ext_name)
}

// int64 create_time = 3;
inline void QiDianGetAccountInfoResp::clear_create_time() {
  _impl_.create_time_ = int64_t{0};
}
inline int64_t QiDianGetAccountInfoResp::_internal_create_time() const {
  return _impl_.create_time_;
}
inline int64_t QiDianGetAccountInfoResp::create_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.QiDianGetAccountInfoResp.create_time)
  return _internal_create_time();
}
inline void QiDianGetAccountInfoResp::_internal_set_create_time(int64_t value) {
  
  _impl_.create_time_ = value;
}
inline void QiDianGetAccountInfoResp::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.QiDianGetAccountInfoResp.create_time)
}

// -------------------------------------------------------------------

// SetQQProfile_Params

// string nickname = 1;
inline void SetQQProfile_Params::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& SetQQProfile_Params::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.Params.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetQQProfile_Params::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetQQProfile.Params.nickname)
}
inline std::string* SetQQProfile_Params::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.Params.nickname)
  return _s;
}
inline const std::string& SetQQProfile_Params::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void SetQQProfile_Params::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.Params.nickname)
  return _impl_.nickname_.Release();
}
inline void SetQQProfile_Params::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.Params.nickname)
}

// string company = 2;
inline void SetQQProfile_Params::clear_company() {
  _impl_.company_.ClearToEmpty();
}
inline const std::string& SetQQProfile_Params::company() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.Params.company)
  return _internal_company();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetQQProfile_Params::set_company(ArgT0&& arg0, ArgT... args) {
 
 _impl_.company_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetQQProfile.Params.company)
}
inline std::string* SetQQProfile_Params::mutable_company() {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.Params.company)
  return _s;
}
inline const std::string& SetQQProfile_Params::_internal_company() const {
  return _impl_.company_.Get();
}
inline void SetQQProfile_Params::_internal_set_company(const std::string& value) {
  
  _impl_.company_.Set(value, GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::_internal_mutable_company() {
  
  return _impl_.company_.Mutable(GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::release_company() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.Params.company)
  return _impl_.company_.Release();
}
inline void SetQQProfile_Params::set_allocated_company(std::string* company) {
  if (company != nullptr) {
    
  } else {
    
  }
  _impl_.company_.SetAllocated(company, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.company_.IsDefault()) {
    _impl_.company_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.Params.company)
}

// string email = 3;
inline void SetQQProfile_Params::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SetQQProfile_Params::email() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.Params.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetQQProfile_Params::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetQQProfile.Params.email)
}
inline std::string* SetQQProfile_Params::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.Params.email)
  return _s;
}
inline const std::string& SetQQProfile_Params::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SetQQProfile_Params::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::release_email() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.Params.email)
  return _impl_.email_.Release();
}
inline void SetQQProfile_Params::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.Params.email)
}

// string college = 4;
inline void SetQQProfile_Params::clear_college() {
  _impl_.college_.ClearToEmpty();
}
inline const std::string& SetQQProfile_Params::college() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.Params.college)
  return _internal_college();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetQQProfile_Params::set_college(ArgT0&& arg0, ArgT... args) {
 
 _impl_.college_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetQQProfile.Params.college)
}
inline std::string* SetQQProfile_Params::mutable_college() {
  std::string* _s = _internal_mutable_college();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.Params.college)
  return _s;
}
inline const std::string& SetQQProfile_Params::_internal_college() const {
  return _impl_.college_.Get();
}
inline void SetQQProfile_Params::_internal_set_college(const std::string& value) {
  
  _impl_.college_.Set(value, GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::_internal_mutable_college() {
  
  return _impl_.college_.Mutable(GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::release_college() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.Params.college)
  return _impl_.college_.Release();
}
inline void SetQQProfile_Params::set_allocated_college(std::string* college) {
  if (college != nullptr) {
    
  } else {
    
  }
  _impl_.college_.SetAllocated(college, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.college_.IsDefault()) {
    _impl_.college_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.Params.college)
}

// string personal_note = 5;
inline void SetQQProfile_Params::clear_personal_note() {
  _impl_.personal_note_.ClearToEmpty();
}
inline const std::string& SetQQProfile_Params::personal_note() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.Params.personal_note)
  return _internal_personal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetQQProfile_Params::set_personal_note(ArgT0&& arg0, ArgT... args) {
 
 _impl_.personal_note_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetQQProfile.Params.personal_note)
}
inline std::string* SetQQProfile_Params::mutable_personal_note() {
  std::string* _s = _internal_mutable_personal_note();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.Params.personal_note)
  return _s;
}
inline const std::string& SetQQProfile_Params::_internal_personal_note() const {
  return _impl_.personal_note_.Get();
}
inline void SetQQProfile_Params::_internal_set_personal_note(const std::string& value) {
  
  _impl_.personal_note_.Set(value, GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::_internal_mutable_personal_note() {
  
  return _impl_.personal_note_.Mutable(GetArenaForAllocation());
}
inline std::string* SetQQProfile_Params::release_personal_note() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.Params.personal_note)
  return _impl_.personal_note_.Release();
}
inline void SetQQProfile_Params::set_allocated_personal_note(std::string* personal_note) {
  if (personal_note != nullptr) {
    
  } else {
    
  }
  _impl_.personal_note_.SetAllocated(personal_note, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.personal_note_.IsDefault()) {
    _impl_.personal_note_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.Params.personal_note)
}

// -------------------------------------------------------------------

// SetQQProfile

// string action = 1;
inline void SetQQProfile::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetQQProfile::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetQQProfile::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetQQProfile.action)
}
inline std::string* SetQQProfile::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.action)
  return _s;
}
inline const std::string& SetQQProfile::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetQQProfile::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetQQProfile::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetQQProfile::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.action)
  return _impl_.action_.Release();
}
inline void SetQQProfile::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.action)
}

// .cqhttp.SetQQProfile.Params params = 2;
inline bool SetQQProfile::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetQQProfile::has_params() const {
  return _internal_has_params();
}
inline void SetQQProfile::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetQQProfile_Params& SetQQProfile::_internal_params() const {
  const ::cqhttp::SetQQProfile_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetQQProfile_Params&>(
      ::cqhttp::_SetQQProfile_Params_default_instance_);
}
inline const ::cqhttp::SetQQProfile_Params& SetQQProfile::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetQQProfile.params)
  return _internal_params();
}
inline void SetQQProfile::unsafe_arena_set_allocated_params(
    ::cqhttp::SetQQProfile_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetQQProfile.params)
}
inline ::cqhttp::SetQQProfile_Params* SetQQProfile::release_params() {
  
  ::cqhttp::SetQQProfile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetQQProfile_Params* SetQQProfile::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetQQProfile.params)
  
  ::cqhttp::SetQQProfile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetQQProfile_Params* SetQQProfile::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetQQProfile_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetQQProfile_Params* SetQQProfile::mutable_params() {
  ::cqhttp::SetQQProfile_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetQQProfile.params)
  return _msg;
}
inline void SetQQProfile::set_allocated_params(::cqhttp::SetQQProfile_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetQQProfile.params)
}

// -------------------------------------------------------------------

// GetStrangerInfo_Params

// int64 user_id = 1;
inline void GetStrangerInfo_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetStrangerInfo_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetStrangerInfo_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfo.Params.user_id)
  return _internal_user_id();
}
inline void GetStrangerInfo_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetStrangerInfo_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfo.Params.user_id)
}

// bool no_cache = 2;
inline void GetStrangerInfo_Params::clear_no_cache() {
  _impl_.no_cache_ = false;
}
inline bool GetStrangerInfo_Params::_internal_no_cache() const {
  return _impl_.no_cache_;
}
inline bool GetStrangerInfo_Params::no_cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfo.Params.no_cache)
  return _internal_no_cache();
}
inline void GetStrangerInfo_Params::_internal_set_no_cache(bool value) {
  
  _impl_.no_cache_ = value;
}
inline void GetStrangerInfo_Params::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfo.Params.no_cache)
}

// -------------------------------------------------------------------

// GetStrangerInfo

// string action = 1;
inline void GetStrangerInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetStrangerInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStrangerInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfo.action)
}
inline std::string* GetStrangerInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStrangerInfo.action)
  return _s;
}
inline const std::string& GetStrangerInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetStrangerInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStrangerInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStrangerInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStrangerInfo.action)
  return _impl_.action_.Release();
}
inline void GetStrangerInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStrangerInfo.action)
}

// .cqhttp.GetStrangerInfo.Params params = 2;
inline bool GetStrangerInfo::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetStrangerInfo::has_params() const {
  return _internal_has_params();
}
inline void GetStrangerInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetStrangerInfo_Params& GetStrangerInfo::_internal_params() const {
  const ::cqhttp::GetStrangerInfo_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetStrangerInfo_Params&>(
      ::cqhttp::_GetStrangerInfo_Params_default_instance_);
}
inline const ::cqhttp::GetStrangerInfo_Params& GetStrangerInfo::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfo.params)
  return _internal_params();
}
inline void GetStrangerInfo::unsafe_arena_set_allocated_params(
    ::cqhttp::GetStrangerInfo_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetStrangerInfo.params)
}
inline ::cqhttp::GetStrangerInfo_Params* GetStrangerInfo::release_params() {
  
  ::cqhttp::GetStrangerInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetStrangerInfo_Params* GetStrangerInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStrangerInfo.params)
  
  ::cqhttp::GetStrangerInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetStrangerInfo_Params* GetStrangerInfo::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetStrangerInfo_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetStrangerInfo_Params* GetStrangerInfo::mutable_params() {
  ::cqhttp::GetStrangerInfo_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStrangerInfo.params)
  return _msg;
}
inline void GetStrangerInfo::set_allocated_params(::cqhttp::GetStrangerInfo_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStrangerInfo.params)
}

// string echo = 3;
inline void GetStrangerInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetStrangerInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStrangerInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfo.echo)
}
inline std::string* GetStrangerInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStrangerInfo.echo)
  return _s;
}
inline const std::string& GetStrangerInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetStrangerInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStrangerInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStrangerInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStrangerInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetStrangerInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStrangerInfo.echo)
}

// -------------------------------------------------------------------

// GetStrangerInfoResp

// int64 user_id = 1;
inline void GetStrangerInfoResp::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetStrangerInfoResp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetStrangerInfoResp::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.user_id)
  return _internal_user_id();
}
inline void GetStrangerInfoResp::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetStrangerInfoResp::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.user_id)
}

// string nickname = 2;
inline void GetStrangerInfoResp::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GetStrangerInfoResp::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStrangerInfoResp::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.nickname)
}
inline std::string* GetStrangerInfoResp::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStrangerInfoResp.nickname)
  return _s;
}
inline const std::string& GetStrangerInfoResp::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GetStrangerInfoResp::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStrangerInfoResp::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStrangerInfoResp::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStrangerInfoResp.nickname)
  return _impl_.nickname_.Release();
}
inline void GetStrangerInfoResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStrangerInfoResp.nickname)
}

// string sex = 3;
inline void GetStrangerInfoResp::clear_sex() {
  _impl_.sex_.ClearToEmpty();
}
inline const std::string& GetStrangerInfoResp::sex() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.sex)
  return _internal_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStrangerInfoResp::set_sex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.sex)
}
inline std::string* GetStrangerInfoResp::mutable_sex() {
  std::string* _s = _internal_mutable_sex();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStrangerInfoResp.sex)
  return _s;
}
inline const std::string& GetStrangerInfoResp::_internal_sex() const {
  return _impl_.sex_.Get();
}
inline void GetStrangerInfoResp::_internal_set_sex(const std::string& value) {
  
  _impl_.sex_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStrangerInfoResp::_internal_mutable_sex() {
  
  return _impl_.sex_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStrangerInfoResp::release_sex() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStrangerInfoResp.sex)
  return _impl_.sex_.Release();
}
inline void GetStrangerInfoResp::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  _impl_.sex_.SetAllocated(sex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sex_.IsDefault()) {
    _impl_.sex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStrangerInfoResp.sex)
}

// int32 age = 4;
inline void GetStrangerInfoResp::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t GetStrangerInfoResp::_internal_age() const {
  return _impl_.age_;
}
inline int32_t GetStrangerInfoResp::age() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.age)
  return _internal_age();
}
inline void GetStrangerInfoResp::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void GetStrangerInfoResp::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.age)
}

// string qid = 5;
inline void GetStrangerInfoResp::clear_qid() {
  _impl_.qid_.ClearToEmpty();
}
inline const std::string& GetStrangerInfoResp::qid() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.qid)
  return _internal_qid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStrangerInfoResp::set_qid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.qid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.qid)
}
inline std::string* GetStrangerInfoResp::mutable_qid() {
  std::string* _s = _internal_mutable_qid();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStrangerInfoResp.qid)
  return _s;
}
inline const std::string& GetStrangerInfoResp::_internal_qid() const {
  return _impl_.qid_.Get();
}
inline void GetStrangerInfoResp::_internal_set_qid(const std::string& value) {
  
  _impl_.qid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStrangerInfoResp::_internal_mutable_qid() {
  
  return _impl_.qid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStrangerInfoResp::release_qid() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStrangerInfoResp.qid)
  return _impl_.qid_.Release();
}
inline void GetStrangerInfoResp::set_allocated_qid(std::string* qid) {
  if (qid != nullptr) {
    
  } else {
    
  }
  _impl_.qid_.SetAllocated(qid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qid_.IsDefault()) {
    _impl_.qid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStrangerInfoResp.qid)
}

// int32 level = 6;
inline void GetStrangerInfoResp::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t GetStrangerInfoResp::_internal_level() const {
  return _impl_.level_;
}
inline int32_t GetStrangerInfoResp::level() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.level)
  return _internal_level();
}
inline void GetStrangerInfoResp::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void GetStrangerInfoResp::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.level)
}

// int32 login_days = 7;
inline void GetStrangerInfoResp::clear_login_days() {
  _impl_.login_days_ = 0;
}
inline int32_t GetStrangerInfoResp::_internal_login_days() const {
  return _impl_.login_days_;
}
inline int32_t GetStrangerInfoResp::login_days() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStrangerInfoResp.login_days)
  return _internal_login_days();
}
inline void GetStrangerInfoResp::_internal_set_login_days(int32_t value) {
  
  _impl_.login_days_ = value;
}
inline void GetStrangerInfoResp::set_login_days(int32_t value) {
  _internal_set_login_days(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStrangerInfoResp.login_days)
}

// -------------------------------------------------------------------

// GetFriendList

// string action = 1;
inline void GetFriendList::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetFriendList::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetFriendList.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendList::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetFriendList.action)
}
inline std::string* GetFriendList::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetFriendList.action)
  return _s;
}
inline const std::string& GetFriendList::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetFriendList::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendList::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendList::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetFriendList.action)
  return _impl_.action_.Release();
}
inline void GetFriendList::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetFriendList.action)
}

// string echo = 2;
inline void GetFriendList::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetFriendList::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetFriendList.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendList::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetFriendList.echo)
}
inline std::string* GetFriendList::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetFriendList.echo)
  return _s;
}
inline const std::string& GetFriendList::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetFriendList::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendList::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendList::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetFriendList.echo)
  return _impl_.echo_.Release();
}
inline void GetFriendList::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetFriendList.echo)
}

// -------------------------------------------------------------------

// GetFriendListResp_Friend

// int64 user_id = 1;
inline void GetFriendListResp_Friend::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetFriendListResp_Friend::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetFriendListResp_Friend::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetFriendListResp.Friend.user_id)
  return _internal_user_id();
}
inline void GetFriendListResp_Friend::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetFriendListResp_Friend::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetFriendListResp.Friend.user_id)
}

// string nickname = 2;
inline void GetFriendListResp_Friend::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GetFriendListResp_Friend::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetFriendListResp.Friend.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListResp_Friend::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetFriendListResp.Friend.nickname)
}
inline std::string* GetFriendListResp_Friend::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetFriendListResp.Friend.nickname)
  return _s;
}
inline const std::string& GetFriendListResp_Friend::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GetFriendListResp_Friend::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListResp_Friend::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListResp_Friend::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.GetFriendListResp.Friend.nickname)
  return _impl_.nickname_.Release();
}
inline void GetFriendListResp_Friend::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetFriendListResp.Friend.nickname)
}

// string remark = 3;
inline void GetFriendListResp_Friend::clear_remark() {
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& GetFriendListResp_Friend::remark() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetFriendListResp.Friend.remark)
  return _internal_remark();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListResp_Friend::set_remark(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remark_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetFriendListResp.Friend.remark)
}
inline std::string* GetFriendListResp_Friend::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetFriendListResp.Friend.remark)
  return _s;
}
inline const std::string& GetFriendListResp_Friend::_internal_remark() const {
  return _impl_.remark_.Get();
}
inline void GetFriendListResp_Friend::_internal_set_remark(const std::string& value) {
  
  _impl_.remark_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListResp_Friend::_internal_mutable_remark() {
  
  return _impl_.remark_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListResp_Friend::release_remark() {
  // @@protoc_insertion_point(field_release:cqhttp.GetFriendListResp.Friend.remark)
  return _impl_.remark_.Release();
}
inline void GetFriendListResp_Friend::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  _impl_.remark_.SetAllocated(remark, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remark_.IsDefault()) {
    _impl_.remark_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetFriendListResp.Friend.remark)
}

// -------------------------------------------------------------------

// GetFriendListResp

// repeated .cqhttp.GetFriendListResp.Friend friends = 1;
inline int GetFriendListResp::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int GetFriendListResp::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriendListResp::clear_friends() {
  _impl_.friends_.Clear();
}
inline ::cqhttp::GetFriendListResp_Friend* GetFriendListResp::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetFriendListResp.friends)
  return _impl_.friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetFriendListResp_Friend >*
GetFriendListResp::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetFriendListResp.friends)
  return &_impl_.friends_;
}
inline const ::cqhttp::GetFriendListResp_Friend& GetFriendListResp::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const ::cqhttp::GetFriendListResp_Friend& GetFriendListResp::friends(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetFriendListResp.friends)
  return _internal_friends(index);
}
inline ::cqhttp::GetFriendListResp_Friend* GetFriendListResp::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline ::cqhttp::GetFriendListResp_Friend* GetFriendListResp::add_friends() {
  ::cqhttp::GetFriendListResp_Friend* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:cqhttp.GetFriendListResp.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetFriendListResp_Friend >&
GetFriendListResp::friends() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetFriendListResp.friends)
  return _impl_.friends_;
}

// -------------------------------------------------------------------

// UnidirectionalFriendList

// string action = 1;
inline void UnidirectionalFriendList::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& UnidirectionalFriendList::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.UnidirectionalFriendList.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnidirectionalFriendList::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UnidirectionalFriendList.action)
}
inline std::string* UnidirectionalFriendList::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.UnidirectionalFriendList.action)
  return _s;
}
inline const std::string& UnidirectionalFriendList::_internal_action() const {
  return _impl_.action_.Get();
}
inline void UnidirectionalFriendList::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendList::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendList::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.UnidirectionalFriendList.action)
  return _impl_.action_.Release();
}
inline void UnidirectionalFriendList::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UnidirectionalFriendList.action)
}

// string echo = 2;
inline void UnidirectionalFriendList::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& UnidirectionalFriendList::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.UnidirectionalFriendList.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnidirectionalFriendList::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UnidirectionalFriendList.echo)
}
inline std::string* UnidirectionalFriendList::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.UnidirectionalFriendList.echo)
  return _s;
}
inline const std::string& UnidirectionalFriendList::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void UnidirectionalFriendList::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendList::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendList::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.UnidirectionalFriendList.echo)
  return _impl_.echo_.Release();
}
inline void UnidirectionalFriendList::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UnidirectionalFriendList.echo)
}

// -------------------------------------------------------------------

// UnidirectionalFriendListResp_Friend

// int64 user_id = 1;
inline void UnidirectionalFriendListResp_Friend::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t UnidirectionalFriendListResp_Friend::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t UnidirectionalFriendListResp_Friend::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.UnidirectionalFriendListResp.Friend.user_id)
  return _internal_user_id();
}
inline void UnidirectionalFriendListResp_Friend::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void UnidirectionalFriendListResp_Friend::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.UnidirectionalFriendListResp.Friend.user_id)
}

// string nickname = 2;
inline void UnidirectionalFriendListResp_Friend::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UnidirectionalFriendListResp_Friend::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.UnidirectionalFriendListResp.Friend.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnidirectionalFriendListResp_Friend::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UnidirectionalFriendListResp.Friend.nickname)
}
inline std::string* UnidirectionalFriendListResp_Friend::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.UnidirectionalFriendListResp.Friend.nickname)
  return _s;
}
inline const std::string& UnidirectionalFriendListResp_Friend::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UnidirectionalFriendListResp_Friend::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendListResp_Friend::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendListResp_Friend::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.UnidirectionalFriendListResp.Friend.nickname)
  return _impl_.nickname_.Release();
}
inline void UnidirectionalFriendListResp_Friend::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UnidirectionalFriendListResp.Friend.nickname)
}

// string source = 3;
inline void UnidirectionalFriendListResp_Friend::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& UnidirectionalFriendListResp_Friend::source() const {
  // @@protoc_insertion_point(field_get:cqhttp.UnidirectionalFriendListResp.Friend.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnidirectionalFriendListResp_Friend::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UnidirectionalFriendListResp.Friend.source)
}
inline std::string* UnidirectionalFriendListResp_Friend::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:cqhttp.UnidirectionalFriendListResp.Friend.source)
  return _s;
}
inline const std::string& UnidirectionalFriendListResp_Friend::_internal_source() const {
  return _impl_.source_.Get();
}
inline void UnidirectionalFriendListResp_Friend::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendListResp_Friend::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* UnidirectionalFriendListResp_Friend::release_source() {
  // @@protoc_insertion_point(field_release:cqhttp.UnidirectionalFriendListResp.Friend.source)
  return _impl_.source_.Release();
}
inline void UnidirectionalFriendListResp_Friend::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UnidirectionalFriendListResp.Friend.source)
}

// -------------------------------------------------------------------

// UnidirectionalFriendListResp

// repeated .cqhttp.UnidirectionalFriendListResp.Friend friend = 1;
inline int UnidirectionalFriendListResp::_internal_friend__size() const {
  return _impl_.friend__.size();
}
inline int UnidirectionalFriendListResp::friend__size() const {
  return _internal_friend__size();
}
inline void UnidirectionalFriendListResp::clear_friend_() {
  _impl_.friend__.Clear();
}
inline ::cqhttp::UnidirectionalFriendListResp_Friend* UnidirectionalFriendListResp::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.UnidirectionalFriendListResp.friend)
  return _impl_.friend__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::UnidirectionalFriendListResp_Friend >*
UnidirectionalFriendListResp::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.UnidirectionalFriendListResp.friend)
  return &_impl_.friend__;
}
inline const ::cqhttp::UnidirectionalFriendListResp_Friend& UnidirectionalFriendListResp::_internal_friend_(int index) const {
  return _impl_.friend__.Get(index);
}
inline const ::cqhttp::UnidirectionalFriendListResp_Friend& UnidirectionalFriendListResp::friend_(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.UnidirectionalFriendListResp.friend)
  return _internal_friend_(index);
}
inline ::cqhttp::UnidirectionalFriendListResp_Friend* UnidirectionalFriendListResp::_internal_add_friend_() {
  return _impl_.friend__.Add();
}
inline ::cqhttp::UnidirectionalFriendListResp_Friend* UnidirectionalFriendListResp::add_friend_() {
  ::cqhttp::UnidirectionalFriendListResp_Friend* _add = _internal_add_friend_();
  // @@protoc_insertion_point(field_add:cqhttp.UnidirectionalFriendListResp.friend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::UnidirectionalFriendListResp_Friend >&
UnidirectionalFriendListResp::friend_() const {
  // @@protoc_insertion_point(field_list:cqhttp.UnidirectionalFriendListResp.friend)
  return _impl_.friend__;
}

// -------------------------------------------------------------------

// DeleteFriend_Params

// int64 user_id = 1;
inline void DeleteFriend_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t DeleteFriend_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t DeleteFriend_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteFriend.Params.user_id)
  return _internal_user_id();
}
inline void DeleteFriend_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void DeleteFriend_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteFriend.Params.user_id)
}

// -------------------------------------------------------------------

// DeleteFriend

// string action = 1;
inline void DeleteFriend::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DeleteFriend::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteFriend.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteFriend::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteFriend.action)
}
inline std::string* DeleteFriend::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteFriend.action)
  return _s;
}
inline const std::string& DeleteFriend::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DeleteFriend::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteFriend::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteFriend::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteFriend.action)
  return _impl_.action_.Release();
}
inline void DeleteFriend::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteFriend.action)
}

// .cqhttp.DeleteFriend.Params params = 2;
inline bool DeleteFriend::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DeleteFriend::has_params() const {
  return _internal_has_params();
}
inline void DeleteFriend::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DeleteFriend_Params& DeleteFriend::_internal_params() const {
  const ::cqhttp::DeleteFriend_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DeleteFriend_Params&>(
      ::cqhttp::_DeleteFriend_Params_default_instance_);
}
inline const ::cqhttp::DeleteFriend_Params& DeleteFriend::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteFriend.params)
  return _internal_params();
}
inline void DeleteFriend::unsafe_arena_set_allocated_params(
    ::cqhttp::DeleteFriend_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DeleteFriend.params)
}
inline ::cqhttp::DeleteFriend_Params* DeleteFriend::release_params() {
  
  ::cqhttp::DeleteFriend_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DeleteFriend_Params* DeleteFriend::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteFriend.params)
  
  ::cqhttp::DeleteFriend_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DeleteFriend_Params* DeleteFriend::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DeleteFriend_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DeleteFriend_Params* DeleteFriend::mutable_params() {
  ::cqhttp::DeleteFriend_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteFriend.params)
  return _msg;
}
inline void DeleteFriend::set_allocated_params(::cqhttp::DeleteFriend_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteFriend.params)
}

// -------------------------------------------------------------------

// GetGroupInfo_Params

// int64 group_id = 1;
inline void GetGroupInfo_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupInfo_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupInfo_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfo.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupInfo_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupInfo_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfo.Params.group_id)
}

// bool no_cache = 2;
inline void GetGroupInfo_Params::clear_no_cache() {
  _impl_.no_cache_ = false;
}
inline bool GetGroupInfo_Params::_internal_no_cache() const {
  return _impl_.no_cache_;
}
inline bool GetGroupInfo_Params::no_cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfo.Params.no_cache)
  return _internal_no_cache();
}
inline void GetGroupInfo_Params::_internal_set_no_cache(bool value) {
  
  _impl_.no_cache_ = value;
}
inline void GetGroupInfo_Params::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfo.Params.no_cache)
}

// -------------------------------------------------------------------

// GetGroupInfo

// string action = 1;
inline void GetGroupInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfo.action)
}
inline std::string* GetGroupInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupInfo.action)
  return _s;
}
inline const std::string& GetGroupInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupInfo.action)
  return _impl_.action_.Release();
}
inline void GetGroupInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupInfo.action)
}

// .cqhttp.GetGroupInfo.Params params = 2;
inline bool GetGroupInfo::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupInfo::has_params() const {
  return _internal_has_params();
}
inline void GetGroupInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupInfo_Params& GetGroupInfo::_internal_params() const {
  const ::cqhttp::GetGroupInfo_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupInfo_Params&>(
      ::cqhttp::_GetGroupInfo_Params_default_instance_);
}
inline const ::cqhttp::GetGroupInfo_Params& GetGroupInfo::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfo.params)
  return _internal_params();
}
inline void GetGroupInfo::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupInfo_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupInfo.params)
}
inline ::cqhttp::GetGroupInfo_Params* GetGroupInfo::release_params() {
  
  ::cqhttp::GetGroupInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupInfo_Params* GetGroupInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupInfo.params)
  
  ::cqhttp::GetGroupInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupInfo_Params* GetGroupInfo::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupInfo_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupInfo_Params* GetGroupInfo::mutable_params() {
  ::cqhttp::GetGroupInfo_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupInfo.params)
  return _msg;
}
inline void GetGroupInfo::set_allocated_params(::cqhttp::GetGroupInfo_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupInfo.params)
}

// string echo = 3;
inline void GetGroupInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfo.echo)
}
inline std::string* GetGroupInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupInfo.echo)
  return _s;
}
inline const std::string& GetGroupInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupInfo.echo)
}

// -------------------------------------------------------------------

// GetGroupInfoResp

// int64 group_id = 1;
inline void GetGroupInfoResp::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupInfoResp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.group_id)
  return _internal_group_id();
}
inline void GetGroupInfoResp::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupInfoResp::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.group_id)
}

// string group_name = 2;
inline void GetGroupInfoResp::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GetGroupInfoResp::group_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupInfoResp::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.group_name)
}
inline std::string* GetGroupInfoResp::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupInfoResp.group_name)
  return _s;
}
inline const std::string& GetGroupInfoResp::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GetGroupInfoResp::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupInfoResp::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupInfoResp::release_group_name() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupInfoResp.group_name)
  return _impl_.group_name_.Release();
}
inline void GetGroupInfoResp::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupInfoResp.group_name)
}

// string group_memo = 3;
inline void GetGroupInfoResp::clear_group_memo() {
  _impl_.group_memo_.ClearToEmpty();
}
inline const std::string& GetGroupInfoResp::group_memo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.group_memo)
  return _internal_group_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupInfoResp::set_group_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.group_memo)
}
inline std::string* GetGroupInfoResp::mutable_group_memo() {
  std::string* _s = _internal_mutable_group_memo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupInfoResp.group_memo)
  return _s;
}
inline const std::string& GetGroupInfoResp::_internal_group_memo() const {
  return _impl_.group_memo_.Get();
}
inline void GetGroupInfoResp::_internal_set_group_memo(const std::string& value) {
  
  _impl_.group_memo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupInfoResp::_internal_mutable_group_memo() {
  
  return _impl_.group_memo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupInfoResp::release_group_memo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupInfoResp.group_memo)
  return _impl_.group_memo_.Release();
}
inline void GetGroupInfoResp::set_allocated_group_memo(std::string* group_memo) {
  if (group_memo != nullptr) {
    
  } else {
    
  }
  _impl_.group_memo_.SetAllocated(group_memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_memo_.IsDefault()) {
    _impl_.group_memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupInfoResp.group_memo)
}

// uint32 group_create_time = 4;
inline void GetGroupInfoResp::clear_group_create_time() {
  _impl_.group_create_time_ = 0u;
}
inline uint32_t GetGroupInfoResp::_internal_group_create_time() const {
  return _impl_.group_create_time_;
}
inline uint32_t GetGroupInfoResp::group_create_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.group_create_time)
  return _internal_group_create_time();
}
inline void GetGroupInfoResp::_internal_set_group_create_time(uint32_t value) {
  
  _impl_.group_create_time_ = value;
}
inline void GetGroupInfoResp::set_group_create_time(uint32_t value) {
  _internal_set_group_create_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.group_create_time)
}

// uint32 group_level = 5;
inline void GetGroupInfoResp::clear_group_level() {
  _impl_.group_level_ = 0u;
}
inline uint32_t GetGroupInfoResp::_internal_group_level() const {
  return _impl_.group_level_;
}
inline uint32_t GetGroupInfoResp::group_level() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.group_level)
  return _internal_group_level();
}
inline void GetGroupInfoResp::_internal_set_group_level(uint32_t value) {
  
  _impl_.group_level_ = value;
}
inline void GetGroupInfoResp::set_group_level(uint32_t value) {
  _internal_set_group_level(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.group_level)
}

// int32 member_count = 6;
inline void GetGroupInfoResp::clear_member_count() {
  _impl_.member_count_ = 0;
}
inline int32_t GetGroupInfoResp::_internal_member_count() const {
  return _impl_.member_count_;
}
inline int32_t GetGroupInfoResp::member_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.member_count)
  return _internal_member_count();
}
inline void GetGroupInfoResp::_internal_set_member_count(int32_t value) {
  
  _impl_.member_count_ = value;
}
inline void GetGroupInfoResp::set_member_count(int32_t value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.member_count)
}

// int32 max_member_count = 7;
inline void GetGroupInfoResp::clear_max_member_count() {
  _impl_.max_member_count_ = 0;
}
inline int32_t GetGroupInfoResp::_internal_max_member_count() const {
  return _impl_.max_member_count_;
}
inline int32_t GetGroupInfoResp::max_member_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupInfoResp.max_member_count)
  return _internal_max_member_count();
}
inline void GetGroupInfoResp::_internal_set_max_member_count(int32_t value) {
  
  _impl_.max_member_count_ = value;
}
inline void GetGroupInfoResp::set_max_member_count(int32_t value) {
  _internal_set_max_member_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupInfoResp.max_member_count)
}

// -------------------------------------------------------------------

// GetGroupList_Params

// bool no_cache = 1;
inline void GetGroupList_Params::clear_no_cache() {
  _impl_.no_cache_ = false;
}
inline bool GetGroupList_Params::_internal_no_cache() const {
  return _impl_.no_cache_;
}
inline bool GetGroupList_Params::no_cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupList.Params.no_cache)
  return _internal_no_cache();
}
inline void GetGroupList_Params::_internal_set_no_cache(bool value) {
  
  _impl_.no_cache_ = value;
}
inline void GetGroupList_Params::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupList.Params.no_cache)
}

// -------------------------------------------------------------------

// GetGroupList

// string action = 1;
inline void GetGroupList::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupList::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupList.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupList::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupList.action)
}
inline std::string* GetGroupList::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupList.action)
  return _s;
}
inline const std::string& GetGroupList::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupList::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupList::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupList::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupList.action)
  return _impl_.action_.Release();
}
inline void GetGroupList::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupList.action)
}

// .cqhttp.GetGroupList.Params params = 2;
inline bool GetGroupList::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupList::has_params() const {
  return _internal_has_params();
}
inline void GetGroupList::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupList_Params& GetGroupList::_internal_params() const {
  const ::cqhttp::GetGroupList_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupList_Params&>(
      ::cqhttp::_GetGroupList_Params_default_instance_);
}
inline const ::cqhttp::GetGroupList_Params& GetGroupList::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupList.params)
  return _internal_params();
}
inline void GetGroupList::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupList_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupList.params)
}
inline ::cqhttp::GetGroupList_Params* GetGroupList::release_params() {
  
  ::cqhttp::GetGroupList_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupList_Params* GetGroupList::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupList.params)
  
  ::cqhttp::GetGroupList_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupList_Params* GetGroupList::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupList_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupList_Params* GetGroupList::mutable_params() {
  ::cqhttp::GetGroupList_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupList.params)
  return _msg;
}
inline void GetGroupList::set_allocated_params(::cqhttp::GetGroupList_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupList.params)
}

// string echo = 3;
inline void GetGroupList::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupList::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupList.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupList::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupList.echo)
}
inline std::string* GetGroupList::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupList.echo)
  return _s;
}
inline const std::string& GetGroupList::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupList::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupList::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupList::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupList.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupList::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupList.echo)
}

// -------------------------------------------------------------------

// GetGroupListResp

// repeated .cqhttp.GetGroupInfoResp group_list = 1;
inline int GetGroupListResp::_internal_group_list_size() const {
  return _impl_.group_list_.size();
}
inline int GetGroupListResp::group_list_size() const {
  return _internal_group_list_size();
}
inline void GetGroupListResp::clear_group_list() {
  _impl_.group_list_.Clear();
}
inline ::cqhttp::GetGroupInfoResp* GetGroupListResp::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupListResp.group_list)
  return _impl_.group_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupInfoResp >*
GetGroupListResp::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupListResp.group_list)
  return &_impl_.group_list_;
}
inline const ::cqhttp::GetGroupInfoResp& GetGroupListResp::_internal_group_list(int index) const {
  return _impl_.group_list_.Get(index);
}
inline const ::cqhttp::GetGroupInfoResp& GetGroupListResp::group_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupListResp.group_list)
  return _internal_group_list(index);
}
inline ::cqhttp::GetGroupInfoResp* GetGroupListResp::_internal_add_group_list() {
  return _impl_.group_list_.Add();
}
inline ::cqhttp::GetGroupInfoResp* GetGroupListResp::add_group_list() {
  ::cqhttp::GetGroupInfoResp* _add = _internal_add_group_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupListResp.group_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupInfoResp >&
GetGroupListResp::group_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupListResp.group_list)
  return _impl_.group_list_;
}

// -------------------------------------------------------------------

// GetGroupMemberInfo_Params

// int64 group_id = 1;
inline void GetGroupMemberInfo_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupMemberInfo_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupMemberInfo_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfo.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberInfo_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupMemberInfo_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfo.Params.group_id)
}

// int64 user_id = 2;
inline void GetGroupMemberInfo_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetGroupMemberInfo_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetGroupMemberInfo_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfo.Params.user_id)
  return _internal_user_id();
}
inline void GetGroupMemberInfo_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetGroupMemberInfo_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfo.Params.user_id)
}

// bool no_cache = 3;
inline void GetGroupMemberInfo_Params::clear_no_cache() {
  _impl_.no_cache_ = false;
}
inline bool GetGroupMemberInfo_Params::_internal_no_cache() const {
  return _impl_.no_cache_;
}
inline bool GetGroupMemberInfo_Params::no_cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfo.Params.no_cache)
  return _internal_no_cache();
}
inline void GetGroupMemberInfo_Params::_internal_set_no_cache(bool value) {
  
  _impl_.no_cache_ = value;
}
inline void GetGroupMemberInfo_Params::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfo.Params.no_cache)
}

// -------------------------------------------------------------------

// GetGroupMemberInfo

// string action = 1;
inline void GetGroupMemberInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfo.action)
}
inline std::string* GetGroupMemberInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfo.action)
  return _s;
}
inline const std::string& GetGroupMemberInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupMemberInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfo.action)
  return _impl_.action_.Release();
}
inline void GetGroupMemberInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfo.action)
}

// .cqhttp.GetGroupMemberInfo.Params params = 2;
inline bool GetGroupMemberInfo::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupMemberInfo::has_params() const {
  return _internal_has_params();
}
inline void GetGroupMemberInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupMemberInfo_Params& GetGroupMemberInfo::_internal_params() const {
  const ::cqhttp::GetGroupMemberInfo_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupMemberInfo_Params&>(
      ::cqhttp::_GetGroupMemberInfo_Params_default_instance_);
}
inline const ::cqhttp::GetGroupMemberInfo_Params& GetGroupMemberInfo::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfo.params)
  return _internal_params();
}
inline void GetGroupMemberInfo::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupMemberInfo_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupMemberInfo.params)
}
inline ::cqhttp::GetGroupMemberInfo_Params* GetGroupMemberInfo::release_params() {
  
  ::cqhttp::GetGroupMemberInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupMemberInfo_Params* GetGroupMemberInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfo.params)
  
  ::cqhttp::GetGroupMemberInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupMemberInfo_Params* GetGroupMemberInfo::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupMemberInfo_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupMemberInfo_Params* GetGroupMemberInfo::mutable_params() {
  ::cqhttp::GetGroupMemberInfo_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfo.params)
  return _msg;
}
inline void GetGroupMemberInfo::set_allocated_params(::cqhttp::GetGroupMemberInfo_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfo.params)
}

// string echo = 3;
inline void GetGroupMemberInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfo.echo)
}
inline std::string* GetGroupMemberInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfo.echo)
  return _s;
}
inline const std::string& GetGroupMemberInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupMemberInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupMemberInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfo.echo)
}

// -------------------------------------------------------------------

// GetGroupMemberInfoResp

// int64 group_id = 1;
inline void GetGroupMemberInfoResp::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupMemberInfoResp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupMemberInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberInfoResp::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupMemberInfoResp::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.group_id)
}

// int64 user_id = 2;
inline void GetGroupMemberInfoResp::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetGroupMemberInfoResp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetGroupMemberInfoResp::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.user_id)
  return _internal_user_id();
}
inline void GetGroupMemberInfoResp::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetGroupMemberInfoResp::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.user_id)
}

// string nickname = 3;
inline void GetGroupMemberInfoResp::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.nickname)
}
inline std::string* GetGroupMemberInfoResp::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.nickname)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.nickname)
  return _impl_.nickname_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.nickname)
}

// string card = 4;
inline void GetGroupMemberInfoResp::clear_card() {
  _impl_.card_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::card() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.card)
  return _internal_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_card(ArgT0&& arg0, ArgT... args) {
 
 _impl_.card_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.card)
}
inline std::string* GetGroupMemberInfoResp::mutable_card() {
  std::string* _s = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.card)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_card() const {
  return _impl_.card_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_card(const std::string& value) {
  
  _impl_.card_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_card() {
  
  return _impl_.card_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_card() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.card)
  return _impl_.card_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  _impl_.card_.SetAllocated(card, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.card_.IsDefault()) {
    _impl_.card_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.card)
}

// string sex = 5;
inline void GetGroupMemberInfoResp::clear_sex() {
  _impl_.sex_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::sex() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.sex)
  return _internal_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_sex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.sex)
}
inline std::string* GetGroupMemberInfoResp::mutable_sex() {
  std::string* _s = _internal_mutable_sex();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.sex)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_sex() const {
  return _impl_.sex_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_sex(const std::string& value) {
  
  _impl_.sex_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_sex() {
  
  return _impl_.sex_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_sex() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.sex)
  return _impl_.sex_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  _impl_.sex_.SetAllocated(sex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sex_.IsDefault()) {
    _impl_.sex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.sex)
}

// int32 age = 6;
inline void GetGroupMemberInfoResp::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t GetGroupMemberInfoResp::_internal_age() const {
  return _impl_.age_;
}
inline int32_t GetGroupMemberInfoResp::age() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.age)
  return _internal_age();
}
inline void GetGroupMemberInfoResp::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void GetGroupMemberInfoResp::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.age)
}

// string area = 7;
inline void GetGroupMemberInfoResp::clear_area() {
  _impl_.area_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::area() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.area)
  return _internal_area();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_area(ArgT0&& arg0, ArgT... args) {
 
 _impl_.area_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.area)
}
inline std::string* GetGroupMemberInfoResp::mutable_area() {
  std::string* _s = _internal_mutable_area();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.area)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_area() const {
  return _impl_.area_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_area(const std::string& value) {
  
  _impl_.area_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_area() {
  
  return _impl_.area_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_area() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.area)
  return _impl_.area_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  _impl_.area_.SetAllocated(area, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.area_.IsDefault()) {
    _impl_.area_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.area)
}

// int32 join_time = 8;
inline void GetGroupMemberInfoResp::clear_join_time() {
  _impl_.join_time_ = 0;
}
inline int32_t GetGroupMemberInfoResp::_internal_join_time() const {
  return _impl_.join_time_;
}
inline int32_t GetGroupMemberInfoResp::join_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.join_time)
  return _internal_join_time();
}
inline void GetGroupMemberInfoResp::_internal_set_join_time(int32_t value) {
  
  _impl_.join_time_ = value;
}
inline void GetGroupMemberInfoResp::set_join_time(int32_t value) {
  _internal_set_join_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.join_time)
}

// int32 last_sent_time = 9;
inline void GetGroupMemberInfoResp::clear_last_sent_time() {
  _impl_.last_sent_time_ = 0;
}
inline int32_t GetGroupMemberInfoResp::_internal_last_sent_time() const {
  return _impl_.last_sent_time_;
}
inline int32_t GetGroupMemberInfoResp::last_sent_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.last_sent_time)
  return _internal_last_sent_time();
}
inline void GetGroupMemberInfoResp::_internal_set_last_sent_time(int32_t value) {
  
  _impl_.last_sent_time_ = value;
}
inline void GetGroupMemberInfoResp::set_last_sent_time(int32_t value) {
  _internal_set_last_sent_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.last_sent_time)
}

// string level = 10;
inline void GetGroupMemberInfoResp::clear_level() {
  _impl_.level_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::level() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.level)
  return _internal_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_level(ArgT0&& arg0, ArgT... args) {
 
 _impl_.level_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.level)
}
inline std::string* GetGroupMemberInfoResp::mutable_level() {
  std::string* _s = _internal_mutable_level();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.level)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_level() const {
  return _impl_.level_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_level(const std::string& value) {
  
  _impl_.level_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_level() {
  
  return _impl_.level_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_level() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.level)
  return _impl_.level_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  _impl_.level_.SetAllocated(level, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.level_.IsDefault()) {
    _impl_.level_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.level)
}

// string role = 11;
inline void GetGroupMemberInfoResp::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::role() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.role)
}
inline std::string* GetGroupMemberInfoResp::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.role)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_role() const {
  return _impl_.role_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_role() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.role)
  return _impl_.role_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.role)
}

// bool unfriendly = 12;
inline void GetGroupMemberInfoResp::clear_unfriendly() {
  _impl_.unfriendly_ = false;
}
inline bool GetGroupMemberInfoResp::_internal_unfriendly() const {
  return _impl_.unfriendly_;
}
inline bool GetGroupMemberInfoResp::unfriendly() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.unfriendly)
  return _internal_unfriendly();
}
inline void GetGroupMemberInfoResp::_internal_set_unfriendly(bool value) {
  
  _impl_.unfriendly_ = value;
}
inline void GetGroupMemberInfoResp::set_unfriendly(bool value) {
  _internal_set_unfriendly(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.unfriendly)
}

// string title = 13;
inline void GetGroupMemberInfoResp::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& GetGroupMemberInfoResp::title() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberInfoResp::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.title)
}
inline std::string* GetGroupMemberInfoResp::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberInfoResp.title)
  return _s;
}
inline const std::string& GetGroupMemberInfoResp::_internal_title() const {
  return _impl_.title_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberInfoResp::release_title() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberInfoResp.title)
  return _impl_.title_.Release();
}
inline void GetGroupMemberInfoResp::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberInfoResp.title)
}

// int64 title_expire_time = 14;
inline void GetGroupMemberInfoResp::clear_title_expire_time() {
  _impl_.title_expire_time_ = int64_t{0};
}
inline int64_t GetGroupMemberInfoResp::_internal_title_expire_time() const {
  return _impl_.title_expire_time_;
}
inline int64_t GetGroupMemberInfoResp::title_expire_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.title_expire_time)
  return _internal_title_expire_time();
}
inline void GetGroupMemberInfoResp::_internal_set_title_expire_time(int64_t value) {
  
  _impl_.title_expire_time_ = value;
}
inline void GetGroupMemberInfoResp::set_title_expire_time(int64_t value) {
  _internal_set_title_expire_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.title_expire_time)
}

// bool card_changeable = 15;
inline void GetGroupMemberInfoResp::clear_card_changeable() {
  _impl_.card_changeable_ = false;
}
inline bool GetGroupMemberInfoResp::_internal_card_changeable() const {
  return _impl_.card_changeable_;
}
inline bool GetGroupMemberInfoResp::card_changeable() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.card_changeable)
  return _internal_card_changeable();
}
inline void GetGroupMemberInfoResp::_internal_set_card_changeable(bool value) {
  
  _impl_.card_changeable_ = value;
}
inline void GetGroupMemberInfoResp::set_card_changeable(bool value) {
  _internal_set_card_changeable(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.card_changeable)
}

// int64 shut_up_timestamp = 16;
inline void GetGroupMemberInfoResp::clear_shut_up_timestamp() {
  _impl_.shut_up_timestamp_ = int64_t{0};
}
inline int64_t GetGroupMemberInfoResp::_internal_shut_up_timestamp() const {
  return _impl_.shut_up_timestamp_;
}
inline int64_t GetGroupMemberInfoResp::shut_up_timestamp() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberInfoResp.shut_up_timestamp)
  return _internal_shut_up_timestamp();
}
inline void GetGroupMemberInfoResp::_internal_set_shut_up_timestamp(int64_t value) {
  
  _impl_.shut_up_timestamp_ = value;
}
inline void GetGroupMemberInfoResp::set_shut_up_timestamp(int64_t value) {
  _internal_set_shut_up_timestamp(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberInfoResp.shut_up_timestamp)
}

// -------------------------------------------------------------------

// GetGroupMemberList_Params

// int64 group_id = 1;
inline void GetGroupMemberList_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupMemberList_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupMemberList_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberList.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberList_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupMemberList_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberList.Params.group_id)
}

// bool no_cache = 2;
inline void GetGroupMemberList_Params::clear_no_cache() {
  _impl_.no_cache_ = false;
}
inline bool GetGroupMemberList_Params::_internal_no_cache() const {
  return _impl_.no_cache_;
}
inline bool GetGroupMemberList_Params::no_cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberList.Params.no_cache)
  return _internal_no_cache();
}
inline void GetGroupMemberList_Params::_internal_set_no_cache(bool value) {
  
  _impl_.no_cache_ = value;
}
inline void GetGroupMemberList_Params::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberList.Params.no_cache)
}

// -------------------------------------------------------------------

// GetGroupMemberList

// string action = 1;
inline void GetGroupMemberList::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupMemberList::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberList.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberList::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberList.action)
}
inline std::string* GetGroupMemberList::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberList.action)
  return _s;
}
inline const std::string& GetGroupMemberList::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupMemberList::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberList::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberList::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberList.action)
  return _impl_.action_.Release();
}
inline void GetGroupMemberList::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberList.action)
}

// .cqhttp.GetGroupMemberList.Params params = 2;
inline bool GetGroupMemberList::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupMemberList::has_params() const {
  return _internal_has_params();
}
inline void GetGroupMemberList::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupMemberList_Params& GetGroupMemberList::_internal_params() const {
  const ::cqhttp::GetGroupMemberList_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupMemberList_Params&>(
      ::cqhttp::_GetGroupMemberList_Params_default_instance_);
}
inline const ::cqhttp::GetGroupMemberList_Params& GetGroupMemberList::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberList.params)
  return _internal_params();
}
inline void GetGroupMemberList::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupMemberList_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupMemberList.params)
}
inline ::cqhttp::GetGroupMemberList_Params* GetGroupMemberList::release_params() {
  
  ::cqhttp::GetGroupMemberList_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupMemberList_Params* GetGroupMemberList::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberList.params)
  
  ::cqhttp::GetGroupMemberList_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupMemberList_Params* GetGroupMemberList::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupMemberList_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupMemberList_Params* GetGroupMemberList::mutable_params() {
  ::cqhttp::GetGroupMemberList_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberList.params)
  return _msg;
}
inline void GetGroupMemberList::set_allocated_params(::cqhttp::GetGroupMemberList_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberList.params)
}

// string echo = 3;
inline void GetGroupMemberList::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupMemberList::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberList.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberList::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMemberList.echo)
}
inline std::string* GetGroupMemberList::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberList.echo)
  return _s;
}
inline const std::string& GetGroupMemberList::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupMemberList::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberList::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMemberList::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMemberList.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupMemberList::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMemberList.echo)
}

// -------------------------------------------------------------------

// GetGroupMemberListResp

// repeated .cqhttp.GetGroupMemberInfoResp group_member_list = 1;
inline int GetGroupMemberListResp::_internal_group_member_list_size() const {
  return _impl_.group_member_list_.size();
}
inline int GetGroupMemberListResp::group_member_list_size() const {
  return _internal_group_member_list_size();
}
inline void GetGroupMemberListResp::clear_group_member_list() {
  _impl_.group_member_list_.Clear();
}
inline ::cqhttp::GetGroupMemberInfoResp* GetGroupMemberListResp::mutable_group_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMemberListResp.group_member_list)
  return _impl_.group_member_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupMemberInfoResp >*
GetGroupMemberListResp::mutable_group_member_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupMemberListResp.group_member_list)
  return &_impl_.group_member_list_;
}
inline const ::cqhttp::GetGroupMemberInfoResp& GetGroupMemberListResp::_internal_group_member_list(int index) const {
  return _impl_.group_member_list_.Get(index);
}
inline const ::cqhttp::GetGroupMemberInfoResp& GetGroupMemberListResp::group_member_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMemberListResp.group_member_list)
  return _internal_group_member_list(index);
}
inline ::cqhttp::GetGroupMemberInfoResp* GetGroupMemberListResp::_internal_add_group_member_list() {
  return _impl_.group_member_list_.Add();
}
inline ::cqhttp::GetGroupMemberInfoResp* GetGroupMemberListResp::add_group_member_list() {
  ::cqhttp::GetGroupMemberInfoResp* _add = _internal_add_group_member_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupMemberListResp.group_member_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupMemberInfoResp >&
GetGroupMemberListResp::group_member_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupMemberListResp.group_member_list)
  return _impl_.group_member_list_;
}

// -------------------------------------------------------------------

// GetGroupHonorInfo_Params

// int64 group_id = 1;
inline void GetGroupHonorInfo_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupHonorInfo_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupHonorInfo_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfo.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupHonorInfo_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupHonorInfo_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfo.Params.group_id)
}

// string type = 2;
inline void GetGroupHonorInfo_Params::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& GetGroupHonorInfo_Params::type() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfo.Params.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupHonorInfo_Params::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfo.Params.type)
}
inline std::string* GetGroupHonorInfo_Params::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfo.Params.type)
  return _s;
}
inline const std::string& GetGroupHonorInfo_Params::_internal_type() const {
  return _impl_.type_.Get();
}
inline void GetGroupHonorInfo_Params::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfo_Params::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfo_Params::release_type() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfo.Params.type)
  return _impl_.type_.Release();
}
inline void GetGroupHonorInfo_Params::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfo.Params.type)
}

// -------------------------------------------------------------------

// GetGroupHonorInfo

// string action = 1;
inline void GetGroupHonorInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupHonorInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupHonorInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfo.action)
}
inline std::string* GetGroupHonorInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfo.action)
  return _s;
}
inline const std::string& GetGroupHonorInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupHonorInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfo.action)
  return _impl_.action_.Release();
}
inline void GetGroupHonorInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfo.action)
}

// .cqhttp.GetGroupHonorInfo.Params params = 2;
inline bool GetGroupHonorInfo::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupHonorInfo::has_params() const {
  return _internal_has_params();
}
inline void GetGroupHonorInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupHonorInfo_Params& GetGroupHonorInfo::_internal_params() const {
  const ::cqhttp::GetGroupHonorInfo_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupHonorInfo_Params&>(
      ::cqhttp::_GetGroupHonorInfo_Params_default_instance_);
}
inline const ::cqhttp::GetGroupHonorInfo_Params& GetGroupHonorInfo::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfo.params)
  return _internal_params();
}
inline void GetGroupHonorInfo::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupHonorInfo_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupHonorInfo.params)
}
inline ::cqhttp::GetGroupHonorInfo_Params* GetGroupHonorInfo::release_params() {
  
  ::cqhttp::GetGroupHonorInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupHonorInfo_Params* GetGroupHonorInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfo.params)
  
  ::cqhttp::GetGroupHonorInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupHonorInfo_Params* GetGroupHonorInfo::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupHonorInfo_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupHonorInfo_Params* GetGroupHonorInfo::mutable_params() {
  ::cqhttp::GetGroupHonorInfo_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfo.params)
  return _msg;
}
inline void GetGroupHonorInfo::set_allocated_params(::cqhttp::GetGroupHonorInfo_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfo.params)
}

// string echo = 3;
inline void GetGroupHonorInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupHonorInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupHonorInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfo.echo)
}
inline std::string* GetGroupHonorInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfo.echo)
  return _s;
}
inline const std::string& GetGroupHonorInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupHonorInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupHonorInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfo.echo)
}

// -------------------------------------------------------------------

// GetGroupHonorInfoResp_Talkative

// int64 user_id = 1;
inline void GetGroupHonorInfoResp_Talkative::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t GetGroupHonorInfoResp_Talkative::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t GetGroupHonorInfoResp_Talkative::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.Talkative.user_id)
  return _internal_user_id();
}
inline void GetGroupHonorInfoResp_Talkative::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetGroupHonorInfoResp_Talkative::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfoResp.Talkative.user_id)
}

// string nickname = 2;
inline void GetGroupHonorInfoResp_Talkative::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GetGroupHonorInfoResp_Talkative::nickname() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.Talkative.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupHonorInfoResp_Talkative::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfoResp.Talkative.nickname)
}
inline std::string* GetGroupHonorInfoResp_Talkative::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.Talkative.nickname)
  return _s;
}
inline const std::string& GetGroupHonorInfoResp_Talkative::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GetGroupHonorInfoResp_Talkative::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfoResp_Talkative::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfoResp_Talkative::release_nickname() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfoResp.Talkative.nickname)
  return _impl_.nickname_.Release();
}
inline void GetGroupHonorInfoResp_Talkative::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfoResp.Talkative.nickname)
}

// string avatar = 3;
inline void GetGroupHonorInfoResp_Talkative::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& GetGroupHonorInfoResp_Talkative::avatar() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.Talkative.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupHonorInfoResp_Talkative::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfoResp.Talkative.avatar)
}
inline std::string* GetGroupHonorInfoResp_Talkative::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.Talkative.avatar)
  return _s;
}
inline const std::string& GetGroupHonorInfoResp_Talkative::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void GetGroupHonorInfoResp_Talkative::_internal_set_avatar(const std::string& value) {
  
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfoResp_Talkative::_internal_mutable_avatar() {
  
  return _impl_.avatar_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfoResp_Talkative::release_avatar() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfoResp.Talkative.avatar)
  return _impl_.avatar_.Release();
}
inline void GetGroupHonorInfoResp_Talkative::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_.SetAllocated(avatar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_.IsDefault()) {
    _impl_.avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfoResp.Talkative.avatar)
}

// int32 day_count = 4;
inline void GetGroupHonorInfoResp_Talkative::clear_day_count() {
  _impl_.day_count_ = 0;
}
inline int32_t GetGroupHonorInfoResp_Talkative::_internal_day_count() const {
  return _impl_.day_count_;
}
inline int32_t GetGroupHonorInfoResp_Talkative::day_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.Talkative.day_count)
  return _internal_day_count();
}
inline void GetGroupHonorInfoResp_Talkative::_internal_set_day_count(int32_t value) {
  
  _impl_.day_count_ = value;
}
inline void GetGroupHonorInfoResp_Talkative::set_day_count(int32_t value) {
  _internal_set_day_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfoResp.Talkative.day_count)
}

// string description = 5;
inline void GetGroupHonorInfoResp_Talkative::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& GetGroupHonorInfoResp_Talkative::description() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.Talkative.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupHonorInfoResp_Talkative::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfoResp.Talkative.description)
}
inline std::string* GetGroupHonorInfoResp_Talkative::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.Talkative.description)
  return _s;
}
inline const std::string& GetGroupHonorInfoResp_Talkative::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GetGroupHonorInfoResp_Talkative::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfoResp_Talkative::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupHonorInfoResp_Talkative::release_description() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfoResp.Talkative.description)
  return _impl_.description_.Release();
}
inline void GetGroupHonorInfoResp_Talkative::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfoResp.Talkative.description)
}

// -------------------------------------------------------------------

// GetGroupHonorInfoResp

// int64 group_id = 1;
inline void GetGroupHonorInfoResp::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupHonorInfoResp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupHonorInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.group_id)
  return _internal_group_id();
}
inline void GetGroupHonorInfoResp::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupHonorInfoResp::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupHonorInfoResp.group_id)
}

// .cqhttp.GetGroupHonorInfoResp.Talkative current_talkative = 2;
inline bool GetGroupHonorInfoResp::_internal_has_current_talkative() const {
  return this != internal_default_instance() && _impl_.current_talkative_ != nullptr;
}
inline bool GetGroupHonorInfoResp::has_current_talkative() const {
  return _internal_has_current_talkative();
}
inline void GetGroupHonorInfoResp::clear_current_talkative() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_talkative_ != nullptr) {
    delete _impl_.current_talkative_;
  }
  _impl_.current_talkative_ = nullptr;
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::_internal_current_talkative() const {
  const ::cqhttp::GetGroupHonorInfoResp_Talkative* p = _impl_.current_talkative_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupHonorInfoResp_Talkative&>(
      ::cqhttp::_GetGroupHonorInfoResp_Talkative_default_instance_);
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::current_talkative() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.current_talkative)
  return _internal_current_talkative();
}
inline void GetGroupHonorInfoResp::unsafe_arena_set_allocated_current_talkative(
    ::cqhttp::GetGroupHonorInfoResp_Talkative* current_talkative) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_talkative_);
  }
  _impl_.current_talkative_ = current_talkative;
  if (current_talkative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupHonorInfoResp.current_talkative)
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::release_current_talkative() {
  
  ::cqhttp::GetGroupHonorInfoResp_Talkative* temp = _impl_.current_talkative_;
  _impl_.current_talkative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::unsafe_arena_release_current_talkative() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupHonorInfoResp.current_talkative)
  
  ::cqhttp::GetGroupHonorInfoResp_Talkative* temp = _impl_.current_talkative_;
  _impl_.current_talkative_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::_internal_mutable_current_talkative() {
  
  if (_impl_.current_talkative_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupHonorInfoResp_Talkative>(GetArenaForAllocation());
    _impl_.current_talkative_ = p;
  }
  return _impl_.current_talkative_;
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::mutable_current_talkative() {
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _msg = _internal_mutable_current_talkative();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.current_talkative)
  return _msg;
}
inline void GetGroupHonorInfoResp::set_allocated_current_talkative(::cqhttp::GetGroupHonorInfoResp_Talkative* current_talkative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.current_talkative_;
  }
  if (current_talkative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_talkative);
    if (message_arena != submessage_arena) {
      current_talkative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_talkative, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_talkative_ = current_talkative;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupHonorInfoResp.current_talkative)
}

// repeated .cqhttp.GetGroupHonorInfoResp.Talkative talkative_list = 3;
inline int GetGroupHonorInfoResp::_internal_talkative_list_size() const {
  return _impl_.talkative_list_.size();
}
inline int GetGroupHonorInfoResp::talkative_list_size() const {
  return _internal_talkative_list_size();
}
inline void GetGroupHonorInfoResp::clear_talkative_list() {
  _impl_.talkative_list_.Clear();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::mutable_talkative_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.talkative_list)
  return _impl_.talkative_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
GetGroupHonorInfoResp::mutable_talkative_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupHonorInfoResp.talkative_list)
  return &_impl_.talkative_list_;
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::_internal_talkative_list(int index) const {
  return _impl_.talkative_list_.Get(index);
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::talkative_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.talkative_list)
  return _internal_talkative_list(index);
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::_internal_add_talkative_list() {
  return _impl_.talkative_list_.Add();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::add_talkative_list() {
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _add = _internal_add_talkative_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupHonorInfoResp.talkative_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
GetGroupHonorInfoResp::talkative_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupHonorInfoResp.talkative_list)
  return _impl_.talkative_list_;
}

// repeated .cqhttp.GetGroupHonorInfoResp.Talkative performer_list = 4;
inline int GetGroupHonorInfoResp::_internal_performer_list_size() const {
  return _impl_.performer_list_.size();
}
inline int GetGroupHonorInfoResp::performer_list_size() const {
  return _internal_performer_list_size();
}
inline void GetGroupHonorInfoResp::clear_performer_list() {
  _impl_.performer_list_.Clear();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::mutable_performer_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.performer_list)
  return _impl_.performer_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
GetGroupHonorInfoResp::mutable_performer_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupHonorInfoResp.performer_list)
  return &_impl_.performer_list_;
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::_internal_performer_list(int index) const {
  return _impl_.performer_list_.Get(index);
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::performer_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.performer_list)
  return _internal_performer_list(index);
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::_internal_add_performer_list() {
  return _impl_.performer_list_.Add();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::add_performer_list() {
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _add = _internal_add_performer_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupHonorInfoResp.performer_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
GetGroupHonorInfoResp::performer_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupHonorInfoResp.performer_list)
  return _impl_.performer_list_;
}

// repeated .cqhttp.GetGroupHonorInfoResp.Talkative legend_list = 5;
inline int GetGroupHonorInfoResp::_internal_legend_list_size() const {
  return _impl_.legend_list_.size();
}
inline int GetGroupHonorInfoResp::legend_list_size() const {
  return _internal_legend_list_size();
}
inline void GetGroupHonorInfoResp::clear_legend_list() {
  _impl_.legend_list_.Clear();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::mutable_legend_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.legend_list)
  return _impl_.legend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
GetGroupHonorInfoResp::mutable_legend_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupHonorInfoResp.legend_list)
  return &_impl_.legend_list_;
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::_internal_legend_list(int index) const {
  return _impl_.legend_list_.Get(index);
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::legend_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.legend_list)
  return _internal_legend_list(index);
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::_internal_add_legend_list() {
  return _impl_.legend_list_.Add();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::add_legend_list() {
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _add = _internal_add_legend_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupHonorInfoResp.legend_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
GetGroupHonorInfoResp::legend_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupHonorInfoResp.legend_list)
  return _impl_.legend_list_;
}

// repeated .cqhttp.GetGroupHonorInfoResp.Talkative strong_newbie_list = 6;
inline int GetGroupHonorInfoResp::_internal_strong_newbie_list_size() const {
  return _impl_.strong_newbie_list_.size();
}
inline int GetGroupHonorInfoResp::strong_newbie_list_size() const {
  return _internal_strong_newbie_list_size();
}
inline void GetGroupHonorInfoResp::clear_strong_newbie_list() {
  _impl_.strong_newbie_list_.Clear();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::mutable_strong_newbie_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.strong_newbie_list)
  return _impl_.strong_newbie_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
GetGroupHonorInfoResp::mutable_strong_newbie_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupHonorInfoResp.strong_newbie_list)
  return &_impl_.strong_newbie_list_;
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::_internal_strong_newbie_list(int index) const {
  return _impl_.strong_newbie_list_.Get(index);
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::strong_newbie_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.strong_newbie_list)
  return _internal_strong_newbie_list(index);
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::_internal_add_strong_newbie_list() {
  return _impl_.strong_newbie_list_.Add();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::add_strong_newbie_list() {
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _add = _internal_add_strong_newbie_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupHonorInfoResp.strong_newbie_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
GetGroupHonorInfoResp::strong_newbie_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupHonorInfoResp.strong_newbie_list)
  return _impl_.strong_newbie_list_;
}

// repeated .cqhttp.GetGroupHonorInfoResp.Talkative emotion_list = 7;
inline int GetGroupHonorInfoResp::_internal_emotion_list_size() const {
  return _impl_.emotion_list_.size();
}
inline int GetGroupHonorInfoResp::emotion_list_size() const {
  return _internal_emotion_list_size();
}
inline void GetGroupHonorInfoResp::clear_emotion_list() {
  _impl_.emotion_list_.Clear();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::mutable_emotion_list(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupHonorInfoResp.emotion_list)
  return _impl_.emotion_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >*
GetGroupHonorInfoResp::mutable_emotion_list() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupHonorInfoResp.emotion_list)
  return &_impl_.emotion_list_;
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::_internal_emotion_list(int index) const {
  return _impl_.emotion_list_.Get(index);
}
inline const ::cqhttp::GetGroupHonorInfoResp_Talkative& GetGroupHonorInfoResp::emotion_list(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupHonorInfoResp.emotion_list)
  return _internal_emotion_list(index);
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::_internal_add_emotion_list() {
  return _impl_.emotion_list_.Add();
}
inline ::cqhttp::GetGroupHonorInfoResp_Talkative* GetGroupHonorInfoResp::add_emotion_list() {
  ::cqhttp::GetGroupHonorInfoResp_Talkative* _add = _internal_add_emotion_list();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupHonorInfoResp.emotion_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupHonorInfoResp_Talkative >&
GetGroupHonorInfoResp::emotion_list() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupHonorInfoResp.emotion_list)
  return _impl_.emotion_list_;
}

// -------------------------------------------------------------------

// GetCoolies_Params

// string domain = 1;
inline void GetCoolies_Params::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& GetCoolies_Params::domain() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCoolies.Params.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCoolies_Params::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCoolies.Params.domain)
}
inline std::string* GetCoolies_Params::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCoolies.Params.domain)
  return _s;
}
inline const std::string& GetCoolies_Params::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void GetCoolies_Params::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCoolies_Params::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCoolies_Params::release_domain() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCoolies.Params.domain)
  return _impl_.domain_.Release();
}
inline void GetCoolies_Params::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCoolies.Params.domain)
}

// -------------------------------------------------------------------

// GetCoolies

// string action = 1;
inline void GetCoolies::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetCoolies::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCoolies.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCoolies::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCoolies.action)
}
inline std::string* GetCoolies::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCoolies.action)
  return _s;
}
inline const std::string& GetCoolies::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetCoolies::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCoolies::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCoolies::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCoolies.action)
  return _impl_.action_.Release();
}
inline void GetCoolies::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCoolies.action)
}

// .cqhttp.GetCoolies.Params params = 2;
inline bool GetCoolies::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetCoolies::has_params() const {
  return _internal_has_params();
}
inline void GetCoolies::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetCoolies_Params& GetCoolies::_internal_params() const {
  const ::cqhttp::GetCoolies_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetCoolies_Params&>(
      ::cqhttp::_GetCoolies_Params_default_instance_);
}
inline const ::cqhttp::GetCoolies_Params& GetCoolies::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCoolies.params)
  return _internal_params();
}
inline void GetCoolies::unsafe_arena_set_allocated_params(
    ::cqhttp::GetCoolies_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetCoolies.params)
}
inline ::cqhttp::GetCoolies_Params* GetCoolies::release_params() {
  
  ::cqhttp::GetCoolies_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetCoolies_Params* GetCoolies::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCoolies.params)
  
  ::cqhttp::GetCoolies_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetCoolies_Params* GetCoolies::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetCoolies_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetCoolies_Params* GetCoolies::mutable_params() {
  ::cqhttp::GetCoolies_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCoolies.params)
  return _msg;
}
inline void GetCoolies::set_allocated_params(::cqhttp::GetCoolies_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCoolies.params)
}

// string echo = 3;
inline void GetCoolies::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetCoolies::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCoolies.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCoolies::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCoolies.echo)
}
inline std::string* GetCoolies::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCoolies.echo)
  return _s;
}
inline const std::string& GetCoolies::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetCoolies::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCoolies::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCoolies::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCoolies.echo)
  return _impl_.echo_.Release();
}
inline void GetCoolies::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCoolies.echo)
}

// -------------------------------------------------------------------

// GetCooliesResp

// string cookies = 1;
inline void GetCooliesResp::clear_cookies() {
  _impl_.cookies_.ClearToEmpty();
}
inline const std::string& GetCooliesResp::cookies() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCooliesResp.cookies)
  return _internal_cookies();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCooliesResp::set_cookies(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cookies_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCooliesResp.cookies)
}
inline std::string* GetCooliesResp::mutable_cookies() {
  std::string* _s = _internal_mutable_cookies();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCooliesResp.cookies)
  return _s;
}
inline const std::string& GetCooliesResp::_internal_cookies() const {
  return _impl_.cookies_.Get();
}
inline void GetCooliesResp::_internal_set_cookies(const std::string& value) {
  
  _impl_.cookies_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCooliesResp::_internal_mutable_cookies() {
  
  return _impl_.cookies_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCooliesResp::release_cookies() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCooliesResp.cookies)
  return _impl_.cookies_.Release();
}
inline void GetCooliesResp::set_allocated_cookies(std::string* cookies) {
  if (cookies != nullptr) {
    
  } else {
    
  }
  _impl_.cookies_.SetAllocated(cookies, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cookies_.IsDefault()) {
    _impl_.cookies_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCooliesResp.cookies)
}

// -------------------------------------------------------------------

// GetCsrfToken

// string action = 1;
inline void GetCsrfToken::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetCsrfToken::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCsrfToken.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCsrfToken::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCsrfToken.action)
}
inline std::string* GetCsrfToken::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCsrfToken.action)
  return _s;
}
inline const std::string& GetCsrfToken::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetCsrfToken::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCsrfToken::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCsrfToken::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCsrfToken.action)
  return _impl_.action_.Release();
}
inline void GetCsrfToken::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCsrfToken.action)
}

// string echo = 2;
inline void GetCsrfToken::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetCsrfToken::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCsrfToken.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCsrfToken::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCsrfToken.echo)
}
inline std::string* GetCsrfToken::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCsrfToken.echo)
  return _s;
}
inline const std::string& GetCsrfToken::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetCsrfToken::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCsrfToken::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCsrfToken::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCsrfToken.echo)
  return _impl_.echo_.Release();
}
inline void GetCsrfToken::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCsrfToken.echo)
}

// -------------------------------------------------------------------

// GetCsrfTokenResp

// int32 token = 1;
inline void GetCsrfTokenResp::clear_token() {
  _impl_.token_ = 0;
}
inline int32_t GetCsrfTokenResp::_internal_token() const {
  return _impl_.token_;
}
inline int32_t GetCsrfTokenResp::token() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCsrfTokenResp.token)
  return _internal_token();
}
inline void GetCsrfTokenResp::_internal_set_token(int32_t value) {
  
  _impl_.token_ = value;
}
inline void GetCsrfTokenResp::set_token(int32_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetCsrfTokenResp.token)
}

// -------------------------------------------------------------------

// GetCredentials_Params

// string domain = 1;
inline void GetCredentials_Params::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& GetCredentials_Params::domain() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCredentials.Params.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCredentials_Params::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCredentials.Params.domain)
}
inline std::string* GetCredentials_Params::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCredentials.Params.domain)
  return _s;
}
inline const std::string& GetCredentials_Params::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void GetCredentials_Params::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCredentials_Params::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCredentials_Params::release_domain() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCredentials.Params.domain)
  return _impl_.domain_.Release();
}
inline void GetCredentials_Params::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCredentials.Params.domain)
}

// -------------------------------------------------------------------

// GetCredentials

// string action = 1;
inline void GetCredentials::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetCredentials::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCredentials.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCredentials::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCredentials.action)
}
inline std::string* GetCredentials::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCredentials.action)
  return _s;
}
inline const std::string& GetCredentials::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetCredentials::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCredentials::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCredentials::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCredentials.action)
  return _impl_.action_.Release();
}
inline void GetCredentials::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCredentials.action)
}

// .cqhttp.GetCredentials.Params params = 2;
inline bool GetCredentials::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetCredentials::has_params() const {
  return _internal_has_params();
}
inline void GetCredentials::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetCredentials_Params& GetCredentials::_internal_params() const {
  const ::cqhttp::GetCredentials_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetCredentials_Params&>(
      ::cqhttp::_GetCredentials_Params_default_instance_);
}
inline const ::cqhttp::GetCredentials_Params& GetCredentials::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCredentials.params)
  return _internal_params();
}
inline void GetCredentials::unsafe_arena_set_allocated_params(
    ::cqhttp::GetCredentials_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetCredentials.params)
}
inline ::cqhttp::GetCredentials_Params* GetCredentials::release_params() {
  
  ::cqhttp::GetCredentials_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetCredentials_Params* GetCredentials::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCredentials.params)
  
  ::cqhttp::GetCredentials_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetCredentials_Params* GetCredentials::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetCredentials_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetCredentials_Params* GetCredentials::mutable_params() {
  ::cqhttp::GetCredentials_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCredentials.params)
  return _msg;
}
inline void GetCredentials::set_allocated_params(::cqhttp::GetCredentials_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCredentials.params)
}

// string echo = 3;
inline void GetCredentials::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetCredentials::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCredentials.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCredentials::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCredentials.echo)
}
inline std::string* GetCredentials::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCredentials.echo)
  return _s;
}
inline const std::string& GetCredentials::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetCredentials::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCredentials::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCredentials::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCredentials.echo)
  return _impl_.echo_.Release();
}
inline void GetCredentials::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCredentials.echo)
}

// -------------------------------------------------------------------

// GetCredentialsResp

// string cookies = 1;
inline void GetCredentialsResp::clear_cookies() {
  _impl_.cookies_.ClearToEmpty();
}
inline const std::string& GetCredentialsResp::cookies() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCredentialsResp.cookies)
  return _internal_cookies();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCredentialsResp::set_cookies(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cookies_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetCredentialsResp.cookies)
}
inline std::string* GetCredentialsResp::mutable_cookies() {
  std::string* _s = _internal_mutable_cookies();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetCredentialsResp.cookies)
  return _s;
}
inline const std::string& GetCredentialsResp::_internal_cookies() const {
  return _impl_.cookies_.Get();
}
inline void GetCredentialsResp::_internal_set_cookies(const std::string& value) {
  
  _impl_.cookies_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCredentialsResp::_internal_mutable_cookies() {
  
  return _impl_.cookies_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCredentialsResp::release_cookies() {
  // @@protoc_insertion_point(field_release:cqhttp.GetCredentialsResp.cookies)
  return _impl_.cookies_.Release();
}
inline void GetCredentialsResp::set_allocated_cookies(std::string* cookies) {
  if (cookies != nullptr) {
    
  } else {
    
  }
  _impl_.cookies_.SetAllocated(cookies, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cookies_.IsDefault()) {
    _impl_.cookies_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetCredentialsResp.cookies)
}

// int32 csrf_token = 2;
inline void GetCredentialsResp::clear_csrf_token() {
  _impl_.csrf_token_ = 0;
}
inline int32_t GetCredentialsResp::_internal_csrf_token() const {
  return _impl_.csrf_token_;
}
inline int32_t GetCredentialsResp::csrf_token() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetCredentialsResp.csrf_token)
  return _internal_csrf_token();
}
inline void GetCredentialsResp::_internal_set_csrf_token(int32_t value) {
  
  _impl_.csrf_token_ = value;
}
inline void GetCredentialsResp::set_csrf_token(int32_t value) {
  _internal_set_csrf_token(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetCredentialsResp.csrf_token)
}

// -------------------------------------------------------------------

// GetRecord_Params

// string file = 1;
inline void GetRecord_Params::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& GetRecord_Params::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetRecord.Params.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord_Params::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetRecord.Params.file)
}
inline std::string* GetRecord_Params::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetRecord.Params.file)
  return _s;
}
inline const std::string& GetRecord_Params::_internal_file() const {
  return _impl_.file_.Get();
}
inline void GetRecord_Params::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord_Params::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord_Params::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.GetRecord.Params.file)
  return _impl_.file_.Release();
}
inline void GetRecord_Params::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetRecord.Params.file)
}

// string out_format = 2;
inline void GetRecord_Params::clear_out_format() {
  _impl_.out_format_.ClearToEmpty();
}
inline const std::string& GetRecord_Params::out_format() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetRecord.Params.out_format)
  return _internal_out_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord_Params::set_out_format(ArgT0&& arg0, ArgT... args) {
 
 _impl_.out_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetRecord.Params.out_format)
}
inline std::string* GetRecord_Params::mutable_out_format() {
  std::string* _s = _internal_mutable_out_format();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetRecord.Params.out_format)
  return _s;
}
inline const std::string& GetRecord_Params::_internal_out_format() const {
  return _impl_.out_format_.Get();
}
inline void GetRecord_Params::_internal_set_out_format(const std::string& value) {
  
  _impl_.out_format_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord_Params::_internal_mutable_out_format() {
  
  return _impl_.out_format_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord_Params::release_out_format() {
  // @@protoc_insertion_point(field_release:cqhttp.GetRecord.Params.out_format)
  return _impl_.out_format_.Release();
}
inline void GetRecord_Params::set_allocated_out_format(std::string* out_format) {
  if (out_format != nullptr) {
    
  } else {
    
  }
  _impl_.out_format_.SetAllocated(out_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.out_format_.IsDefault()) {
    _impl_.out_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetRecord.Params.out_format)
}

// -------------------------------------------------------------------

// GetRecord

// string action = 1;
inline void GetRecord::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetRecord::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetRecord.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetRecord.action)
}
inline std::string* GetRecord::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetRecord.action)
  return _s;
}
inline const std::string& GetRecord::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetRecord::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetRecord.action)
  return _impl_.action_.Release();
}
inline void GetRecord::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetRecord.action)
}

// .cqhttp.GetRecord.Params params = 2;
inline bool GetRecord::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetRecord::has_params() const {
  return _internal_has_params();
}
inline void GetRecord::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetRecord_Params& GetRecord::_internal_params() const {
  const ::cqhttp::GetRecord_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetRecord_Params&>(
      ::cqhttp::_GetRecord_Params_default_instance_);
}
inline const ::cqhttp::GetRecord_Params& GetRecord::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetRecord.params)
  return _internal_params();
}
inline void GetRecord::unsafe_arena_set_allocated_params(
    ::cqhttp::GetRecord_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetRecord.params)
}
inline ::cqhttp::GetRecord_Params* GetRecord::release_params() {
  
  ::cqhttp::GetRecord_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetRecord_Params* GetRecord::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetRecord.params)
  
  ::cqhttp::GetRecord_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetRecord_Params* GetRecord::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetRecord_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetRecord_Params* GetRecord::mutable_params() {
  ::cqhttp::GetRecord_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetRecord.params)
  return _msg;
}
inline void GetRecord::set_allocated_params(::cqhttp::GetRecord_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetRecord.params)
}

// string echo = 3;
inline void GetRecord::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetRecord::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetRecord.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetRecord.echo)
}
inline std::string* GetRecord::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetRecord.echo)
  return _s;
}
inline const std::string& GetRecord::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetRecord::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetRecord.echo)
  return _impl_.echo_.Release();
}
inline void GetRecord::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetRecord.echo)
}

// -------------------------------------------------------------------

// GetRecordResp

// string file = 1;
inline void GetRecordResp::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& GetRecordResp::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetRecordResp.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecordResp::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetRecordResp.file)
}
inline std::string* GetRecordResp::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetRecordResp.file)
  return _s;
}
inline const std::string& GetRecordResp::_internal_file() const {
  return _impl_.file_.Get();
}
inline void GetRecordResp::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecordResp::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecordResp::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.GetRecordResp.file)
  return _impl_.file_.Release();
}
inline void GetRecordResp::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetRecordResp.file)
}

// -------------------------------------------------------------------

// CanSendImage

// string action = 1;
inline void CanSendImage::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& CanSendImage::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.CanSendImage.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanSendImage::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CanSendImage.action)
}
inline std::string* CanSendImage::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.CanSendImage.action)
  return _s;
}
inline const std::string& CanSendImage::_internal_action() const {
  return _impl_.action_.Get();
}
inline void CanSendImage::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* CanSendImage::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* CanSendImage::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.CanSendImage.action)
  return _impl_.action_.Release();
}
inline void CanSendImage::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CanSendImage.action)
}

// string echo = 2;
inline void CanSendImage::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& CanSendImage::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.CanSendImage.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanSendImage::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CanSendImage.echo)
}
inline std::string* CanSendImage::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.CanSendImage.echo)
  return _s;
}
inline const std::string& CanSendImage::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void CanSendImage::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* CanSendImage::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* CanSendImage::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.CanSendImage.echo)
  return _impl_.echo_.Release();
}
inline void CanSendImage::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CanSendImage.echo)
}

// -------------------------------------------------------------------

// CanSendImageResp

// bool yes = 1;
inline void CanSendImageResp::clear_yes() {
  _impl_.yes_ = false;
}
inline bool CanSendImageResp::_internal_yes() const {
  return _impl_.yes_;
}
inline bool CanSendImageResp::yes() const {
  // @@protoc_insertion_point(field_get:cqhttp.CanSendImageResp.yes)
  return _internal_yes();
}
inline void CanSendImageResp::_internal_set_yes(bool value) {
  
  _impl_.yes_ = value;
}
inline void CanSendImageResp::set_yes(bool value) {
  _internal_set_yes(value);
  // @@protoc_insertion_point(field_set:cqhttp.CanSendImageResp.yes)
}

// -------------------------------------------------------------------

// CanSendRecord

// string action = 1;
inline void CanSendRecord::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& CanSendRecord::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.CanSendRecord.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanSendRecord::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CanSendRecord.action)
}
inline std::string* CanSendRecord::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.CanSendRecord.action)
  return _s;
}
inline const std::string& CanSendRecord::_internal_action() const {
  return _impl_.action_.Get();
}
inline void CanSendRecord::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* CanSendRecord::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* CanSendRecord::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.CanSendRecord.action)
  return _impl_.action_.Release();
}
inline void CanSendRecord::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CanSendRecord.action)
}

// string echo = 2;
inline void CanSendRecord::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& CanSendRecord::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.CanSendRecord.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanSendRecord::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CanSendRecord.echo)
}
inline std::string* CanSendRecord::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.CanSendRecord.echo)
  return _s;
}
inline const std::string& CanSendRecord::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void CanSendRecord::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* CanSendRecord::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* CanSendRecord::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.CanSendRecord.echo)
  return _impl_.echo_.Release();
}
inline void CanSendRecord::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CanSendRecord.echo)
}

// -------------------------------------------------------------------

// CanSendRecordResp

// bool yes = 1;
inline void CanSendRecordResp::clear_yes() {
  _impl_.yes_ = false;
}
inline bool CanSendRecordResp::_internal_yes() const {
  return _impl_.yes_;
}
inline bool CanSendRecordResp::yes() const {
  // @@protoc_insertion_point(field_get:cqhttp.CanSendRecordResp.yes)
  return _internal_yes();
}
inline void CanSendRecordResp::_internal_set_yes(bool value) {
  
  _impl_.yes_ = value;
}
inline void CanSendRecordResp::set_yes(bool value) {
  _internal_set_yes(value);
  // @@protoc_insertion_point(field_set:cqhttp.CanSendRecordResp.yes)
}

// -------------------------------------------------------------------

// GetVersionInfo

// string action = 1;
inline void GetVersionInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetVersionInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfo.action)
}
inline std::string* GetVersionInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfo.action)
  return _s;
}
inline const std::string& GetVersionInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetVersionInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfo.action)
  return _impl_.action_.Release();
}
inline void GetVersionInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfo.action)
}

// string echo = 2;
inline void GetVersionInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetVersionInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfo.echo)
}
inline std::string* GetVersionInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfo.echo)
  return _s;
}
inline const std::string& GetVersionInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetVersionInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetVersionInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfo.echo)
}

// -------------------------------------------------------------------

// GetVersionInfoResp

// string app_name = 1;
inline void GetVersionInfoResp::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::app_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_app_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.app_name)
}
inline std::string* GetVersionInfoResp::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.app_name)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void GetVersionInfoResp::_internal_set_app_name(const std::string& value) {
  
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_app_name() {
  
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_app_name() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.app_name)
  return _impl_.app_name_.Release();
}
inline void GetVersionInfoResp::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    
  } else {
    
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.app_name)
}

// string app_version = 2;
inline void GetVersionInfoResp::clear_app_version() {
  _impl_.app_version_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::app_version() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.app_version)
  return _internal_app_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_app_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.app_version)
}
inline std::string* GetVersionInfoResp::mutable_app_version() {
  std::string* _s = _internal_mutable_app_version();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.app_version)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_app_version() const {
  return _impl_.app_version_.Get();
}
inline void GetVersionInfoResp::_internal_set_app_version(const std::string& value) {
  
  _impl_.app_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_app_version() {
  
  return _impl_.app_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_app_version() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.app_version)
  return _impl_.app_version_.Release();
}
inline void GetVersionInfoResp::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    
  } else {
    
  }
  _impl_.app_version_.SetAllocated(app_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_version_.IsDefault()) {
    _impl_.app_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.app_version)
}

// string app_full_name = 3;
inline void GetVersionInfoResp::clear_app_full_name() {
  _impl_.app_full_name_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::app_full_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.app_full_name)
  return _internal_app_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_app_full_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.app_full_name)
}
inline std::string* GetVersionInfoResp::mutable_app_full_name() {
  std::string* _s = _internal_mutable_app_full_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.app_full_name)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_app_full_name() const {
  return _impl_.app_full_name_.Get();
}
inline void GetVersionInfoResp::_internal_set_app_full_name(const std::string& value) {
  
  _impl_.app_full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_app_full_name() {
  
  return _impl_.app_full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_app_full_name() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.app_full_name)
  return _impl_.app_full_name_.Release();
}
inline void GetVersionInfoResp::set_allocated_app_full_name(std::string* app_full_name) {
  if (app_full_name != nullptr) {
    
  } else {
    
  }
  _impl_.app_full_name_.SetAllocated(app_full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_full_name_.IsDefault()) {
    _impl_.app_full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.app_full_name)
}

// string protocol_version = 4;
inline void GetVersionInfoResp::clear_protocol_version() {
  _impl_.protocol_version_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::protocol_version() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.protocol_version)
  return _internal_protocol_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_protocol_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protocol_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.protocol_version)
}
inline std::string* GetVersionInfoResp::mutable_protocol_version() {
  std::string* _s = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.protocol_version)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_protocol_version() const {
  return _impl_.protocol_version_.Get();
}
inline void GetVersionInfoResp::_internal_set_protocol_version(const std::string& value) {
  
  _impl_.protocol_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_protocol_version() {
  
  return _impl_.protocol_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_protocol_version() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.protocol_version)
  return _impl_.protocol_version_.Release();
}
inline void GetVersionInfoResp::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  _impl_.protocol_version_.SetAllocated(protocol_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_version_.IsDefault()) {
    _impl_.protocol_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.protocol_version)
}

// string coolq_edition = 5;
inline void GetVersionInfoResp::clear_coolq_edition() {
  _impl_.coolq_edition_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::coolq_edition() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.coolq_edition)
  return _internal_coolq_edition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_coolq_edition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coolq_edition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.coolq_edition)
}
inline std::string* GetVersionInfoResp::mutable_coolq_edition() {
  std::string* _s = _internal_mutable_coolq_edition();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.coolq_edition)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_coolq_edition() const {
  return _impl_.coolq_edition_.Get();
}
inline void GetVersionInfoResp::_internal_set_coolq_edition(const std::string& value) {
  
  _impl_.coolq_edition_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_coolq_edition() {
  
  return _impl_.coolq_edition_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_coolq_edition() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.coolq_edition)
  return _impl_.coolq_edition_.Release();
}
inline void GetVersionInfoResp::set_allocated_coolq_edition(std::string* coolq_edition) {
  if (coolq_edition != nullptr) {
    
  } else {
    
  }
  _impl_.coolq_edition_.SetAllocated(coolq_edition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coolq_edition_.IsDefault()) {
    _impl_.coolq_edition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.coolq_edition)
}

// string coolq_directory = 6;
inline void GetVersionInfoResp::clear_coolq_directory() {
  _impl_.coolq_directory_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::coolq_directory() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.coolq_directory)
  return _internal_coolq_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_coolq_directory(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coolq_directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.coolq_directory)
}
inline std::string* GetVersionInfoResp::mutable_coolq_directory() {
  std::string* _s = _internal_mutable_coolq_directory();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.coolq_directory)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_coolq_directory() const {
  return _impl_.coolq_directory_.Get();
}
inline void GetVersionInfoResp::_internal_set_coolq_directory(const std::string& value) {
  
  _impl_.coolq_directory_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_coolq_directory() {
  
  return _impl_.coolq_directory_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_coolq_directory() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.coolq_directory)
  return _impl_.coolq_directory_.Release();
}
inline void GetVersionInfoResp::set_allocated_coolq_directory(std::string* coolq_directory) {
  if (coolq_directory != nullptr) {
    
  } else {
    
  }
  _impl_.coolq_directory_.SetAllocated(coolq_directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coolq_directory_.IsDefault()) {
    _impl_.coolq_directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.coolq_directory)
}

// bool cqhttp = 7;
inline void GetVersionInfoResp::clear_cqhttp() {
  _impl_.cqhttp_ = false;
}
inline bool GetVersionInfoResp::_internal_cqhttp() const {
  return _impl_.cqhttp_;
}
inline bool GetVersionInfoResp::cqhttp() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.cqhttp)
  return _internal_cqhttp();
}
inline void GetVersionInfoResp::_internal_set_cqhttp(bool value) {
  
  _impl_.cqhttp_ = value;
}
inline void GetVersionInfoResp::set_cqhttp(bool value) {
  _internal_set_cqhttp(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.cqhttp)
}

// string plugin_version = 8;
inline void GetVersionInfoResp::clear_plugin_version() {
  _impl_.plugin_version_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::plugin_version() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.plugin_version)
  return _internal_plugin_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_plugin_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.plugin_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.plugin_version)
}
inline std::string* GetVersionInfoResp::mutable_plugin_version() {
  std::string* _s = _internal_mutable_plugin_version();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.plugin_version)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_plugin_version() const {
  return _impl_.plugin_version_.Get();
}
inline void GetVersionInfoResp::_internal_set_plugin_version(const std::string& value) {
  
  _impl_.plugin_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_plugin_version() {
  
  return _impl_.plugin_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_plugin_version() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.plugin_version)
  return _impl_.plugin_version_.Release();
}
inline void GetVersionInfoResp::set_allocated_plugin_version(std::string* plugin_version) {
  if (plugin_version != nullptr) {
    
  } else {
    
  }
  _impl_.plugin_version_.SetAllocated(plugin_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plugin_version_.IsDefault()) {
    _impl_.plugin_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.plugin_version)
}

// int32 plugin_build_number = 9;
inline void GetVersionInfoResp::clear_plugin_build_number() {
  _impl_.plugin_build_number_ = 0;
}
inline int32_t GetVersionInfoResp::_internal_plugin_build_number() const {
  return _impl_.plugin_build_number_;
}
inline int32_t GetVersionInfoResp::plugin_build_number() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.plugin_build_number)
  return _internal_plugin_build_number();
}
inline void GetVersionInfoResp::_internal_set_plugin_build_number(int32_t value) {
  
  _impl_.plugin_build_number_ = value;
}
inline void GetVersionInfoResp::set_plugin_build_number(int32_t value) {
  _internal_set_plugin_build_number(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.plugin_build_number)
}

// string plugin_build_configuration = 10;
inline void GetVersionInfoResp::clear_plugin_build_configuration() {
  _impl_.plugin_build_configuration_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::plugin_build_configuration() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.plugin_build_configuration)
  return _internal_plugin_build_configuration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_plugin_build_configuration(ArgT0&& arg0, ArgT... args) {
 
 _impl_.plugin_build_configuration_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.plugin_build_configuration)
}
inline std::string* GetVersionInfoResp::mutable_plugin_build_configuration() {
  std::string* _s = _internal_mutable_plugin_build_configuration();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.plugin_build_configuration)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_plugin_build_configuration() const {
  return _impl_.plugin_build_configuration_.Get();
}
inline void GetVersionInfoResp::_internal_set_plugin_build_configuration(const std::string& value) {
  
  _impl_.plugin_build_configuration_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_plugin_build_configuration() {
  
  return _impl_.plugin_build_configuration_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_plugin_build_configuration() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.plugin_build_configuration)
  return _impl_.plugin_build_configuration_.Release();
}
inline void GetVersionInfoResp::set_allocated_plugin_build_configuration(std::string* plugin_build_configuration) {
  if (plugin_build_configuration != nullptr) {
    
  } else {
    
  }
  _impl_.plugin_build_configuration_.SetAllocated(plugin_build_configuration, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plugin_build_configuration_.IsDefault()) {
    _impl_.plugin_build_configuration_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.plugin_build_configuration)
}

// string runtime_version = 11;
inline void GetVersionInfoResp::clear_runtime_version() {
  _impl_.runtime_version_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::runtime_version() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.runtime_version)
  return _internal_runtime_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_runtime_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runtime_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.runtime_version)
}
inline std::string* GetVersionInfoResp::mutable_runtime_version() {
  std::string* _s = _internal_mutable_runtime_version();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.runtime_version)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_runtime_version() const {
  return _impl_.runtime_version_.Get();
}
inline void GetVersionInfoResp::_internal_set_runtime_version(const std::string& value) {
  
  _impl_.runtime_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_runtime_version() {
  
  return _impl_.runtime_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_runtime_version() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.runtime_version)
  return _impl_.runtime_version_.Release();
}
inline void GetVersionInfoResp::set_allocated_runtime_version(std::string* runtime_version) {
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  _impl_.runtime_version_.SetAllocated(runtime_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runtime_version_.IsDefault()) {
    _impl_.runtime_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.runtime_version)
}

// string runtime_os = 12;
inline void GetVersionInfoResp::clear_runtime_os() {
  _impl_.runtime_os_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::runtime_os() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.runtime_os)
  return _internal_runtime_os();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_runtime_os(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runtime_os_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.runtime_os)
}
inline std::string* GetVersionInfoResp::mutable_runtime_os() {
  std::string* _s = _internal_mutable_runtime_os();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.runtime_os)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_runtime_os() const {
  return _impl_.runtime_os_.Get();
}
inline void GetVersionInfoResp::_internal_set_runtime_os(const std::string& value) {
  
  _impl_.runtime_os_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_runtime_os() {
  
  return _impl_.runtime_os_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_runtime_os() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.runtime_os)
  return _impl_.runtime_os_.Release();
}
inline void GetVersionInfoResp::set_allocated_runtime_os(std::string* runtime_os) {
  if (runtime_os != nullptr) {
    
  } else {
    
  }
  _impl_.runtime_os_.SetAllocated(runtime_os, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runtime_os_.IsDefault()) {
    _impl_.runtime_os_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.runtime_os)
}

// string version = 13;
inline void GetVersionInfoResp::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& GetVersionInfoResp::version() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionInfoResp::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.version)
}
inline std::string* GetVersionInfoResp::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetVersionInfoResp.version)
  return _s;
}
inline const std::string& GetVersionInfoResp::_internal_version() const {
  return _impl_.version_.Get();
}
inline void GetVersionInfoResp::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionInfoResp::release_version() {
  // @@protoc_insertion_point(field_release:cqhttp.GetVersionInfoResp.version)
  return _impl_.version_.Release();
}
inline void GetVersionInfoResp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetVersionInfoResp.version)
}

// int32 protocol = 14;
inline void GetVersionInfoResp::clear_protocol() {
  _impl_.protocol_ = 0;
}
inline int32_t GetVersionInfoResp::_internal_protocol() const {
  return _impl_.protocol_;
}
inline int32_t GetVersionInfoResp::protocol() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetVersionInfoResp.protocol)
  return _internal_protocol();
}
inline void GetVersionInfoResp::_internal_set_protocol(int32_t value) {
  
  _impl_.protocol_ = value;
}
inline void GetVersionInfoResp::set_protocol(int32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetVersionInfoResp.protocol)
}

// -------------------------------------------------------------------

// SetRestart_Params

// int32 delay = 1;
inline void SetRestart_Params::clear_delay() {
  _impl_.delay_ = 0;
}
inline int32_t SetRestart_Params::_internal_delay() const {
  return _impl_.delay_;
}
inline int32_t SetRestart_Params::delay() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetRestart.Params.delay)
  return _internal_delay();
}
inline void SetRestart_Params::_internal_set_delay(int32_t value) {
  
  _impl_.delay_ = value;
}
inline void SetRestart_Params::set_delay(int32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetRestart.Params.delay)
}

// -------------------------------------------------------------------

// SetRestart

// string action = 1;
inline void SetRestart::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetRestart::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetRestart.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetRestart::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetRestart.action)
}
inline std::string* SetRestart::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetRestart.action)
  return _s;
}
inline const std::string& SetRestart::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetRestart::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetRestart::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetRestart::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetRestart.action)
  return _impl_.action_.Release();
}
inline void SetRestart::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetRestart.action)
}

// .cqhttp.SetRestart.Params params = 2;
inline bool SetRestart::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetRestart::has_params() const {
  return _internal_has_params();
}
inline void SetRestart::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetRestart_Params& SetRestart::_internal_params() const {
  const ::cqhttp::SetRestart_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetRestart_Params&>(
      ::cqhttp::_SetRestart_Params_default_instance_);
}
inline const ::cqhttp::SetRestart_Params& SetRestart::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetRestart.params)
  return _internal_params();
}
inline void SetRestart::unsafe_arena_set_allocated_params(
    ::cqhttp::SetRestart_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetRestart.params)
}
inline ::cqhttp::SetRestart_Params* SetRestart::release_params() {
  
  ::cqhttp::SetRestart_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetRestart_Params* SetRestart::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetRestart.params)
  
  ::cqhttp::SetRestart_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetRestart_Params* SetRestart::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetRestart_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetRestart_Params* SetRestart::mutable_params() {
  ::cqhttp::SetRestart_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetRestart.params)
  return _msg;
}
inline void SetRestart::set_allocated_params(::cqhttp::SetRestart_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetRestart.params)
}

// -------------------------------------------------------------------

// CleanCache

// string action = 1;
inline void CleanCache::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& CleanCache::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.CleanCache.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CleanCache::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CleanCache.action)
}
inline std::string* CleanCache::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.CleanCache.action)
  return _s;
}
inline const std::string& CleanCache::_internal_action() const {
  return _impl_.action_.Get();
}
inline void CleanCache::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* CleanCache::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* CleanCache::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.CleanCache.action)
  return _impl_.action_.Release();
}
inline void CleanCache::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CleanCache.action)
}

// -------------------------------------------------------------------

// SetGroupPortrait_Params

// int64 group_id = 1;
inline void SetGroupPortrait_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SetGroupPortrait_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SetGroupPortrait_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupPortrait.Params.group_id)
  return _internal_group_id();
}
inline void SetGroupPortrait_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SetGroupPortrait_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupPortrait.Params.group_id)
}

// string file = 2;
inline void SetGroupPortrait_Params::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& SetGroupPortrait_Params::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupPortrait.Params.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupPortrait_Params::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupPortrait.Params.file)
}
inline std::string* SetGroupPortrait_Params::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupPortrait.Params.file)
  return _s;
}
inline const std::string& SetGroupPortrait_Params::_internal_file() const {
  return _impl_.file_.Get();
}
inline void SetGroupPortrait_Params::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupPortrait_Params::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupPortrait_Params::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupPortrait.Params.file)
  return _impl_.file_.Release();
}
inline void SetGroupPortrait_Params::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupPortrait.Params.file)
}

// int32 cache = 3;
inline void SetGroupPortrait_Params::clear_cache() {
  _impl_.cache_ = 0;
}
inline int32_t SetGroupPortrait_Params::_internal_cache() const {
  return _impl_.cache_;
}
inline int32_t SetGroupPortrait_Params::cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupPortrait.Params.cache)
  return _internal_cache();
}
inline void SetGroupPortrait_Params::_internal_set_cache(int32_t value) {
  
  _impl_.cache_ = value;
}
inline void SetGroupPortrait_Params::set_cache(int32_t value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupPortrait.Params.cache)
}

// -------------------------------------------------------------------

// SetGroupPortrait

// string action = 1;
inline void SetGroupPortrait::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetGroupPortrait::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupPortrait.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGroupPortrait::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetGroupPortrait.action)
}
inline std::string* SetGroupPortrait::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupPortrait.action)
  return _s;
}
inline const std::string& SetGroupPortrait::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetGroupPortrait::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGroupPortrait::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGroupPortrait::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupPortrait.action)
  return _impl_.action_.Release();
}
inline void SetGroupPortrait::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupPortrait.action)
}

// .cqhttp.SetGroupPortrait.Params params = 2;
inline bool SetGroupPortrait::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetGroupPortrait::has_params() const {
  return _internal_has_params();
}
inline void SetGroupPortrait::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetGroupPortrait_Params& SetGroupPortrait::_internal_params() const {
  const ::cqhttp::SetGroupPortrait_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetGroupPortrait_Params&>(
      ::cqhttp::_SetGroupPortrait_Params_default_instance_);
}
inline const ::cqhttp::SetGroupPortrait_Params& SetGroupPortrait::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetGroupPortrait.params)
  return _internal_params();
}
inline void SetGroupPortrait::unsafe_arena_set_allocated_params(
    ::cqhttp::SetGroupPortrait_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetGroupPortrait.params)
}
inline ::cqhttp::SetGroupPortrait_Params* SetGroupPortrait::release_params() {
  
  ::cqhttp::SetGroupPortrait_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetGroupPortrait_Params* SetGroupPortrait::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetGroupPortrait.params)
  
  ::cqhttp::SetGroupPortrait_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetGroupPortrait_Params* SetGroupPortrait::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetGroupPortrait_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetGroupPortrait_Params* SetGroupPortrait::mutable_params() {
  ::cqhttp::SetGroupPortrait_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetGroupPortrait.params)
  return _msg;
}
inline void SetGroupPortrait::set_allocated_params(::cqhttp::SetGroupPortrait_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetGroupPortrait.params)
}

// -------------------------------------------------------------------

// GetWordSlices_Params

// string content = 1;
inline void GetWordSlices_Params::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GetWordSlices_Params::content() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetWordSlices.Params.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWordSlices_Params::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetWordSlices.Params.content)
}
inline std::string* GetWordSlices_Params::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetWordSlices.Params.content)
  return _s;
}
inline const std::string& GetWordSlices_Params::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GetWordSlices_Params::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GetWordSlices_Params::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GetWordSlices_Params::release_content() {
  // @@protoc_insertion_point(field_release:cqhttp.GetWordSlices.Params.content)
  return _impl_.content_.Release();
}
inline void GetWordSlices_Params::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetWordSlices.Params.content)
}

// -------------------------------------------------------------------

// GetWordSlices

// string action = 1;
inline void GetWordSlices::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetWordSlices::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetWordSlices.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWordSlices::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetWordSlices.action)
}
inline std::string* GetWordSlices::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetWordSlices.action)
  return _s;
}
inline const std::string& GetWordSlices::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetWordSlices::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetWordSlices::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetWordSlices::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetWordSlices.action)
  return _impl_.action_.Release();
}
inline void GetWordSlices::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetWordSlices.action)
}

// .cqhttp.GetWordSlices.Params params = 2;
inline bool GetWordSlices::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetWordSlices::has_params() const {
  return _internal_has_params();
}
inline void GetWordSlices::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetWordSlices_Params& GetWordSlices::_internal_params() const {
  const ::cqhttp::GetWordSlices_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetWordSlices_Params&>(
      ::cqhttp::_GetWordSlices_Params_default_instance_);
}
inline const ::cqhttp::GetWordSlices_Params& GetWordSlices::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetWordSlices.params)
  return _internal_params();
}
inline void GetWordSlices::unsafe_arena_set_allocated_params(
    ::cqhttp::GetWordSlices_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetWordSlices.params)
}
inline ::cqhttp::GetWordSlices_Params* GetWordSlices::release_params() {
  
  ::cqhttp::GetWordSlices_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetWordSlices_Params* GetWordSlices::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetWordSlices.params)
  
  ::cqhttp::GetWordSlices_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetWordSlices_Params* GetWordSlices::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetWordSlices_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetWordSlices_Params* GetWordSlices::mutable_params() {
  ::cqhttp::GetWordSlices_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetWordSlices.params)
  return _msg;
}
inline void GetWordSlices::set_allocated_params(::cqhttp::GetWordSlices_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetWordSlices.params)
}

// string echo = 3;
inline void GetWordSlices::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetWordSlices::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetWordSlices.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWordSlices::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetWordSlices.echo)
}
inline std::string* GetWordSlices::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetWordSlices.echo)
  return _s;
}
inline const std::string& GetWordSlices::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetWordSlices::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetWordSlices::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetWordSlices::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetWordSlices.echo)
  return _impl_.echo_.Release();
}
inline void GetWordSlices::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetWordSlices.echo)
}

// -------------------------------------------------------------------

// GetWordSlicesResp

// repeated string slices = 1;
inline int GetWordSlicesResp::_internal_slices_size() const {
  return _impl_.slices_.size();
}
inline int GetWordSlicesResp::slices_size() const {
  return _internal_slices_size();
}
inline void GetWordSlicesResp::clear_slices() {
  _impl_.slices_.Clear();
}
inline std::string* GetWordSlicesResp::add_slices() {
  std::string* _s = _internal_add_slices();
  // @@protoc_insertion_point(field_add_mutable:cqhttp.GetWordSlicesResp.slices)
  return _s;
}
inline const std::string& GetWordSlicesResp::_internal_slices(int index) const {
  return _impl_.slices_.Get(index);
}
inline const std::string& GetWordSlicesResp::slices(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetWordSlicesResp.slices)
  return _internal_slices(index);
}
inline std::string* GetWordSlicesResp::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetWordSlicesResp.slices)
  return _impl_.slices_.Mutable(index);
}
inline void GetWordSlicesResp::set_slices(int index, const std::string& value) {
  _impl_.slices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetWordSlicesResp.slices)
}
inline void GetWordSlicesResp::set_slices(int index, std::string&& value) {
  _impl_.slices_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cqhttp.GetWordSlicesResp.slices)
}
inline void GetWordSlicesResp::set_slices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.slices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cqhttp.GetWordSlicesResp.slices)
}
inline void GetWordSlicesResp::set_slices(int index, const char* value, size_t size) {
  _impl_.slices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cqhttp.GetWordSlicesResp.slices)
}
inline std::string* GetWordSlicesResp::_internal_add_slices() {
  return _impl_.slices_.Add();
}
inline void GetWordSlicesResp::add_slices(const std::string& value) {
  _impl_.slices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cqhttp.GetWordSlicesResp.slices)
}
inline void GetWordSlicesResp::add_slices(std::string&& value) {
  _impl_.slices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cqhttp.GetWordSlicesResp.slices)
}
inline void GetWordSlicesResp::add_slices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.slices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cqhttp.GetWordSlicesResp.slices)
}
inline void GetWordSlicesResp::add_slices(const char* value, size_t size) {
  _impl_.slices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cqhttp.GetWordSlicesResp.slices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetWordSlicesResp::slices() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetWordSlicesResp.slices)
  return _impl_.slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetWordSlicesResp::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetWordSlicesResp.slices)
  return &_impl_.slices_;
}

// -------------------------------------------------------------------

// OcrImage_Params

// string image = 1;
inline void OcrImage_Params::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& OcrImage_Params::image() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImage.Params.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrImage_Params::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OcrImage.Params.image)
}
inline std::string* OcrImage_Params::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImage.Params.image)
  return _s;
}
inline const std::string& OcrImage_Params::_internal_image() const {
  return _impl_.image_.Get();
}
inline void OcrImage_Params::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrImage_Params::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrImage_Params::release_image() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImage.Params.image)
  return _impl_.image_.Release();
}
inline void OcrImage_Params::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImage.Params.image)
}

// -------------------------------------------------------------------

// OcrImage

// string action = 1;
inline void OcrImage::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& OcrImage::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImage.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrImage::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OcrImage.action)
}
inline std::string* OcrImage::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImage.action)
  return _s;
}
inline const std::string& OcrImage::_internal_action() const {
  return _impl_.action_.Get();
}
inline void OcrImage::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrImage::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrImage::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImage.action)
  return _impl_.action_.Release();
}
inline void OcrImage::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImage.action)
}

// .cqhttp.OcrImage.Params params = 2;
inline bool OcrImage::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool OcrImage::has_params() const {
  return _internal_has_params();
}
inline void OcrImage::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::OcrImage_Params& OcrImage::_internal_params() const {
  const ::cqhttp::OcrImage_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::OcrImage_Params&>(
      ::cqhttp::_OcrImage_Params_default_instance_);
}
inline const ::cqhttp::OcrImage_Params& OcrImage::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImage.params)
  return _internal_params();
}
inline void OcrImage::unsafe_arena_set_allocated_params(
    ::cqhttp::OcrImage_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.OcrImage.params)
}
inline ::cqhttp::OcrImage_Params* OcrImage::release_params() {
  
  ::cqhttp::OcrImage_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::OcrImage_Params* OcrImage::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImage.params)
  
  ::cqhttp::OcrImage_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::OcrImage_Params* OcrImage::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::OcrImage_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::OcrImage_Params* OcrImage::mutable_params() {
  ::cqhttp::OcrImage_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImage.params)
  return _msg;
}
inline void OcrImage::set_allocated_params(::cqhttp::OcrImage_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImage.params)
}

// string echo = 3;
inline void OcrImage::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& OcrImage::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImage.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrImage::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OcrImage.echo)
}
inline std::string* OcrImage::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImage.echo)
  return _s;
}
inline const std::string& OcrImage::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void OcrImage::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrImage::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrImage::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImage.echo)
  return _impl_.echo_.Release();
}
inline void OcrImage::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImage.echo)
}

// -------------------------------------------------------------------

// OcrImageResp_TextDetection

// string text = 1;
inline void OcrImageResp_TextDetection::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& OcrImageResp_TextDetection::text() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImageResp.TextDetection.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrImageResp_TextDetection::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OcrImageResp.TextDetection.text)
}
inline std::string* OcrImageResp_TextDetection::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImageResp.TextDetection.text)
  return _s;
}
inline const std::string& OcrImageResp_TextDetection::_internal_text() const {
  return _impl_.text_.Get();
}
inline void OcrImageResp_TextDetection::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrImageResp_TextDetection::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrImageResp_TextDetection::release_text() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImageResp.TextDetection.text)
  return _impl_.text_.Release();
}
inline void OcrImageResp_TextDetection::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImageResp.TextDetection.text)
}

// int32 confidence = 2;
inline void OcrImageResp_TextDetection::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline int32_t OcrImageResp_TextDetection::_internal_confidence() const {
  return _impl_.confidence_;
}
inline int32_t OcrImageResp_TextDetection::confidence() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImageResp.TextDetection.confidence)
  return _internal_confidence();
}
inline void OcrImageResp_TextDetection::_internal_set_confidence(int32_t value) {
  
  _impl_.confidence_ = value;
}
inline void OcrImageResp_TextDetection::set_confidence(int32_t value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:cqhttp.OcrImageResp.TextDetection.confidence)
}

// string coordinates = 3;
inline void OcrImageResp_TextDetection::clear_coordinates() {
  _impl_.coordinates_.ClearToEmpty();
}
inline const std::string& OcrImageResp_TextDetection::coordinates() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImageResp.TextDetection.coordinates)
  return _internal_coordinates();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrImageResp_TextDetection::set_coordinates(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coordinates_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OcrImageResp.TextDetection.coordinates)
}
inline std::string* OcrImageResp_TextDetection::mutable_coordinates() {
  std::string* _s = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImageResp.TextDetection.coordinates)
  return _s;
}
inline const std::string& OcrImageResp_TextDetection::_internal_coordinates() const {
  return _impl_.coordinates_.Get();
}
inline void OcrImageResp_TextDetection::_internal_set_coordinates(const std::string& value) {
  
  _impl_.coordinates_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrImageResp_TextDetection::_internal_mutable_coordinates() {
  
  return _impl_.coordinates_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrImageResp_TextDetection::release_coordinates() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImageResp.TextDetection.coordinates)
  return _impl_.coordinates_.Release();
}
inline void OcrImageResp_TextDetection::set_allocated_coordinates(std::string* coordinates) {
  if (coordinates != nullptr) {
    
  } else {
    
  }
  _impl_.coordinates_.SetAllocated(coordinates, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coordinates_.IsDefault()) {
    _impl_.coordinates_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImageResp.TextDetection.coordinates)
}

// -------------------------------------------------------------------

// OcrImageResp

// repeated .cqhttp.OcrImageResp.TextDetection texts = 1;
inline int OcrImageResp::_internal_texts_size() const {
  return _impl_.texts_.size();
}
inline int OcrImageResp::texts_size() const {
  return _internal_texts_size();
}
inline void OcrImageResp::clear_texts() {
  _impl_.texts_.Clear();
}
inline ::cqhttp::OcrImageResp_TextDetection* OcrImageResp::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImageResp.texts)
  return _impl_.texts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::OcrImageResp_TextDetection >*
OcrImageResp::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.OcrImageResp.texts)
  return &_impl_.texts_;
}
inline const ::cqhttp::OcrImageResp_TextDetection& OcrImageResp::_internal_texts(int index) const {
  return _impl_.texts_.Get(index);
}
inline const ::cqhttp::OcrImageResp_TextDetection& OcrImageResp::texts(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImageResp.texts)
  return _internal_texts(index);
}
inline ::cqhttp::OcrImageResp_TextDetection* OcrImageResp::_internal_add_texts() {
  return _impl_.texts_.Add();
}
inline ::cqhttp::OcrImageResp_TextDetection* OcrImageResp::add_texts() {
  ::cqhttp::OcrImageResp_TextDetection* _add = _internal_add_texts();
  // @@protoc_insertion_point(field_add:cqhttp.OcrImageResp.texts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::OcrImageResp_TextDetection >&
OcrImageResp::texts() const {
  // @@protoc_insertion_point(field_list:cqhttp.OcrImageResp.texts)
  return _impl_.texts_;
}

// string language = 2;
inline void OcrImageResp::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& OcrImageResp::language() const {
  // @@protoc_insertion_point(field_get:cqhttp.OcrImageResp.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrImageResp::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.OcrImageResp.language)
}
inline std::string* OcrImageResp::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:cqhttp.OcrImageResp.language)
  return _s;
}
inline const std::string& OcrImageResp::_internal_language() const {
  return _impl_.language_.Get();
}
inline void OcrImageResp::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrImageResp::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrImageResp::release_language() {
  // @@protoc_insertion_point(field_release:cqhttp.OcrImageResp.language)
  return _impl_.language_.Release();
}
inline void OcrImageResp::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.OcrImageResp.language)
}

// -------------------------------------------------------------------

// GetGroupSystemMsg

// string action = 1;
inline void GetGroupSystemMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsg.action)
}
inline std::string* GetGroupSystemMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsg.action)
  return _s;
}
inline const std::string& GetGroupSystemMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupSystemMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsg.action)
  return _impl_.action_.Release();
}
inline void GetGroupSystemMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsg.action)
}

// string echo = 2;
inline void GetGroupSystemMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsg.echo)
}
inline std::string* GetGroupSystemMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsg.echo)
  return _s;
}
inline const std::string& GetGroupSystemMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupSystemMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsg.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupSystemMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsg.echo)
}

// -------------------------------------------------------------------

// GetGroupSystemMsgResp_InvitedRequest

// int64 request_id = 1;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_request_id() {
  _impl_.request_id_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::_internal_request_id() const {
  return _impl_.request_id_;
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::request_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.request_id)
  return _internal_request_id();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_request_id(int64_t value) {
  
  _impl_.request_id_ = value;
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_request_id(int64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.request_id)
}

// int64 invitor_uin = 2;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_invitor_uin() {
  _impl_.invitor_uin_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::_internal_invitor_uin() const {
  return _impl_.invitor_uin_;
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::invitor_uin() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_uin)
  return _internal_invitor_uin();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_invitor_uin(int64_t value) {
  
  _impl_.invitor_uin_ = value;
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_invitor_uin(int64_t value) {
  _internal_set_invitor_uin(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_uin)
}

// string invitor_nick = 3;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_invitor_nick() {
  _impl_.invitor_nick_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsgResp_InvitedRequest::invitor_nick() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_nick)
  return _internal_invitor_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsgResp_InvitedRequest::set_invitor_nick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.invitor_nick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_nick)
}
inline std::string* GetGroupSystemMsgResp_InvitedRequest::mutable_invitor_nick() {
  std::string* _s = _internal_mutable_invitor_nick();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_nick)
  return _s;
}
inline const std::string& GetGroupSystemMsgResp_InvitedRequest::_internal_invitor_nick() const {
  return _impl_.invitor_nick_.Get();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_invitor_nick(const std::string& value) {
  
  _impl_.invitor_nick_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_InvitedRequest::_internal_mutable_invitor_nick() {
  
  return _impl_.invitor_nick_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_InvitedRequest::release_invitor_nick() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_nick)
  return _impl_.invitor_nick_.Release();
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_allocated_invitor_nick(std::string* invitor_nick) {
  if (invitor_nick != nullptr) {
    
  } else {
    
  }
  _impl_.invitor_nick_.SetAllocated(invitor_nick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.invitor_nick_.IsDefault()) {
    _impl_.invitor_nick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsgResp.InvitedRequest.invitor_nick)
}

// int64 group_id = 4;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_id)
  return _internal_group_id();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_id)
}

// string group_name = 5;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsgResp_InvitedRequest::group_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsgResp_InvitedRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_name)
}
inline std::string* GetGroupSystemMsgResp_InvitedRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_name)
  return _s;
}
inline const std::string& GetGroupSystemMsgResp_InvitedRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_InvitedRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_InvitedRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsgResp.InvitedRequest.group_name)
}

// bool checked = 6;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_checked() {
  _impl_.checked_ = false;
}
inline bool GetGroupSystemMsgResp_InvitedRequest::_internal_checked() const {
  return _impl_.checked_;
}
inline bool GetGroupSystemMsgResp_InvitedRequest::checked() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.checked)
  return _internal_checked();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_checked(bool value) {
  
  _impl_.checked_ = value;
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_checked(bool value) {
  _internal_set_checked(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.checked)
}

// int64 actor = 7;
inline void GetGroupSystemMsgResp_InvitedRequest::clear_actor() {
  _impl_.actor_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::_internal_actor() const {
  return _impl_.actor_;
}
inline int64_t GetGroupSystemMsgResp_InvitedRequest::actor() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.InvitedRequest.actor)
  return _internal_actor();
}
inline void GetGroupSystemMsgResp_InvitedRequest::_internal_set_actor(int64_t value) {
  
  _impl_.actor_ = value;
}
inline void GetGroupSystemMsgResp_InvitedRequest::set_actor(int64_t value) {
  _internal_set_actor(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.InvitedRequest.actor)
}

// -------------------------------------------------------------------

// GetGroupSystemMsgResp_JoinRequest

// int64 request_id = 1;
inline void GetGroupSystemMsgResp_JoinRequest::clear_request_id() {
  _impl_.request_id_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::_internal_request_id() const {
  return _impl_.request_id_;
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::request_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.request_id)
  return _internal_request_id();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_request_id(int64_t value) {
  
  _impl_.request_id_ = value;
}
inline void GetGroupSystemMsgResp_JoinRequest::set_request_id(int64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.request_id)
}

// int64 requester_uin = 2;
inline void GetGroupSystemMsgResp_JoinRequest::clear_requester_uin() {
  _impl_.requester_uin_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::_internal_requester_uin() const {
  return _impl_.requester_uin_;
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::requester_uin() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_uin)
  return _internal_requester_uin();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_requester_uin(int64_t value) {
  
  _impl_.requester_uin_ = value;
}
inline void GetGroupSystemMsgResp_JoinRequest::set_requester_uin(int64_t value) {
  _internal_set_requester_uin(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_uin)
}

// string requester_nick = 3;
inline void GetGroupSystemMsgResp_JoinRequest::clear_requester_nick() {
  _impl_.requester_nick_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsgResp_JoinRequest::requester_nick() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_nick)
  return _internal_requester_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsgResp_JoinRequest::set_requester_nick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requester_nick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_nick)
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::mutable_requester_nick() {
  std::string* _s = _internal_mutable_requester_nick();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_nick)
  return _s;
}
inline const std::string& GetGroupSystemMsgResp_JoinRequest::_internal_requester_nick() const {
  return _impl_.requester_nick_.Get();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_requester_nick(const std::string& value) {
  
  _impl_.requester_nick_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::_internal_mutable_requester_nick() {
  
  return _impl_.requester_nick_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::release_requester_nick() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_nick)
  return _impl_.requester_nick_.Release();
}
inline void GetGroupSystemMsgResp_JoinRequest::set_allocated_requester_nick(std::string* requester_nick) {
  if (requester_nick != nullptr) {
    
  } else {
    
  }
  _impl_.requester_nick_.SetAllocated(requester_nick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requester_nick_.IsDefault()) {
    _impl_.requester_nick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsgResp.JoinRequest.requester_nick)
}

// string message = 4;
inline void GetGroupSystemMsgResp_JoinRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsgResp_JoinRequest::message() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsgResp_JoinRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.message)
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.JoinRequest.message)
  return _s;
}
inline const std::string& GetGroupSystemMsgResp_JoinRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::release_message() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsgResp.JoinRequest.message)
  return _impl_.message_.Release();
}
inline void GetGroupSystemMsgResp_JoinRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsgResp.JoinRequest.message)
}

// int64 group_id = 5;
inline void GetGroupSystemMsgResp_JoinRequest::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_id)
  return _internal_group_id();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupSystemMsgResp_JoinRequest::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_id)
}

// string group_name = 6;
inline void GetGroupSystemMsgResp_JoinRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GetGroupSystemMsgResp_JoinRequest::group_name() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupSystemMsgResp_JoinRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_name)
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_name)
  return _s;
}
inline const std::string& GetGroupSystemMsgResp_JoinRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupSystemMsgResp_JoinRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void GetGroupSystemMsgResp_JoinRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupSystemMsgResp.JoinRequest.group_name)
}

// bool checked = 7;
inline void GetGroupSystemMsgResp_JoinRequest::clear_checked() {
  _impl_.checked_ = false;
}
inline bool GetGroupSystemMsgResp_JoinRequest::_internal_checked() const {
  return _impl_.checked_;
}
inline bool GetGroupSystemMsgResp_JoinRequest::checked() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.checked)
  return _internal_checked();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_checked(bool value) {
  
  _impl_.checked_ = value;
}
inline void GetGroupSystemMsgResp_JoinRequest::set_checked(bool value) {
  _internal_set_checked(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.checked)
}

// int64 actor = 8;
inline void GetGroupSystemMsgResp_JoinRequest::clear_actor() {
  _impl_.actor_ = int64_t{0};
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::_internal_actor() const {
  return _impl_.actor_;
}
inline int64_t GetGroupSystemMsgResp_JoinRequest::actor() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.JoinRequest.actor)
  return _internal_actor();
}
inline void GetGroupSystemMsgResp_JoinRequest::_internal_set_actor(int64_t value) {
  
  _impl_.actor_ = value;
}
inline void GetGroupSystemMsgResp_JoinRequest::set_actor(int64_t value) {
  _internal_set_actor(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupSystemMsgResp.JoinRequest.actor)
}

// -------------------------------------------------------------------

// GetGroupSystemMsgResp

// repeated .cqhttp.GetGroupSystemMsgResp.InvitedRequest invited_requests = 1;
inline int GetGroupSystemMsgResp::_internal_invited_requests_size() const {
  return _impl_.invited_requests_.size();
}
inline int GetGroupSystemMsgResp::invited_requests_size() const {
  return _internal_invited_requests_size();
}
inline void GetGroupSystemMsgResp::clear_invited_requests() {
  _impl_.invited_requests_.Clear();
}
inline ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* GetGroupSystemMsgResp::mutable_invited_requests(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.invited_requests)
  return _impl_.invited_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_InvitedRequest >*
GetGroupSystemMsgResp::mutable_invited_requests() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupSystemMsgResp.invited_requests)
  return &_impl_.invited_requests_;
}
inline const ::cqhttp::GetGroupSystemMsgResp_InvitedRequest& GetGroupSystemMsgResp::_internal_invited_requests(int index) const {
  return _impl_.invited_requests_.Get(index);
}
inline const ::cqhttp::GetGroupSystemMsgResp_InvitedRequest& GetGroupSystemMsgResp::invited_requests(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.invited_requests)
  return _internal_invited_requests(index);
}
inline ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* GetGroupSystemMsgResp::_internal_add_invited_requests() {
  return _impl_.invited_requests_.Add();
}
inline ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* GetGroupSystemMsgResp::add_invited_requests() {
  ::cqhttp::GetGroupSystemMsgResp_InvitedRequest* _add = _internal_add_invited_requests();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupSystemMsgResp.invited_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_InvitedRequest >&
GetGroupSystemMsgResp::invited_requests() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupSystemMsgResp.invited_requests)
  return _impl_.invited_requests_;
}

// repeated .cqhttp.GetGroupSystemMsgResp.JoinRequest join_requests = 2;
inline int GetGroupSystemMsgResp::_internal_join_requests_size() const {
  return _impl_.join_requests_.size();
}
inline int GetGroupSystemMsgResp::join_requests_size() const {
  return _internal_join_requests_size();
}
inline void GetGroupSystemMsgResp::clear_join_requests() {
  _impl_.join_requests_.Clear();
}
inline ::cqhttp::GetGroupSystemMsgResp_JoinRequest* GetGroupSystemMsgResp::mutable_join_requests(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupSystemMsgResp.join_requests)
  return _impl_.join_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_JoinRequest >*
GetGroupSystemMsgResp::mutable_join_requests() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupSystemMsgResp.join_requests)
  return &_impl_.join_requests_;
}
inline const ::cqhttp::GetGroupSystemMsgResp_JoinRequest& GetGroupSystemMsgResp::_internal_join_requests(int index) const {
  return _impl_.join_requests_.Get(index);
}
inline const ::cqhttp::GetGroupSystemMsgResp_JoinRequest& GetGroupSystemMsgResp::join_requests(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupSystemMsgResp.join_requests)
  return _internal_join_requests(index);
}
inline ::cqhttp::GetGroupSystemMsgResp_JoinRequest* GetGroupSystemMsgResp::_internal_add_join_requests() {
  return _impl_.join_requests_.Add();
}
inline ::cqhttp::GetGroupSystemMsgResp_JoinRequest* GetGroupSystemMsgResp::add_join_requests() {
  ::cqhttp::GetGroupSystemMsgResp_JoinRequest* _add = _internal_add_join_requests();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupSystemMsgResp.join_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupSystemMsgResp_JoinRequest >&
GetGroupSystemMsgResp::join_requests() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupSystemMsgResp.join_requests)
  return _impl_.join_requests_;
}

// -------------------------------------------------------------------

// UploadPrivateFile_Params

// int64 user_id = 1;
inline void UploadPrivateFile_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t UploadPrivateFile_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t UploadPrivateFile_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadPrivateFile.Params.user_id)
  return _internal_user_id();
}
inline void UploadPrivateFile_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void UploadPrivateFile_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.UploadPrivateFile.Params.user_id)
}

// string file = 2;
inline void UploadPrivateFile_Params::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& UploadPrivateFile_Params::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadPrivateFile.Params.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadPrivateFile_Params::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadPrivateFile.Params.file)
}
inline std::string* UploadPrivateFile_Params::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadPrivateFile.Params.file)
  return _s;
}
inline const std::string& UploadPrivateFile_Params::_internal_file() const {
  return _impl_.file_.Get();
}
inline void UploadPrivateFile_Params::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadPrivateFile_Params::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadPrivateFile_Params::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadPrivateFile.Params.file)
  return _impl_.file_.Release();
}
inline void UploadPrivateFile_Params::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadPrivateFile.Params.file)
}

// string name = 3;
inline void UploadPrivateFile_Params::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UploadPrivateFile_Params::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadPrivateFile.Params.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadPrivateFile_Params::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadPrivateFile.Params.name)
}
inline std::string* UploadPrivateFile_Params::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadPrivateFile.Params.name)
  return _s;
}
inline const std::string& UploadPrivateFile_Params::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UploadPrivateFile_Params::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadPrivateFile_Params::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadPrivateFile_Params::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadPrivateFile.Params.name)
  return _impl_.name_.Release();
}
inline void UploadPrivateFile_Params::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadPrivateFile.Params.name)
}

// -------------------------------------------------------------------

// UploadPrivateFile

// string action = 1;
inline void UploadPrivateFile::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& UploadPrivateFile::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadPrivateFile.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadPrivateFile::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadPrivateFile.action)
}
inline std::string* UploadPrivateFile::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadPrivateFile.action)
  return _s;
}
inline const std::string& UploadPrivateFile::_internal_action() const {
  return _impl_.action_.Get();
}
inline void UploadPrivateFile::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadPrivateFile::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadPrivateFile::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadPrivateFile.action)
  return _impl_.action_.Release();
}
inline void UploadPrivateFile::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadPrivateFile.action)
}

// .cqhttp.UploadPrivateFile.Params params = 2;
inline bool UploadPrivateFile::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool UploadPrivateFile::has_params() const {
  return _internal_has_params();
}
inline void UploadPrivateFile::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::UploadPrivateFile_Params& UploadPrivateFile::_internal_params() const {
  const ::cqhttp::UploadPrivateFile_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::UploadPrivateFile_Params&>(
      ::cqhttp::_UploadPrivateFile_Params_default_instance_);
}
inline const ::cqhttp::UploadPrivateFile_Params& UploadPrivateFile::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadPrivateFile.params)
  return _internal_params();
}
inline void UploadPrivateFile::unsafe_arena_set_allocated_params(
    ::cqhttp::UploadPrivateFile_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.UploadPrivateFile.params)
}
inline ::cqhttp::UploadPrivateFile_Params* UploadPrivateFile::release_params() {
  
  ::cqhttp::UploadPrivateFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::UploadPrivateFile_Params* UploadPrivateFile::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadPrivateFile.params)
  
  ::cqhttp::UploadPrivateFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::UploadPrivateFile_Params* UploadPrivateFile::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::UploadPrivateFile_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::UploadPrivateFile_Params* UploadPrivateFile::mutable_params() {
  ::cqhttp::UploadPrivateFile_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadPrivateFile.params)
  return _msg;
}
inline void UploadPrivateFile::set_allocated_params(::cqhttp::UploadPrivateFile_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadPrivateFile.params)
}

// -------------------------------------------------------------------

// UploadGroupFile_Params

// int64 group_id = 1;
inline void UploadGroupFile_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t UploadGroupFile_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t UploadGroupFile_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadGroupFile.Params.group_id)
  return _internal_group_id();
}
inline void UploadGroupFile_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void UploadGroupFile_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.UploadGroupFile.Params.group_id)
}

// string file = 2;
inline void UploadGroupFile_Params::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& UploadGroupFile_Params::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadGroupFile.Params.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGroupFile_Params::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadGroupFile.Params.file)
}
inline std::string* UploadGroupFile_Params::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadGroupFile.Params.file)
  return _s;
}
inline const std::string& UploadGroupFile_Params::_internal_file() const {
  return _impl_.file_.Get();
}
inline void UploadGroupFile_Params::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadGroupFile_Params::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadGroupFile_Params::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadGroupFile.Params.file)
  return _impl_.file_.Release();
}
inline void UploadGroupFile_Params::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadGroupFile.Params.file)
}

// string name = 3;
inline void UploadGroupFile_Params::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UploadGroupFile_Params::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadGroupFile.Params.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGroupFile_Params::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadGroupFile.Params.name)
}
inline std::string* UploadGroupFile_Params::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadGroupFile.Params.name)
  return _s;
}
inline const std::string& UploadGroupFile_Params::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UploadGroupFile_Params::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadGroupFile_Params::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadGroupFile_Params::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadGroupFile.Params.name)
  return _impl_.name_.Release();
}
inline void UploadGroupFile_Params::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadGroupFile.Params.name)
}

// string folder = 4;
inline void UploadGroupFile_Params::clear_folder() {
  _impl_.folder_.ClearToEmpty();
}
inline const std::string& UploadGroupFile_Params::folder() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadGroupFile.Params.folder)
  return _internal_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGroupFile_Params::set_folder(ArgT0&& arg0, ArgT... args) {
 
 _impl_.folder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadGroupFile.Params.folder)
}
inline std::string* UploadGroupFile_Params::mutable_folder() {
  std::string* _s = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadGroupFile.Params.folder)
  return _s;
}
inline const std::string& UploadGroupFile_Params::_internal_folder() const {
  return _impl_.folder_.Get();
}
inline void UploadGroupFile_Params::_internal_set_folder(const std::string& value) {
  
  _impl_.folder_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadGroupFile_Params::_internal_mutable_folder() {
  
  return _impl_.folder_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadGroupFile_Params::release_folder() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadGroupFile.Params.folder)
  return _impl_.folder_.Release();
}
inline void UploadGroupFile_Params::set_allocated_folder(std::string* folder) {
  if (folder != nullptr) {
    
  } else {
    
  }
  _impl_.folder_.SetAllocated(folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.folder_.IsDefault()) {
    _impl_.folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadGroupFile.Params.folder)
}

// -------------------------------------------------------------------

// UploadGroupFile

// string action = 1;
inline void UploadGroupFile::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& UploadGroupFile::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadGroupFile.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGroupFile::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.UploadGroupFile.action)
}
inline std::string* UploadGroupFile::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadGroupFile.action)
  return _s;
}
inline const std::string& UploadGroupFile::_internal_action() const {
  return _impl_.action_.Get();
}
inline void UploadGroupFile::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadGroupFile::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadGroupFile::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadGroupFile.action)
  return _impl_.action_.Release();
}
inline void UploadGroupFile::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadGroupFile.action)
}

// .cqhttp.UploadGroupFile.Params params = 2;
inline bool UploadGroupFile::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool UploadGroupFile::has_params() const {
  return _internal_has_params();
}
inline void UploadGroupFile::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::UploadGroupFile_Params& UploadGroupFile::_internal_params() const {
  const ::cqhttp::UploadGroupFile_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::UploadGroupFile_Params&>(
      ::cqhttp::_UploadGroupFile_Params_default_instance_);
}
inline const ::cqhttp::UploadGroupFile_Params& UploadGroupFile::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.UploadGroupFile.params)
  return _internal_params();
}
inline void UploadGroupFile::unsafe_arena_set_allocated_params(
    ::cqhttp::UploadGroupFile_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.UploadGroupFile.params)
}
inline ::cqhttp::UploadGroupFile_Params* UploadGroupFile::release_params() {
  
  ::cqhttp::UploadGroupFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::UploadGroupFile_Params* UploadGroupFile::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.UploadGroupFile.params)
  
  ::cqhttp::UploadGroupFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::UploadGroupFile_Params* UploadGroupFile::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::UploadGroupFile_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::UploadGroupFile_Params* UploadGroupFile::mutable_params() {
  ::cqhttp::UploadGroupFile_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.UploadGroupFile.params)
  return _msg;
}
inline void UploadGroupFile::set_allocated_params(::cqhttp::UploadGroupFile_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.UploadGroupFile.params)
}

// -------------------------------------------------------------------

// GetGroupFileSystemInfo_Params

// int64 group_id = 1;
inline void GetGroupFileSystemInfo_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupFileSystemInfo_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupFileSystemInfo_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfo.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupFileSystemInfo_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupFileSystemInfo_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfo.Params.group_id)
}

// -------------------------------------------------------------------

// GetGroupFileSystemInfo

// string action = 1;
inline void GetGroupFileSystemInfo::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupFileSystemInfo::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupFileSystemInfo::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfo.action)
}
inline std::string* GetGroupFileSystemInfo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileSystemInfo.action)
  return _s;
}
inline const std::string& GetGroupFileSystemInfo::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupFileSystemInfo::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupFileSystemInfo::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupFileSystemInfo::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileSystemInfo.action)
  return _impl_.action_.Release();
}
inline void GetGroupFileSystemInfo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileSystemInfo.action)
}

// .cqhttp.GetGroupFileSystemInfo.Params params = 2;
inline bool GetGroupFileSystemInfo::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupFileSystemInfo::has_params() const {
  return _internal_has_params();
}
inline void GetGroupFileSystemInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupFileSystemInfo_Params& GetGroupFileSystemInfo::_internal_params() const {
  const ::cqhttp::GetGroupFileSystemInfo_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupFileSystemInfo_Params&>(
      ::cqhttp::_GetGroupFileSystemInfo_Params_default_instance_);
}
inline const ::cqhttp::GetGroupFileSystemInfo_Params& GetGroupFileSystemInfo::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfo.params)
  return _internal_params();
}
inline void GetGroupFileSystemInfo::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupFileSystemInfo_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupFileSystemInfo.params)
}
inline ::cqhttp::GetGroupFileSystemInfo_Params* GetGroupFileSystemInfo::release_params() {
  
  ::cqhttp::GetGroupFileSystemInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupFileSystemInfo_Params* GetGroupFileSystemInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileSystemInfo.params)
  
  ::cqhttp::GetGroupFileSystemInfo_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupFileSystemInfo_Params* GetGroupFileSystemInfo::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupFileSystemInfo_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupFileSystemInfo_Params* GetGroupFileSystemInfo::mutable_params() {
  ::cqhttp::GetGroupFileSystemInfo_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileSystemInfo.params)
  return _msg;
}
inline void GetGroupFileSystemInfo::set_allocated_params(::cqhttp::GetGroupFileSystemInfo_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileSystemInfo.params)
}

// string echo = 3;
inline void GetGroupFileSystemInfo::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupFileSystemInfo::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfo.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupFileSystemInfo::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfo.echo)
}
inline std::string* GetGroupFileSystemInfo::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileSystemInfo.echo)
  return _s;
}
inline const std::string& GetGroupFileSystemInfo::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupFileSystemInfo::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupFileSystemInfo::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupFileSystemInfo::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileSystemInfo.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupFileSystemInfo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileSystemInfo.echo)
}

// -------------------------------------------------------------------

// GetGroupFileSystemInfoResp

// int32 file_count = 1;
inline void GetGroupFileSystemInfoResp::clear_file_count() {
  _impl_.file_count_ = 0;
}
inline int32_t GetGroupFileSystemInfoResp::_internal_file_count() const {
  return _impl_.file_count_;
}
inline int32_t GetGroupFileSystemInfoResp::file_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfoResp.file_count)
  return _internal_file_count();
}
inline void GetGroupFileSystemInfoResp::_internal_set_file_count(int32_t value) {
  
  _impl_.file_count_ = value;
}
inline void GetGroupFileSystemInfoResp::set_file_count(int32_t value) {
  _internal_set_file_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfoResp.file_count)
}

// int32 limit_count = 2;
inline void GetGroupFileSystemInfoResp::clear_limit_count() {
  _impl_.limit_count_ = 0;
}
inline int32_t GetGroupFileSystemInfoResp::_internal_limit_count() const {
  return _impl_.limit_count_;
}
inline int32_t GetGroupFileSystemInfoResp::limit_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfoResp.limit_count)
  return _internal_limit_count();
}
inline void GetGroupFileSystemInfoResp::_internal_set_limit_count(int32_t value) {
  
  _impl_.limit_count_ = value;
}
inline void GetGroupFileSystemInfoResp::set_limit_count(int32_t value) {
  _internal_set_limit_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfoResp.limit_count)
}

// int64 used_space = 3;
inline void GetGroupFileSystemInfoResp::clear_used_space() {
  _impl_.used_space_ = int64_t{0};
}
inline int64_t GetGroupFileSystemInfoResp::_internal_used_space() const {
  return _impl_.used_space_;
}
inline int64_t GetGroupFileSystemInfoResp::used_space() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfoResp.used_space)
  return _internal_used_space();
}
inline void GetGroupFileSystemInfoResp::_internal_set_used_space(int64_t value) {
  
  _impl_.used_space_ = value;
}
inline void GetGroupFileSystemInfoResp::set_used_space(int64_t value) {
  _internal_set_used_space(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfoResp.used_space)
}

// int64 total_space = 4;
inline void GetGroupFileSystemInfoResp::clear_total_space() {
  _impl_.total_space_ = int64_t{0};
}
inline int64_t GetGroupFileSystemInfoResp::_internal_total_space() const {
  return _impl_.total_space_;
}
inline int64_t GetGroupFileSystemInfoResp::total_space() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileSystemInfoResp.total_space)
  return _internal_total_space();
}
inline void GetGroupFileSystemInfoResp::_internal_set_total_space(int64_t value) {
  
  _impl_.total_space_ = value;
}
inline void GetGroupFileSystemInfoResp::set_total_space(int64_t value) {
  _internal_set_total_space(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileSystemInfoResp.total_space)
}

// -------------------------------------------------------------------

// GetGroupRootFiles_Params

// int64 group_id = 1;
inline void GetGroupRootFiles_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupRootFiles_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupRootFiles_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupRootFiles.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupRootFiles_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupRootFiles_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupRootFiles.Params.group_id)
}

// -------------------------------------------------------------------

// GetGroupRootFiles

// string action = 1;
inline void GetGroupRootFiles::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupRootFiles::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupRootFiles.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupRootFiles::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupRootFiles.action)
}
inline std::string* GetGroupRootFiles::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupRootFiles.action)
  return _s;
}
inline const std::string& GetGroupRootFiles::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupRootFiles::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupRootFiles::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupRootFiles::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupRootFiles.action)
  return _impl_.action_.Release();
}
inline void GetGroupRootFiles::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupRootFiles.action)
}

// .cqhttp.GetGroupRootFiles.Params params = 2;
inline bool GetGroupRootFiles::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupRootFiles::has_params() const {
  return _internal_has_params();
}
inline void GetGroupRootFiles::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupRootFiles_Params& GetGroupRootFiles::_internal_params() const {
  const ::cqhttp::GetGroupRootFiles_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupRootFiles_Params&>(
      ::cqhttp::_GetGroupRootFiles_Params_default_instance_);
}
inline const ::cqhttp::GetGroupRootFiles_Params& GetGroupRootFiles::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupRootFiles.params)
  return _internal_params();
}
inline void GetGroupRootFiles::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupRootFiles_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupRootFiles.params)
}
inline ::cqhttp::GetGroupRootFiles_Params* GetGroupRootFiles::release_params() {
  
  ::cqhttp::GetGroupRootFiles_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupRootFiles_Params* GetGroupRootFiles::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupRootFiles.params)
  
  ::cqhttp::GetGroupRootFiles_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupRootFiles_Params* GetGroupRootFiles::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupRootFiles_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupRootFiles_Params* GetGroupRootFiles::mutable_params() {
  ::cqhttp::GetGroupRootFiles_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupRootFiles.params)
  return _msg;
}
inline void GetGroupRootFiles::set_allocated_params(::cqhttp::GetGroupRootFiles_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupRootFiles.params)
}

// string echo = 3;
inline void GetGroupRootFiles::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupRootFiles::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupRootFiles.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupRootFiles::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupRootFiles.echo)
}
inline std::string* GetGroupRootFiles::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupRootFiles.echo)
  return _s;
}
inline const std::string& GetGroupRootFiles::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupRootFiles::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupRootFiles::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupRootFiles::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupRootFiles.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupRootFiles::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupRootFiles.echo)
}

// -------------------------------------------------------------------

// GetGroupRootFilesResp

// repeated .cqhttp.File files = 1;
inline int GetGroupRootFilesResp::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int GetGroupRootFilesResp::files_size() const {
  return _internal_files_size();
}
inline ::cqhttp::File* GetGroupRootFilesResp::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupRootFilesResp.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >*
GetGroupRootFilesResp::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupRootFilesResp.files)
  return &_impl_.files_;
}
inline const ::cqhttp::File& GetGroupRootFilesResp::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::cqhttp::File& GetGroupRootFilesResp::files(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupRootFilesResp.files)
  return _internal_files(index);
}
inline ::cqhttp::File* GetGroupRootFilesResp::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::cqhttp::File* GetGroupRootFilesResp::add_files() {
  ::cqhttp::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupRootFilesResp.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >&
GetGroupRootFilesResp::files() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupRootFilesResp.files)
  return _impl_.files_;
}

// repeated .cqhttp.Folder folders = 2;
inline int GetGroupRootFilesResp::_internal_folders_size() const {
  return _impl_.folders_.size();
}
inline int GetGroupRootFilesResp::folders_size() const {
  return _internal_folders_size();
}
inline ::cqhttp::Folder* GetGroupRootFilesResp::mutable_folders(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupRootFilesResp.folders)
  return _impl_.folders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >*
GetGroupRootFilesResp::mutable_folders() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupRootFilesResp.folders)
  return &_impl_.folders_;
}
inline const ::cqhttp::Folder& GetGroupRootFilesResp::_internal_folders(int index) const {
  return _impl_.folders_.Get(index);
}
inline const ::cqhttp::Folder& GetGroupRootFilesResp::folders(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupRootFilesResp.folders)
  return _internal_folders(index);
}
inline ::cqhttp::Folder* GetGroupRootFilesResp::_internal_add_folders() {
  return _impl_.folders_.Add();
}
inline ::cqhttp::Folder* GetGroupRootFilesResp::add_folders() {
  ::cqhttp::Folder* _add = _internal_add_folders();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupRootFilesResp.folders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >&
GetGroupRootFilesResp::folders() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupRootFilesResp.folders)
  return _impl_.folders_;
}

// -------------------------------------------------------------------

// getGroupFileByFolder_Params

// int64 group_id = 1;
inline void getGroupFileByFolder_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t getGroupFileByFolder_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t getGroupFileByFolder_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolder.Params.group_id)
  return _internal_group_id();
}
inline void getGroupFileByFolder_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void getGroupFileByFolder_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.getGroupFileByFolder.Params.group_id)
}

// string folder_id = 2;
inline void getGroupFileByFolder_Params::clear_folder_id() {
  _impl_.folder_id_.ClearToEmpty();
}
inline const std::string& getGroupFileByFolder_Params::folder_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolder.Params.folder_id)
  return _internal_folder_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getGroupFileByFolder_Params::set_folder_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.folder_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getGroupFileByFolder.Params.folder_id)
}
inline std::string* getGroupFileByFolder_Params::mutable_folder_id() {
  std::string* _s = _internal_mutable_folder_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.getGroupFileByFolder.Params.folder_id)
  return _s;
}
inline const std::string& getGroupFileByFolder_Params::_internal_folder_id() const {
  return _impl_.folder_id_.Get();
}
inline void getGroupFileByFolder_Params::_internal_set_folder_id(const std::string& value) {
  
  _impl_.folder_id_.Set(value, GetArenaForAllocation());
}
inline std::string* getGroupFileByFolder_Params::_internal_mutable_folder_id() {
  
  return _impl_.folder_id_.Mutable(GetArenaForAllocation());
}
inline std::string* getGroupFileByFolder_Params::release_folder_id() {
  // @@protoc_insertion_point(field_release:cqhttp.getGroupFileByFolder.Params.folder_id)
  return _impl_.folder_id_.Release();
}
inline void getGroupFileByFolder_Params::set_allocated_folder_id(std::string* folder_id) {
  if (folder_id != nullptr) {
    
  } else {
    
  }
  _impl_.folder_id_.SetAllocated(folder_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.folder_id_.IsDefault()) {
    _impl_.folder_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getGroupFileByFolder.Params.folder_id)
}

// -------------------------------------------------------------------

// getGroupFileByFolder

// string action = 1;
inline void getGroupFileByFolder::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& getGroupFileByFolder::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolder.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getGroupFileByFolder::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getGroupFileByFolder.action)
}
inline std::string* getGroupFileByFolder::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.getGroupFileByFolder.action)
  return _s;
}
inline const std::string& getGroupFileByFolder::_internal_action() const {
  return _impl_.action_.Get();
}
inline void getGroupFileByFolder::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* getGroupFileByFolder::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* getGroupFileByFolder::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.getGroupFileByFolder.action)
  return _impl_.action_.Release();
}
inline void getGroupFileByFolder::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getGroupFileByFolder.action)
}

// .cqhttp.getGroupFileByFolder.Params params = 2;
inline bool getGroupFileByFolder::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool getGroupFileByFolder::has_params() const {
  return _internal_has_params();
}
inline void getGroupFileByFolder::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::getGroupFileByFolder_Params& getGroupFileByFolder::_internal_params() const {
  const ::cqhttp::getGroupFileByFolder_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::getGroupFileByFolder_Params&>(
      ::cqhttp::_getGroupFileByFolder_Params_default_instance_);
}
inline const ::cqhttp::getGroupFileByFolder_Params& getGroupFileByFolder::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolder.params)
  return _internal_params();
}
inline void getGroupFileByFolder::unsafe_arena_set_allocated_params(
    ::cqhttp::getGroupFileByFolder_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.getGroupFileByFolder.params)
}
inline ::cqhttp::getGroupFileByFolder_Params* getGroupFileByFolder::release_params() {
  
  ::cqhttp::getGroupFileByFolder_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::getGroupFileByFolder_Params* getGroupFileByFolder::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.getGroupFileByFolder.params)
  
  ::cqhttp::getGroupFileByFolder_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::getGroupFileByFolder_Params* getGroupFileByFolder::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::getGroupFileByFolder_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::getGroupFileByFolder_Params* getGroupFileByFolder::mutable_params() {
  ::cqhttp::getGroupFileByFolder_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.getGroupFileByFolder.params)
  return _msg;
}
inline void getGroupFileByFolder::set_allocated_params(::cqhttp::getGroupFileByFolder_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getGroupFileByFolder.params)
}

// string echo = 3;
inline void getGroupFileByFolder::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& getGroupFileByFolder::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolder.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getGroupFileByFolder::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.getGroupFileByFolder.echo)
}
inline std::string* getGroupFileByFolder::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.getGroupFileByFolder.echo)
  return _s;
}
inline const std::string& getGroupFileByFolder::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void getGroupFileByFolder::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* getGroupFileByFolder::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* getGroupFileByFolder::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.getGroupFileByFolder.echo)
  return _impl_.echo_.Release();
}
inline void getGroupFileByFolder::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.getGroupFileByFolder.echo)
}

// -------------------------------------------------------------------

// getGroupFileByFolderResp

// repeated .cqhttp.File files = 1;
inline int getGroupFileByFolderResp::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int getGroupFileByFolderResp::files_size() const {
  return _internal_files_size();
}
inline ::cqhttp::File* getGroupFileByFolderResp::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.getGroupFileByFolderResp.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >*
getGroupFileByFolderResp::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.getGroupFileByFolderResp.files)
  return &_impl_.files_;
}
inline const ::cqhttp::File& getGroupFileByFolderResp::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::cqhttp::File& getGroupFileByFolderResp::files(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolderResp.files)
  return _internal_files(index);
}
inline ::cqhttp::File* getGroupFileByFolderResp::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::cqhttp::File* getGroupFileByFolderResp::add_files() {
  ::cqhttp::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:cqhttp.getGroupFileByFolderResp.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::File >&
getGroupFileByFolderResp::files() const {
  // @@protoc_insertion_point(field_list:cqhttp.getGroupFileByFolderResp.files)
  return _impl_.files_;
}

// repeated .cqhttp.Folder folders = 2;
inline int getGroupFileByFolderResp::_internal_folders_size() const {
  return _impl_.folders_.size();
}
inline int getGroupFileByFolderResp::folders_size() const {
  return _internal_folders_size();
}
inline ::cqhttp::Folder* getGroupFileByFolderResp::mutable_folders(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.getGroupFileByFolderResp.folders)
  return _impl_.folders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >*
getGroupFileByFolderResp::mutable_folders() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.getGroupFileByFolderResp.folders)
  return &_impl_.folders_;
}
inline const ::cqhttp::Folder& getGroupFileByFolderResp::_internal_folders(int index) const {
  return _impl_.folders_.Get(index);
}
inline const ::cqhttp::Folder& getGroupFileByFolderResp::folders(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.getGroupFileByFolderResp.folders)
  return _internal_folders(index);
}
inline ::cqhttp::Folder* getGroupFileByFolderResp::_internal_add_folders() {
  return _impl_.folders_.Add();
}
inline ::cqhttp::Folder* getGroupFileByFolderResp::add_folders() {
  ::cqhttp::Folder* _add = _internal_add_folders();
  // @@protoc_insertion_point(field_add:cqhttp.getGroupFileByFolderResp.folders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Folder >&
getGroupFileByFolderResp::folders() const {
  // @@protoc_insertion_point(field_list:cqhttp.getGroupFileByFolderResp.folders)
  return _impl_.folders_;
}

// -------------------------------------------------------------------

// CreateGroupFileFolder_Params

// int64 group_id = 1;
inline void CreateGroupFileFolder_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t CreateGroupFileFolder_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t CreateGroupFileFolder_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.CreateGroupFileFolder.Params.group_id)
  return _internal_group_id();
}
inline void CreateGroupFileFolder_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void CreateGroupFileFolder_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.CreateGroupFileFolder.Params.group_id)
}

// string name = 2;
inline void CreateGroupFileFolder_Params::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateGroupFileFolder_Params::name() const {
  // @@protoc_insertion_point(field_get:cqhttp.CreateGroupFileFolder.Params.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupFileFolder_Params::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CreateGroupFileFolder.Params.name)
}
inline std::string* CreateGroupFileFolder_Params::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cqhttp.CreateGroupFileFolder.Params.name)
  return _s;
}
inline const std::string& CreateGroupFileFolder_Params::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateGroupFileFolder_Params::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupFileFolder_Params::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupFileFolder_Params::release_name() {
  // @@protoc_insertion_point(field_release:cqhttp.CreateGroupFileFolder.Params.name)
  return _impl_.name_.Release();
}
inline void CreateGroupFileFolder_Params::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CreateGroupFileFolder.Params.name)
}

// string parent_id = 3;
inline void CreateGroupFileFolder_Params::clear_parent_id() {
  _impl_.parent_id_.ClearToEmpty();
}
inline const std::string& CreateGroupFileFolder_Params::parent_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.CreateGroupFileFolder.Params.parent_id)
  return _internal_parent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupFileFolder_Params::set_parent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CreateGroupFileFolder.Params.parent_id)
}
inline std::string* CreateGroupFileFolder_Params::mutable_parent_id() {
  std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.CreateGroupFileFolder.Params.parent_id)
  return _s;
}
inline const std::string& CreateGroupFileFolder_Params::_internal_parent_id() const {
  return _impl_.parent_id_.Get();
}
inline void CreateGroupFileFolder_Params::_internal_set_parent_id(const std::string& value) {
  
  _impl_.parent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupFileFolder_Params::_internal_mutable_parent_id() {
  
  return _impl_.parent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupFileFolder_Params::release_parent_id() {
  // @@protoc_insertion_point(field_release:cqhttp.CreateGroupFileFolder.Params.parent_id)
  return _impl_.parent_id_.Release();
}
inline void CreateGroupFileFolder_Params::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  _impl_.parent_id_.SetAllocated(parent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_id_.IsDefault()) {
    _impl_.parent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CreateGroupFileFolder.Params.parent_id)
}

// -------------------------------------------------------------------

// CreateGroupFileFolder

// string action = 1;
inline void CreateGroupFileFolder::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& CreateGroupFileFolder::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.CreateGroupFileFolder.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupFileFolder::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CreateGroupFileFolder.action)
}
inline std::string* CreateGroupFileFolder::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.CreateGroupFileFolder.action)
  return _s;
}
inline const std::string& CreateGroupFileFolder::_internal_action() const {
  return _impl_.action_.Get();
}
inline void CreateGroupFileFolder::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupFileFolder::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupFileFolder::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.CreateGroupFileFolder.action)
  return _impl_.action_.Release();
}
inline void CreateGroupFileFolder::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CreateGroupFileFolder.action)
}

// .cqhttp.CreateGroupFileFolder.Params params = 2;
inline bool CreateGroupFileFolder::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool CreateGroupFileFolder::has_params() const {
  return _internal_has_params();
}
inline void CreateGroupFileFolder::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::CreateGroupFileFolder_Params& CreateGroupFileFolder::_internal_params() const {
  const ::cqhttp::CreateGroupFileFolder_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::CreateGroupFileFolder_Params&>(
      ::cqhttp::_CreateGroupFileFolder_Params_default_instance_);
}
inline const ::cqhttp::CreateGroupFileFolder_Params& CreateGroupFileFolder::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.CreateGroupFileFolder.params)
  return _internal_params();
}
inline void CreateGroupFileFolder::unsafe_arena_set_allocated_params(
    ::cqhttp::CreateGroupFileFolder_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.CreateGroupFileFolder.params)
}
inline ::cqhttp::CreateGroupFileFolder_Params* CreateGroupFileFolder::release_params() {
  
  ::cqhttp::CreateGroupFileFolder_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::CreateGroupFileFolder_Params* CreateGroupFileFolder::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.CreateGroupFileFolder.params)
  
  ::cqhttp::CreateGroupFileFolder_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::CreateGroupFileFolder_Params* CreateGroupFileFolder::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::CreateGroupFileFolder_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::CreateGroupFileFolder_Params* CreateGroupFileFolder::mutable_params() {
  ::cqhttp::CreateGroupFileFolder_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.CreateGroupFileFolder.params)
  return _msg;
}
inline void CreateGroupFileFolder::set_allocated_params(::cqhttp::CreateGroupFileFolder_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CreateGroupFileFolder.params)
}

// -------------------------------------------------------------------

// DeleteGroupFolder_Params

// int64 group_id = 1;
inline void DeleteGroupFolder_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t DeleteGroupFolder_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t DeleteGroupFolder_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFolder.Params.group_id)
  return _internal_group_id();
}
inline void DeleteGroupFolder_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void DeleteGroupFolder_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFolder.Params.group_id)
}

// string folder_id = 2;
inline void DeleteGroupFolder_Params::clear_folder_id() {
  _impl_.folder_id_.ClearToEmpty();
}
inline const std::string& DeleteGroupFolder_Params::folder_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFolder.Params.folder_id)
  return _internal_folder_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteGroupFolder_Params::set_folder_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.folder_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFolder.Params.folder_id)
}
inline std::string* DeleteGroupFolder_Params::mutable_folder_id() {
  std::string* _s = _internal_mutable_folder_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteGroupFolder.Params.folder_id)
  return _s;
}
inline const std::string& DeleteGroupFolder_Params::_internal_folder_id() const {
  return _impl_.folder_id_.Get();
}
inline void DeleteGroupFolder_Params::_internal_set_folder_id(const std::string& value) {
  
  _impl_.folder_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteGroupFolder_Params::_internal_mutable_folder_id() {
  
  return _impl_.folder_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteGroupFolder_Params::release_folder_id() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteGroupFolder.Params.folder_id)
  return _impl_.folder_id_.Release();
}
inline void DeleteGroupFolder_Params::set_allocated_folder_id(std::string* folder_id) {
  if (folder_id != nullptr) {
    
  } else {
    
  }
  _impl_.folder_id_.SetAllocated(folder_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.folder_id_.IsDefault()) {
    _impl_.folder_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteGroupFolder.Params.folder_id)
}

// -------------------------------------------------------------------

// DeleteGroupFolder

// string action = 1;
inline void DeleteGroupFolder::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DeleteGroupFolder::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFolder.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteGroupFolder::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFolder.action)
}
inline std::string* DeleteGroupFolder::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteGroupFolder.action)
  return _s;
}
inline const std::string& DeleteGroupFolder::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DeleteGroupFolder::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteGroupFolder::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteGroupFolder::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteGroupFolder.action)
  return _impl_.action_.Release();
}
inline void DeleteGroupFolder::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteGroupFolder.action)
}

// .cqhttp.DeleteGroupFolder.Params params = 2;
inline bool DeleteGroupFolder::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DeleteGroupFolder::has_params() const {
  return _internal_has_params();
}
inline void DeleteGroupFolder::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DeleteGroupFolder_Params& DeleteGroupFolder::_internal_params() const {
  const ::cqhttp::DeleteGroupFolder_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DeleteGroupFolder_Params&>(
      ::cqhttp::_DeleteGroupFolder_Params_default_instance_);
}
inline const ::cqhttp::DeleteGroupFolder_Params& DeleteGroupFolder::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFolder.params)
  return _internal_params();
}
inline void DeleteGroupFolder::unsafe_arena_set_allocated_params(
    ::cqhttp::DeleteGroupFolder_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DeleteGroupFolder.params)
}
inline ::cqhttp::DeleteGroupFolder_Params* DeleteGroupFolder::release_params() {
  
  ::cqhttp::DeleteGroupFolder_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DeleteGroupFolder_Params* DeleteGroupFolder::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteGroupFolder.params)
  
  ::cqhttp::DeleteGroupFolder_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DeleteGroupFolder_Params* DeleteGroupFolder::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DeleteGroupFolder_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DeleteGroupFolder_Params* DeleteGroupFolder::mutable_params() {
  ::cqhttp::DeleteGroupFolder_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteGroupFolder.params)
  return _msg;
}
inline void DeleteGroupFolder::set_allocated_params(::cqhttp::DeleteGroupFolder_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteGroupFolder.params)
}

// -------------------------------------------------------------------

// DeleteGroupFile_Params

// int64 group_id = 1;
inline void DeleteGroupFile_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t DeleteGroupFile_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t DeleteGroupFile_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFile.Params.group_id)
  return _internal_group_id();
}
inline void DeleteGroupFile_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void DeleteGroupFile_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFile.Params.group_id)
}

// string file_id = 2;
inline void DeleteGroupFile_Params::clear_file_id() {
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& DeleteGroupFile_Params::file_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFile.Params.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteGroupFile_Params::set_file_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFile.Params.file_id)
}
inline std::string* DeleteGroupFile_Params::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteGroupFile.Params.file_id)
  return _s;
}
inline const std::string& DeleteGroupFile_Params::_internal_file_id() const {
  return _impl_.file_id_.Get();
}
inline void DeleteGroupFile_Params::_internal_set_file_id(const std::string& value) {
  
  _impl_.file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteGroupFile_Params::_internal_mutable_file_id() {
  
  return _impl_.file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteGroupFile_Params::release_file_id() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteGroupFile.Params.file_id)
  return _impl_.file_id_.Release();
}
inline void DeleteGroupFile_Params::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  _impl_.file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteGroupFile.Params.file_id)
}

// int32 busid = 3;
inline void DeleteGroupFile_Params::clear_busid() {
  _impl_.busid_ = 0;
}
inline int32_t DeleteGroupFile_Params::_internal_busid() const {
  return _impl_.busid_;
}
inline int32_t DeleteGroupFile_Params::busid() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFile.Params.busid)
  return _internal_busid();
}
inline void DeleteGroupFile_Params::_internal_set_busid(int32_t value) {
  
  _impl_.busid_ = value;
}
inline void DeleteGroupFile_Params::set_busid(int32_t value) {
  _internal_set_busid(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFile.Params.busid)
}

// -------------------------------------------------------------------

// DeleteGroupFile

// string action = 1;
inline void DeleteGroupFile::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DeleteGroupFile::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFile.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteGroupFile::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteGroupFile.action)
}
inline std::string* DeleteGroupFile::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteGroupFile.action)
  return _s;
}
inline const std::string& DeleteGroupFile::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DeleteGroupFile::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteGroupFile::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteGroupFile::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteGroupFile.action)
  return _impl_.action_.Release();
}
inline void DeleteGroupFile::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteGroupFile.action)
}

// .cqhttp.DeleteGroupFile.Params params = 2;
inline bool DeleteGroupFile::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DeleteGroupFile::has_params() const {
  return _internal_has_params();
}
inline void DeleteGroupFile::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DeleteGroupFile_Params& DeleteGroupFile::_internal_params() const {
  const ::cqhttp::DeleteGroupFile_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DeleteGroupFile_Params&>(
      ::cqhttp::_DeleteGroupFile_Params_default_instance_);
}
inline const ::cqhttp::DeleteGroupFile_Params& DeleteGroupFile::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteGroupFile.params)
  return _internal_params();
}
inline void DeleteGroupFile::unsafe_arena_set_allocated_params(
    ::cqhttp::DeleteGroupFile_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DeleteGroupFile.params)
}
inline ::cqhttp::DeleteGroupFile_Params* DeleteGroupFile::release_params() {
  
  ::cqhttp::DeleteGroupFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DeleteGroupFile_Params* DeleteGroupFile::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteGroupFile.params)
  
  ::cqhttp::DeleteGroupFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DeleteGroupFile_Params* DeleteGroupFile::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DeleteGroupFile_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DeleteGroupFile_Params* DeleteGroupFile::mutable_params() {
  ::cqhttp::DeleteGroupFile_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteGroupFile.params)
  return _msg;
}
inline void DeleteGroupFile::set_allocated_params(::cqhttp::DeleteGroupFile_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteGroupFile.params)
}

// -------------------------------------------------------------------

// GetGroupFileUrl_Params

// int64 group_id = 1;
inline void GetGroupFileUrl_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupFileUrl_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupFileUrl_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrl.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupFileUrl_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupFileUrl_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileUrl.Params.group_id)
}

// string file_id = 2;
inline void GetGroupFileUrl_Params::clear_file_id() {
  _impl_.file_id_.ClearToEmpty();
}
inline const std::string& GetGroupFileUrl_Params::file_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrl.Params.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupFileUrl_Params::set_file_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileUrl.Params.file_id)
}
inline std::string* GetGroupFileUrl_Params::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileUrl.Params.file_id)
  return _s;
}
inline const std::string& GetGroupFileUrl_Params::_internal_file_id() const {
  return _impl_.file_id_.Get();
}
inline void GetGroupFileUrl_Params::_internal_set_file_id(const std::string& value) {
  
  _impl_.file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupFileUrl_Params::_internal_mutable_file_id() {
  
  return _impl_.file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupFileUrl_Params::release_file_id() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileUrl.Params.file_id)
  return _impl_.file_id_.Release();
}
inline void GetGroupFileUrl_Params::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  _impl_.file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileUrl.Params.file_id)
}

// int32 busid = 3;
inline void GetGroupFileUrl_Params::clear_busid() {
  _impl_.busid_ = 0;
}
inline int32_t GetGroupFileUrl_Params::_internal_busid() const {
  return _impl_.busid_;
}
inline int32_t GetGroupFileUrl_Params::busid() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrl.Params.busid)
  return _internal_busid();
}
inline void GetGroupFileUrl_Params::_internal_set_busid(int32_t value) {
  
  _impl_.busid_ = value;
}
inline void GetGroupFileUrl_Params::set_busid(int32_t value) {
  _internal_set_busid(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileUrl.Params.busid)
}

// -------------------------------------------------------------------

// GetGroupFileUrl

// string action = 1;
inline void GetGroupFileUrl::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupFileUrl::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrl.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupFileUrl::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileUrl.action)
}
inline std::string* GetGroupFileUrl::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileUrl.action)
  return _s;
}
inline const std::string& GetGroupFileUrl::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupFileUrl::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupFileUrl::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupFileUrl::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileUrl.action)
  return _impl_.action_.Release();
}
inline void GetGroupFileUrl::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileUrl.action)
}

// .cqhttp.GetGroupFileUrl.Params params = 2;
inline bool GetGroupFileUrl::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupFileUrl::has_params() const {
  return _internal_has_params();
}
inline void GetGroupFileUrl::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupFileUrl_Params& GetGroupFileUrl::_internal_params() const {
  const ::cqhttp::GetGroupFileUrl_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupFileUrl_Params&>(
      ::cqhttp::_GetGroupFileUrl_Params_default_instance_);
}
inline const ::cqhttp::GetGroupFileUrl_Params& GetGroupFileUrl::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrl.params)
  return _internal_params();
}
inline void GetGroupFileUrl::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupFileUrl_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupFileUrl.params)
}
inline ::cqhttp::GetGroupFileUrl_Params* GetGroupFileUrl::release_params() {
  
  ::cqhttp::GetGroupFileUrl_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupFileUrl_Params* GetGroupFileUrl::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileUrl.params)
  
  ::cqhttp::GetGroupFileUrl_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupFileUrl_Params* GetGroupFileUrl::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupFileUrl_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupFileUrl_Params* GetGroupFileUrl::mutable_params() {
  ::cqhttp::GetGroupFileUrl_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileUrl.params)
  return _msg;
}
inline void GetGroupFileUrl::set_allocated_params(::cqhttp::GetGroupFileUrl_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileUrl.params)
}

// string echo = 3;
inline void GetGroupFileUrl::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupFileUrl::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrl.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupFileUrl::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileUrl.echo)
}
inline std::string* GetGroupFileUrl::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileUrl.echo)
  return _s;
}
inline const std::string& GetGroupFileUrl::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupFileUrl::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupFileUrl::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupFileUrl::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileUrl.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupFileUrl::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileUrl.echo)
}

// -------------------------------------------------------------------

// GetGroupFileUrlResp

// string url = 1;
inline void GetGroupFileUrlResp::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& GetGroupFileUrlResp::url() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupFileUrlResp.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupFileUrlResp::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupFileUrlResp.url)
}
inline std::string* GetGroupFileUrlResp::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupFileUrlResp.url)
  return _s;
}
inline const std::string& GetGroupFileUrlResp::_internal_url() const {
  return _impl_.url_.Get();
}
inline void GetGroupFileUrlResp::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupFileUrlResp::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupFileUrlResp::release_url() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupFileUrlResp.url)
  return _impl_.url_.Release();
}
inline void GetGroupFileUrlResp::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupFileUrlResp.url)
}

// -------------------------------------------------------------------

// GetStatus

// string action = 1;
inline void GetStatus::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetStatus::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatus.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStatus::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStatus.action)
}
inline std::string* GetStatus::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStatus.action)
  return _s;
}
inline const std::string& GetStatus::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetStatus::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStatus::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStatus::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStatus.action)
  return _impl_.action_.Release();
}
inline void GetStatus::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStatus.action)
}

// string echo = 2;
inline void GetStatus::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetStatus::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatus.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStatus::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetStatus.echo)
}
inline std::string* GetStatus::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStatus.echo)
  return _s;
}
inline const std::string& GetStatus::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetStatus::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStatus::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStatus::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStatus.echo)
  return _impl_.echo_.Release();
}
inline void GetStatus::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStatus.echo)
}

// -------------------------------------------------------------------

// GetStatusResp_Statistics

// uint64 PacketReceived = 1;
inline void GetStatusResp_Statistics::clear_packetreceived() {
  _impl_.packetreceived_ = uint64_t{0u};
}
inline uint64_t GetStatusResp_Statistics::_internal_packetreceived() const {
  return _impl_.packetreceived_;
}
inline uint64_t GetStatusResp_Statistics::packetreceived() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.PacketReceived)
  return _internal_packetreceived();
}
inline void GetStatusResp_Statistics::_internal_set_packetreceived(uint64_t value) {
  
  _impl_.packetreceived_ = value;
}
inline void GetStatusResp_Statistics::set_packetreceived(uint64_t value) {
  _internal_set_packetreceived(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.PacketReceived)
}

// uint64 PacketSent = 2;
inline void GetStatusResp_Statistics::clear_packetsent() {
  _impl_.packetsent_ = uint64_t{0u};
}
inline uint64_t GetStatusResp_Statistics::_internal_packetsent() const {
  return _impl_.packetsent_;
}
inline uint64_t GetStatusResp_Statistics::packetsent() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.PacketSent)
  return _internal_packetsent();
}
inline void GetStatusResp_Statistics::_internal_set_packetsent(uint64_t value) {
  
  _impl_.packetsent_ = value;
}
inline void GetStatusResp_Statistics::set_packetsent(uint64_t value) {
  _internal_set_packetsent(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.PacketSent)
}

// uint32 PacketLost = 3;
inline void GetStatusResp_Statistics::clear_packetlost() {
  _impl_.packetlost_ = 0u;
}
inline uint32_t GetStatusResp_Statistics::_internal_packetlost() const {
  return _impl_.packetlost_;
}
inline uint32_t GetStatusResp_Statistics::packetlost() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.PacketLost)
  return _internal_packetlost();
}
inline void GetStatusResp_Statistics::_internal_set_packetlost(uint32_t value) {
  
  _impl_.packetlost_ = value;
}
inline void GetStatusResp_Statistics::set_packetlost(uint32_t value) {
  _internal_set_packetlost(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.PacketLost)
}

// uint64 MessageReceived = 4;
inline void GetStatusResp_Statistics::clear_messagereceived() {
  _impl_.messagereceived_ = uint64_t{0u};
}
inline uint64_t GetStatusResp_Statistics::_internal_messagereceived() const {
  return _impl_.messagereceived_;
}
inline uint64_t GetStatusResp_Statistics::messagereceived() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.MessageReceived)
  return _internal_messagereceived();
}
inline void GetStatusResp_Statistics::_internal_set_messagereceived(uint64_t value) {
  
  _impl_.messagereceived_ = value;
}
inline void GetStatusResp_Statistics::set_messagereceived(uint64_t value) {
  _internal_set_messagereceived(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.MessageReceived)
}

// uint64 MessageSent = 5;
inline void GetStatusResp_Statistics::clear_messagesent() {
  _impl_.messagesent_ = uint64_t{0u};
}
inline uint64_t GetStatusResp_Statistics::_internal_messagesent() const {
  return _impl_.messagesent_;
}
inline uint64_t GetStatusResp_Statistics::messagesent() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.MessageSent)
  return _internal_messagesent();
}
inline void GetStatusResp_Statistics::_internal_set_messagesent(uint64_t value) {
  
  _impl_.messagesent_ = value;
}
inline void GetStatusResp_Statistics::set_messagesent(uint64_t value) {
  _internal_set_messagesent(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.MessageSent)
}

// uint32 DisconnectTimes = 6;
inline void GetStatusResp_Statistics::clear_disconnecttimes() {
  _impl_.disconnecttimes_ = 0u;
}
inline uint32_t GetStatusResp_Statistics::_internal_disconnecttimes() const {
  return _impl_.disconnecttimes_;
}
inline uint32_t GetStatusResp_Statistics::disconnecttimes() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.DisconnectTimes)
  return _internal_disconnecttimes();
}
inline void GetStatusResp_Statistics::_internal_set_disconnecttimes(uint32_t value) {
  
  _impl_.disconnecttimes_ = value;
}
inline void GetStatusResp_Statistics::set_disconnecttimes(uint32_t value) {
  _internal_set_disconnecttimes(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.DisconnectTimes)
}

// uint32 LostTimes = 7;
inline void GetStatusResp_Statistics::clear_losttimes() {
  _impl_.losttimes_ = 0u;
}
inline uint32_t GetStatusResp_Statistics::_internal_losttimes() const {
  return _impl_.losttimes_;
}
inline uint32_t GetStatusResp_Statistics::losttimes() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.LostTimes)
  return _internal_losttimes();
}
inline void GetStatusResp_Statistics::_internal_set_losttimes(uint32_t value) {
  
  _impl_.losttimes_ = value;
}
inline void GetStatusResp_Statistics::set_losttimes(uint32_t value) {
  _internal_set_losttimes(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.LostTimes)
}

// int64 LastMessageTime = 8;
inline void GetStatusResp_Statistics::clear_lastmessagetime() {
  _impl_.lastmessagetime_ = int64_t{0};
}
inline int64_t GetStatusResp_Statistics::_internal_lastmessagetime() const {
  return _impl_.lastmessagetime_;
}
inline int64_t GetStatusResp_Statistics::lastmessagetime() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.Statistics.LastMessageTime)
  return _internal_lastmessagetime();
}
inline void GetStatusResp_Statistics::_internal_set_lastmessagetime(int64_t value) {
  
  _impl_.lastmessagetime_ = value;
}
inline void GetStatusResp_Statistics::set_lastmessagetime(int64_t value) {
  _internal_set_lastmessagetime(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.Statistics.LastMessageTime)
}

// -------------------------------------------------------------------

// GetStatusResp

// bool app_initialized = 1;
inline void GetStatusResp::clear_app_initialized() {
  _impl_.app_initialized_ = false;
}
inline bool GetStatusResp::_internal_app_initialized() const {
  return _impl_.app_initialized_;
}
inline bool GetStatusResp::app_initialized() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.app_initialized)
  return _internal_app_initialized();
}
inline void GetStatusResp::_internal_set_app_initialized(bool value) {
  
  _impl_.app_initialized_ = value;
}
inline void GetStatusResp::set_app_initialized(bool value) {
  _internal_set_app_initialized(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.app_initialized)
}

// bool app_enabled = 2;
inline void GetStatusResp::clear_app_enabled() {
  _impl_.app_enabled_ = false;
}
inline bool GetStatusResp::_internal_app_enabled() const {
  return _impl_.app_enabled_;
}
inline bool GetStatusResp::app_enabled() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.app_enabled)
  return _internal_app_enabled();
}
inline void GetStatusResp::_internal_set_app_enabled(bool value) {
  
  _impl_.app_enabled_ = value;
}
inline void GetStatusResp::set_app_enabled(bool value) {
  _internal_set_app_enabled(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.app_enabled)
}

// bool plugins_good = 3;
inline void GetStatusResp::clear_plugins_good() {
  _impl_.plugins_good_ = false;
}
inline bool GetStatusResp::_internal_plugins_good() const {
  return _impl_.plugins_good_;
}
inline bool GetStatusResp::plugins_good() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.plugins_good)
  return _internal_plugins_good();
}
inline void GetStatusResp::_internal_set_plugins_good(bool value) {
  
  _impl_.plugins_good_ = value;
}
inline void GetStatusResp::set_plugins_good(bool value) {
  _internal_set_plugins_good(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.plugins_good)
}

// bool app_good = 4;
inline void GetStatusResp::clear_app_good() {
  _impl_.app_good_ = false;
}
inline bool GetStatusResp::_internal_app_good() const {
  return _impl_.app_good_;
}
inline bool GetStatusResp::app_good() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.app_good)
  return _internal_app_good();
}
inline void GetStatusResp::_internal_set_app_good(bool value) {
  
  _impl_.app_good_ = value;
}
inline void GetStatusResp::set_app_good(bool value) {
  _internal_set_app_good(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.app_good)
}

// bool online = 5;
inline void GetStatusResp::clear_online() {
  _impl_.online_ = false;
}
inline bool GetStatusResp::_internal_online() const {
  return _impl_.online_;
}
inline bool GetStatusResp::online() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.online)
  return _internal_online();
}
inline void GetStatusResp::_internal_set_online(bool value) {
  
  _impl_.online_ = value;
}
inline void GetStatusResp::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.online)
}

// bool good = 6;
inline void GetStatusResp::clear_good() {
  _impl_.good_ = false;
}
inline bool GetStatusResp::_internal_good() const {
  return _impl_.good_;
}
inline bool GetStatusResp::good() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.good)
  return _internal_good();
}
inline void GetStatusResp::_internal_set_good(bool value) {
  
  _impl_.good_ = value;
}
inline void GetStatusResp::set_good(bool value) {
  _internal_set_good(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetStatusResp.good)
}

// .cqhttp.GetStatusResp.Statistics stat = 7;
inline bool GetStatusResp::_internal_has_stat() const {
  return this != internal_default_instance() && _impl_.stat_ != nullptr;
}
inline bool GetStatusResp::has_stat() const {
  return _internal_has_stat();
}
inline void GetStatusResp::clear_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
}
inline const ::cqhttp::GetStatusResp_Statistics& GetStatusResp::_internal_stat() const {
  const ::cqhttp::GetStatusResp_Statistics* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetStatusResp_Statistics&>(
      ::cqhttp::_GetStatusResp_Statistics_default_instance_);
}
inline const ::cqhttp::GetStatusResp_Statistics& GetStatusResp::stat() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetStatusResp.stat)
  return _internal_stat();
}
inline void GetStatusResp::unsafe_arena_set_allocated_stat(
    ::cqhttp::GetStatusResp_Statistics* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetStatusResp.stat)
}
inline ::cqhttp::GetStatusResp_Statistics* GetStatusResp::release_stat() {
  
  ::cqhttp::GetStatusResp_Statistics* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetStatusResp_Statistics* GetStatusResp::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:cqhttp.GetStatusResp.stat)
  
  ::cqhttp::GetStatusResp_Statistics* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::cqhttp::GetStatusResp_Statistics* GetStatusResp::_internal_mutable_stat() {
  
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetStatusResp_Statistics>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::cqhttp::GetStatusResp_Statistics* GetStatusResp::mutable_stat() {
  ::cqhttp::GetStatusResp_Statistics* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetStatusResp.stat)
  return _msg;
}
inline void GetStatusResp::set_allocated_stat(::cqhttp::GetStatusResp_Statistics* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetStatusResp.stat)
}

// -------------------------------------------------------------------

// GetGroupAtAllRemain_Params

// int64 group_id = 1;
inline void GetGroupAtAllRemain_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupAtAllRemain_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupAtAllRemain_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemain.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupAtAllRemain_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupAtAllRemain_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupAtAllRemain.Params.group_id)
}

// -------------------------------------------------------------------

// GetGroupAtAllRemain

// string action = 1;
inline void GetGroupAtAllRemain::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupAtAllRemain::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemain.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupAtAllRemain::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupAtAllRemain.action)
}
inline std::string* GetGroupAtAllRemain::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupAtAllRemain.action)
  return _s;
}
inline const std::string& GetGroupAtAllRemain::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupAtAllRemain::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupAtAllRemain::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupAtAllRemain::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupAtAllRemain.action)
  return _impl_.action_.Release();
}
inline void GetGroupAtAllRemain::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupAtAllRemain.action)
}

// .cqhttp.GetGroupAtAllRemain.Params params = 2;
inline bool GetGroupAtAllRemain::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupAtAllRemain::has_params() const {
  return _internal_has_params();
}
inline void GetGroupAtAllRemain::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupAtAllRemain_Params& GetGroupAtAllRemain::_internal_params() const {
  const ::cqhttp::GetGroupAtAllRemain_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupAtAllRemain_Params&>(
      ::cqhttp::_GetGroupAtAllRemain_Params_default_instance_);
}
inline const ::cqhttp::GetGroupAtAllRemain_Params& GetGroupAtAllRemain::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemain.params)
  return _internal_params();
}
inline void GetGroupAtAllRemain::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupAtAllRemain_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupAtAllRemain.params)
}
inline ::cqhttp::GetGroupAtAllRemain_Params* GetGroupAtAllRemain::release_params() {
  
  ::cqhttp::GetGroupAtAllRemain_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupAtAllRemain_Params* GetGroupAtAllRemain::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupAtAllRemain.params)
  
  ::cqhttp::GetGroupAtAllRemain_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupAtAllRemain_Params* GetGroupAtAllRemain::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupAtAllRemain_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupAtAllRemain_Params* GetGroupAtAllRemain::mutable_params() {
  ::cqhttp::GetGroupAtAllRemain_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupAtAllRemain.params)
  return _msg;
}
inline void GetGroupAtAllRemain::set_allocated_params(::cqhttp::GetGroupAtAllRemain_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupAtAllRemain.params)
}

// string echo = 3;
inline void GetGroupAtAllRemain::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupAtAllRemain::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemain.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupAtAllRemain::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupAtAllRemain.echo)
}
inline std::string* GetGroupAtAllRemain::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupAtAllRemain.echo)
  return _s;
}
inline const std::string& GetGroupAtAllRemain::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupAtAllRemain::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupAtAllRemain::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupAtAllRemain::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupAtAllRemain.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupAtAllRemain::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupAtAllRemain.echo)
}

// -------------------------------------------------------------------

// GetGroupAtAllRemainResp

// bool can_at_all = 1;
inline void GetGroupAtAllRemainResp::clear_can_at_all() {
  _impl_.can_at_all_ = false;
}
inline bool GetGroupAtAllRemainResp::_internal_can_at_all() const {
  return _impl_.can_at_all_;
}
inline bool GetGroupAtAllRemainResp::can_at_all() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemainResp.can_at_all)
  return _internal_can_at_all();
}
inline void GetGroupAtAllRemainResp::_internal_set_can_at_all(bool value) {
  
  _impl_.can_at_all_ = value;
}
inline void GetGroupAtAllRemainResp::set_can_at_all(bool value) {
  _internal_set_can_at_all(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupAtAllRemainResp.can_at_all)
}

// int32 remain_at_all_count_for_group = 2;
inline void GetGroupAtAllRemainResp::clear_remain_at_all_count_for_group() {
  _impl_.remain_at_all_count_for_group_ = 0;
}
inline int32_t GetGroupAtAllRemainResp::_internal_remain_at_all_count_for_group() const {
  return _impl_.remain_at_all_count_for_group_;
}
inline int32_t GetGroupAtAllRemainResp::remain_at_all_count_for_group() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemainResp.remain_at_all_count_for_group)
  return _internal_remain_at_all_count_for_group();
}
inline void GetGroupAtAllRemainResp::_internal_set_remain_at_all_count_for_group(int32_t value) {
  
  _impl_.remain_at_all_count_for_group_ = value;
}
inline void GetGroupAtAllRemainResp::set_remain_at_all_count_for_group(int32_t value) {
  _internal_set_remain_at_all_count_for_group(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupAtAllRemainResp.remain_at_all_count_for_group)
}

// int32 remain_at_all_count_for_uin = 3;
inline void GetGroupAtAllRemainResp::clear_remain_at_all_count_for_uin() {
  _impl_.remain_at_all_count_for_uin_ = 0;
}
inline int32_t GetGroupAtAllRemainResp::_internal_remain_at_all_count_for_uin() const {
  return _impl_.remain_at_all_count_for_uin_;
}
inline int32_t GetGroupAtAllRemainResp::remain_at_all_count_for_uin() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupAtAllRemainResp.remain_at_all_count_for_uin)
  return _internal_remain_at_all_count_for_uin();
}
inline void GetGroupAtAllRemainResp::_internal_set_remain_at_all_count_for_uin(int32_t value) {
  
  _impl_.remain_at_all_count_for_uin_ = value;
}
inline void GetGroupAtAllRemainResp::set_remain_at_all_count_for_uin(int32_t value) {
  _internal_set_remain_at_all_count_for_uin(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupAtAllRemainResp.remain_at_all_count_for_uin)
}

// -------------------------------------------------------------------

// HandleQuickOperation_Params

// string content = 1;
inline void HandleQuickOperation_Params::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& HandleQuickOperation_Params::content() const {
  // @@protoc_insertion_point(field_get:cqhttp.HandleQuickOperation.Params.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandleQuickOperation_Params::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.HandleQuickOperation.Params.content)
}
inline std::string* HandleQuickOperation_Params::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cqhttp.HandleQuickOperation.Params.content)
  return _s;
}
inline const std::string& HandleQuickOperation_Params::_internal_content() const {
  return _impl_.content_.Get();
}
inline void HandleQuickOperation_Params::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* HandleQuickOperation_Params::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* HandleQuickOperation_Params::release_content() {
  // @@protoc_insertion_point(field_release:cqhttp.HandleQuickOperation.Params.content)
  return _impl_.content_.Release();
}
inline void HandleQuickOperation_Params::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.HandleQuickOperation.Params.content)
}

// string operation = 2;
inline void HandleQuickOperation_Params::clear_operation() {
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& HandleQuickOperation_Params::operation() const {
  // @@protoc_insertion_point(field_get:cqhttp.HandleQuickOperation.Params.operation)
  return _internal_operation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandleQuickOperation_Params::set_operation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.HandleQuickOperation.Params.operation)
}
inline std::string* HandleQuickOperation_Params::mutable_operation() {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:cqhttp.HandleQuickOperation.Params.operation)
  return _s;
}
inline const std::string& HandleQuickOperation_Params::_internal_operation() const {
  return _impl_.operation_.Get();
}
inline void HandleQuickOperation_Params::_internal_set_operation(const std::string& value) {
  
  _impl_.operation_.Set(value, GetArenaForAllocation());
}
inline std::string* HandleQuickOperation_Params::_internal_mutable_operation() {
  
  return _impl_.operation_.Mutable(GetArenaForAllocation());
}
inline std::string* HandleQuickOperation_Params::release_operation() {
  // @@protoc_insertion_point(field_release:cqhttp.HandleQuickOperation.Params.operation)
  return _impl_.operation_.Release();
}
inline void HandleQuickOperation_Params::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    
  } else {
    
  }
  _impl_.operation_.SetAllocated(operation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.HandleQuickOperation.Params.operation)
}

// -------------------------------------------------------------------

// HandleQuickOperation

// string action = 1;
inline void HandleQuickOperation::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& HandleQuickOperation::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.HandleQuickOperation.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandleQuickOperation::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.HandleQuickOperation.action)
}
inline std::string* HandleQuickOperation::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.HandleQuickOperation.action)
  return _s;
}
inline const std::string& HandleQuickOperation::_internal_action() const {
  return _impl_.action_.Get();
}
inline void HandleQuickOperation::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* HandleQuickOperation::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* HandleQuickOperation::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.HandleQuickOperation.action)
  return _impl_.action_.Release();
}
inline void HandleQuickOperation::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.HandleQuickOperation.action)
}

// .cqhttp.HandleQuickOperation.Params params = 2;
inline bool HandleQuickOperation::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool HandleQuickOperation::has_params() const {
  return _internal_has_params();
}
inline void HandleQuickOperation::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::HandleQuickOperation_Params& HandleQuickOperation::_internal_params() const {
  const ::cqhttp::HandleQuickOperation_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::HandleQuickOperation_Params&>(
      ::cqhttp::_HandleQuickOperation_Params_default_instance_);
}
inline const ::cqhttp::HandleQuickOperation_Params& HandleQuickOperation::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.HandleQuickOperation.params)
  return _internal_params();
}
inline void HandleQuickOperation::unsafe_arena_set_allocated_params(
    ::cqhttp::HandleQuickOperation_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.HandleQuickOperation.params)
}
inline ::cqhttp::HandleQuickOperation_Params* HandleQuickOperation::release_params() {
  
  ::cqhttp::HandleQuickOperation_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::HandleQuickOperation_Params* HandleQuickOperation::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.HandleQuickOperation.params)
  
  ::cqhttp::HandleQuickOperation_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::HandleQuickOperation_Params* HandleQuickOperation::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::HandleQuickOperation_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::HandleQuickOperation_Params* HandleQuickOperation::mutable_params() {
  ::cqhttp::HandleQuickOperation_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.HandleQuickOperation.params)
  return _msg;
}
inline void HandleQuickOperation::set_allocated_params(::cqhttp::HandleQuickOperation_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.HandleQuickOperation.params)
}

// -------------------------------------------------------------------

// SendGroupNotice_Params

// int64 group_id = 1;
inline void SendGroupNotice_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t SendGroupNotice_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t SendGroupNotice_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupNotice.Params.group_id)
  return _internal_group_id();
}
inline void SendGroupNotice_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void SendGroupNotice_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupNotice.Params.group_id)
}

// string content = 2;
inline void SendGroupNotice_Params::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SendGroupNotice_Params::content() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupNotice.Params.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupNotice_Params::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupNotice.Params.content)
}
inline std::string* SendGroupNotice_Params::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupNotice.Params.content)
  return _s;
}
inline const std::string& SendGroupNotice_Params::_internal_content() const {
  return _impl_.content_.Get();
}
inline void SendGroupNotice_Params::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupNotice_Params::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupNotice_Params::release_content() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupNotice.Params.content)
  return _impl_.content_.Release();
}
inline void SendGroupNotice_Params::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupNotice.Params.content)
}

// string image = 3;
inline void SendGroupNotice_Params::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& SendGroupNotice_Params::image() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupNotice.Params.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupNotice_Params::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupNotice.Params.image)
}
inline std::string* SendGroupNotice_Params::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupNotice.Params.image)
  return _s;
}
inline const std::string& SendGroupNotice_Params::_internal_image() const {
  return _impl_.image_.Get();
}
inline void SendGroupNotice_Params::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupNotice_Params::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupNotice_Params::release_image() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupNotice.Params.image)
  return _impl_.image_.Release();
}
inline void SendGroupNotice_Params::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupNotice.Params.image)
}

// -------------------------------------------------------------------

// SendGroupNotice

// string action = 1;
inline void SendGroupNotice::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendGroupNotice::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupNotice.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendGroupNotice::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendGroupNotice.action)
}
inline std::string* SendGroupNotice::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupNotice.action)
  return _s;
}
inline const std::string& SendGroupNotice::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendGroupNotice::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendGroupNotice::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendGroupNotice::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupNotice.action)
  return _impl_.action_.Release();
}
inline void SendGroupNotice::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupNotice.action)
}

// .cqhttp.SendGroupNotice.Params params = 2;
inline bool SendGroupNotice::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendGroupNotice::has_params() const {
  return _internal_has_params();
}
inline void SendGroupNotice::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendGroupNotice_Params& SendGroupNotice::_internal_params() const {
  const ::cqhttp::SendGroupNotice_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendGroupNotice_Params&>(
      ::cqhttp::_SendGroupNotice_Params_default_instance_);
}
inline const ::cqhttp::SendGroupNotice_Params& SendGroupNotice::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendGroupNotice.params)
  return _internal_params();
}
inline void SendGroupNotice::unsafe_arena_set_allocated_params(
    ::cqhttp::SendGroupNotice_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendGroupNotice.params)
}
inline ::cqhttp::SendGroupNotice_Params* SendGroupNotice::release_params() {
  
  ::cqhttp::SendGroupNotice_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendGroupNotice_Params* SendGroupNotice::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendGroupNotice.params)
  
  ::cqhttp::SendGroupNotice_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendGroupNotice_Params* SendGroupNotice::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendGroupNotice_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendGroupNotice_Params* SendGroupNotice::mutable_params() {
  ::cqhttp::SendGroupNotice_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendGroupNotice.params)
  return _msg;
}
inline void SendGroupNotice::set_allocated_params(::cqhttp::SendGroupNotice_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendGroupNotice.params)
}

// -------------------------------------------------------------------

// GetGroupNotice_Params

// int64 group_id = 1;
inline void GetGroupNotice_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupNotice_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupNotice_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNotice.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupNotice_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupNotice_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNotice.Params.group_id)
}

// -------------------------------------------------------------------

// GetGroupNotice

// string action = 1;
inline void GetGroupNotice::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupNotice::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNotice.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupNotice::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNotice.action)
}
inline std::string* GetGroupNotice::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNotice.action)
  return _s;
}
inline const std::string& GetGroupNotice::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupNotice::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupNotice::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupNotice::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNotice.action)
  return _impl_.action_.Release();
}
inline void GetGroupNotice::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNotice.action)
}

// .cqhttp.GetGroupNotice.Params params = 2;
inline bool GetGroupNotice::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupNotice::has_params() const {
  return _internal_has_params();
}
inline void GetGroupNotice::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupNotice_Params& GetGroupNotice::_internal_params() const {
  const ::cqhttp::GetGroupNotice_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupNotice_Params&>(
      ::cqhttp::_GetGroupNotice_Params_default_instance_);
}
inline const ::cqhttp::GetGroupNotice_Params& GetGroupNotice::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNotice.params)
  return _internal_params();
}
inline void GetGroupNotice::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupNotice_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupNotice.params)
}
inline ::cqhttp::GetGroupNotice_Params* GetGroupNotice::release_params() {
  
  ::cqhttp::GetGroupNotice_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupNotice_Params* GetGroupNotice::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNotice.params)
  
  ::cqhttp::GetGroupNotice_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupNotice_Params* GetGroupNotice::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupNotice_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupNotice_Params* GetGroupNotice::mutable_params() {
  ::cqhttp::GetGroupNotice_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNotice.params)
  return _msg;
}
inline void GetGroupNotice::set_allocated_params(::cqhttp::GetGroupNotice_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNotice.params)
}

// string echo = 3;
inline void GetGroupNotice::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupNotice::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNotice.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupNotice::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNotice.echo)
}
inline std::string* GetGroupNotice::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNotice.echo)
  return _s;
}
inline const std::string& GetGroupNotice::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupNotice::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupNotice::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupNotice::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNotice.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupNotice::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNotice.echo)
}

// -------------------------------------------------------------------

// GetGroupNoticeResp_Notice_NoticeMessage_Image

// string height = 1;
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::clear_height() {
  _impl_.height_.ClearToEmpty();
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage_Image::height() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.height)
  return _internal_height();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupNoticeResp_Notice_NoticeMessage_Image::set_height(ArgT0&& arg0, ArgT... args) {
 
 _impl_.height_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.height)
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::mutable_height() {
  std::string* _s = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.height)
  return _s;
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_height() const {
  return _impl_.height_.Get();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_set_height(const std::string& value) {
  
  _impl_.height_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_mutable_height() {
  
  return _impl_.height_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::release_height() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.height)
  return _impl_.height_.Release();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::set_allocated_height(std::string* height) {
  if (height != nullptr) {
    
  } else {
    
  }
  _impl_.height_.SetAllocated(height, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.height_.IsDefault()) {
    _impl_.height_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.height)
}

// string width = 2;
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::clear_width() {
  _impl_.width_.ClearToEmpty();
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage_Image::width() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.width)
  return _internal_width();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupNoticeResp_Notice_NoticeMessage_Image::set_width(ArgT0&& arg0, ArgT... args) {
 
 _impl_.width_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.width)
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::mutable_width() {
  std::string* _s = _internal_mutable_width();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.width)
  return _s;
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_width() const {
  return _impl_.width_.Get();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_set_width(const std::string& value) {
  
  _impl_.width_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_mutable_width() {
  
  return _impl_.width_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::release_width() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.width)
  return _impl_.width_.Release();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::set_allocated_width(std::string* width) {
  if (width != nullptr) {
    
  } else {
    
  }
  _impl_.width_.SetAllocated(width, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.width_.IsDefault()) {
    _impl_.width_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.width)
}

// string id = 3;
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage_Image::id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupNoticeResp_Notice_NoticeMessage_Image::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.id)
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.id)
  return _s;
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_id() const {
  return _impl_.id_.Get();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage_Image::release_id() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.id)
  return _impl_.id_.Release();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage_Image::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image.id)
}

// -------------------------------------------------------------------

// GetGroupNoticeResp_Notice_NoticeMessage

// string text = 1;
inline void GetGroupNoticeResp_Notice_NoticeMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage::text() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupNoticeResp_Notice_NoticeMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.text)
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.text)
  return _s;
}
inline const std::string& GetGroupNoticeResp_Notice_NoticeMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupNoticeResp_Notice_NoticeMessage::release_text() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.text)
  return _impl_.text_.Release();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.text)
}

// repeated .cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.Image images = 2;
inline int GetGroupNoticeResp_Notice_NoticeMessage::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int GetGroupNoticeResp_Notice_NoticeMessage::images_size() const {
  return _internal_images_size();
}
inline void GetGroupNoticeResp_Notice_NoticeMessage::clear_images() {
  _impl_.images_.Clear();
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* GetGroupNoticeResp_Notice_NoticeMessage::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image >*
GetGroupNoticeResp_Notice_NoticeMessage::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.images)
  return &_impl_.images_;
}
inline const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image& GetGroupNoticeResp_Notice_NoticeMessage::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image& GetGroupNoticeResp_Notice_NoticeMessage::images(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.images)
  return _internal_images(index);
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* GetGroupNoticeResp_Notice_NoticeMessage::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* GetGroupNoticeResp_Notice_NoticeMessage::add_images() {
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage_Image >&
GetGroupNoticeResp_Notice_NoticeMessage::images() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupNoticeResp.Notice.NoticeMessage.images)
  return _impl_.images_;
}

// -------------------------------------------------------------------

// GetGroupNoticeResp_Notice

// int64 sender_id = 1;
inline void GetGroupNoticeResp_Notice::clear_sender_id() {
  _impl_.sender_id_ = int64_t{0};
}
inline int64_t GetGroupNoticeResp_Notice::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int64_t GetGroupNoticeResp_Notice::sender_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.sender_id)
  return _internal_sender_id();
}
inline void GetGroupNoticeResp_Notice::_internal_set_sender_id(int64_t value) {
  
  _impl_.sender_id_ = value;
}
inline void GetGroupNoticeResp_Notice::set_sender_id(int64_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNoticeResp.Notice.sender_id)
}

// int64 publish_time = 2;
inline void GetGroupNoticeResp_Notice::clear_publish_time() {
  _impl_.publish_time_ = int64_t{0};
}
inline int64_t GetGroupNoticeResp_Notice::_internal_publish_time() const {
  return _impl_.publish_time_;
}
inline int64_t GetGroupNoticeResp_Notice::publish_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.publish_time)
  return _internal_publish_time();
}
inline void GetGroupNoticeResp_Notice::_internal_set_publish_time(int64_t value) {
  
  _impl_.publish_time_ = value;
}
inline void GetGroupNoticeResp_Notice::set_publish_time(int64_t value) {
  _internal_set_publish_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupNoticeResp.Notice.publish_time)
}

// .cqhttp.GetGroupNoticeResp.Notice.NoticeMessage message = 3;
inline bool GetGroupNoticeResp_Notice::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool GetGroupNoticeResp_Notice::has_message() const {
  return _internal_has_message();
}
inline void GetGroupNoticeResp_Notice::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage& GetGroupNoticeResp_Notice::_internal_message() const {
  const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage&>(
      ::cqhttp::_GetGroupNoticeResp_Notice_NoticeMessage_default_instance_);
}
inline const ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage& GetGroupNoticeResp_Notice::message() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.Notice.message)
  return _internal_message();
}
inline void GetGroupNoticeResp_Notice::unsafe_arena_set_allocated_message(
    ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupNoticeResp.Notice.message)
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* GetGroupNoticeResp_Notice::release_message() {
  
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* GetGroupNoticeResp_Notice::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupNoticeResp.Notice.message)
  
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* GetGroupNoticeResp_Notice::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* GetGroupNoticeResp_Notice::mutable_message() {
  ::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.Notice.message)
  return _msg;
}
inline void GetGroupNoticeResp_Notice::set_allocated_message(::cqhttp::GetGroupNoticeResp_Notice_NoticeMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupNoticeResp.Notice.message)
}

// -------------------------------------------------------------------

// GetGroupNoticeResp

// repeated .cqhttp.GetGroupNoticeResp.Notice notices = 1;
inline int GetGroupNoticeResp::_internal_notices_size() const {
  return _impl_.notices_.size();
}
inline int GetGroupNoticeResp::notices_size() const {
  return _internal_notices_size();
}
inline void GetGroupNoticeResp::clear_notices() {
  _impl_.notices_.Clear();
}
inline ::cqhttp::GetGroupNoticeResp_Notice* GetGroupNoticeResp::mutable_notices(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupNoticeResp.notices)
  return _impl_.notices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice >*
GetGroupNoticeResp::mutable_notices() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupNoticeResp.notices)
  return &_impl_.notices_;
}
inline const ::cqhttp::GetGroupNoticeResp_Notice& GetGroupNoticeResp::_internal_notices(int index) const {
  return _impl_.notices_.Get(index);
}
inline const ::cqhttp::GetGroupNoticeResp_Notice& GetGroupNoticeResp::notices(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupNoticeResp.notices)
  return _internal_notices(index);
}
inline ::cqhttp::GetGroupNoticeResp_Notice* GetGroupNoticeResp::_internal_add_notices() {
  return _impl_.notices_.Add();
}
inline ::cqhttp::GetGroupNoticeResp_Notice* GetGroupNoticeResp::add_notices() {
  ::cqhttp::GetGroupNoticeResp_Notice* _add = _internal_add_notices();
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupNoticeResp.notices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetGroupNoticeResp_Notice >&
GetGroupNoticeResp::notices() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupNoticeResp.notices)
  return _impl_.notices_;
}

// -------------------------------------------------------------------

// ReloadEventFilter_Params

// string file = 1;
inline void ReloadEventFilter_Params::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& ReloadEventFilter_Params::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReloadEventFilter.Params.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReloadEventFilter_Params::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.ReloadEventFilter.Params.file)
}
inline std::string* ReloadEventFilter_Params::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.ReloadEventFilter.Params.file)
  return _s;
}
inline const std::string& ReloadEventFilter_Params::_internal_file() const {
  return _impl_.file_.Get();
}
inline void ReloadEventFilter_Params::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* ReloadEventFilter_Params::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* ReloadEventFilter_Params::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.ReloadEventFilter.Params.file)
  return _impl_.file_.Release();
}
inline void ReloadEventFilter_Params::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ReloadEventFilter.Params.file)
}

// -------------------------------------------------------------------

// ReloadEventFilter

// string action = 1;
inline void ReloadEventFilter::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& ReloadEventFilter::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReloadEventFilter.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReloadEventFilter::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.ReloadEventFilter.action)
}
inline std::string* ReloadEventFilter::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.ReloadEventFilter.action)
  return _s;
}
inline const std::string& ReloadEventFilter::_internal_action() const {
  return _impl_.action_.Get();
}
inline void ReloadEventFilter::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* ReloadEventFilter::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* ReloadEventFilter::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.ReloadEventFilter.action)
  return _impl_.action_.Release();
}
inline void ReloadEventFilter::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ReloadEventFilter.action)
}

// .cqhttp.ReloadEventFilter.Params params = 2;
inline bool ReloadEventFilter::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool ReloadEventFilter::has_params() const {
  return _internal_has_params();
}
inline void ReloadEventFilter::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::ReloadEventFilter_Params& ReloadEventFilter::_internal_params() const {
  const ::cqhttp::ReloadEventFilter_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::ReloadEventFilter_Params&>(
      ::cqhttp::_ReloadEventFilter_Params_default_instance_);
}
inline const ::cqhttp::ReloadEventFilter_Params& ReloadEventFilter::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.ReloadEventFilter.params)
  return _internal_params();
}
inline void ReloadEventFilter::unsafe_arena_set_allocated_params(
    ::cqhttp::ReloadEventFilter_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.ReloadEventFilter.params)
}
inline ::cqhttp::ReloadEventFilter_Params* ReloadEventFilter::release_params() {
  
  ::cqhttp::ReloadEventFilter_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::ReloadEventFilter_Params* ReloadEventFilter::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.ReloadEventFilter.params)
  
  ::cqhttp::ReloadEventFilter_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::ReloadEventFilter_Params* ReloadEventFilter::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::ReloadEventFilter_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::ReloadEventFilter_Params* ReloadEventFilter::mutable_params() {
  ::cqhttp::ReloadEventFilter_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.ReloadEventFilter.params)
  return _msg;
}
inline void ReloadEventFilter::set_allocated_params(::cqhttp::ReloadEventFilter_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.ReloadEventFilter.params)
}

// -------------------------------------------------------------------

// DownloadFile_Params

// string url = 1;
inline void DownloadFile_Params::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& DownloadFile_Params::url() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFile.Params.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadFile_Params::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DownloadFile.Params.url)
}
inline std::string* DownloadFile_Params::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:cqhttp.DownloadFile.Params.url)
  return _s;
}
inline const std::string& DownloadFile_Params::_internal_url() const {
  return _impl_.url_.Get();
}
inline void DownloadFile_Params::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadFile_Params::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadFile_Params::release_url() {
  // @@protoc_insertion_point(field_release:cqhttp.DownloadFile.Params.url)
  return _impl_.url_.Release();
}
inline void DownloadFile_Params::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DownloadFile.Params.url)
}

// int32 thread_count = 2;
inline void DownloadFile_Params::clear_thread_count() {
  _impl_.thread_count_ = 0;
}
inline int32_t DownloadFile_Params::_internal_thread_count() const {
  return _impl_.thread_count_;
}
inline int32_t DownloadFile_Params::thread_count() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFile.Params.thread_count)
  return _internal_thread_count();
}
inline void DownloadFile_Params::_internal_set_thread_count(int32_t value) {
  
  _impl_.thread_count_ = value;
}
inline void DownloadFile_Params::set_thread_count(int32_t value) {
  _internal_set_thread_count(value);
  // @@protoc_insertion_point(field_set:cqhttp.DownloadFile.Params.thread_count)
}

// string headers = 3;
inline void DownloadFile_Params::clear_headers() {
  _impl_.headers_.ClearToEmpty();
}
inline const std::string& DownloadFile_Params::headers() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFile.Params.headers)
  return _internal_headers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadFile_Params::set_headers(ArgT0&& arg0, ArgT... args) {
 
 _impl_.headers_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DownloadFile.Params.headers)
}
inline std::string* DownloadFile_Params::mutable_headers() {
  std::string* _s = _internal_mutable_headers();
  // @@protoc_insertion_point(field_mutable:cqhttp.DownloadFile.Params.headers)
  return _s;
}
inline const std::string& DownloadFile_Params::_internal_headers() const {
  return _impl_.headers_.Get();
}
inline void DownloadFile_Params::_internal_set_headers(const std::string& value) {
  
  _impl_.headers_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadFile_Params::_internal_mutable_headers() {
  
  return _impl_.headers_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadFile_Params::release_headers() {
  // @@protoc_insertion_point(field_release:cqhttp.DownloadFile.Params.headers)
  return _impl_.headers_.Release();
}
inline void DownloadFile_Params::set_allocated_headers(std::string* headers) {
  if (headers != nullptr) {
    
  } else {
    
  }
  _impl_.headers_.SetAllocated(headers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headers_.IsDefault()) {
    _impl_.headers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DownloadFile.Params.headers)
}

// -------------------------------------------------------------------

// DownloadFile

// string action = 1;
inline void DownloadFile::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DownloadFile::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFile.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadFile::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DownloadFile.action)
}
inline std::string* DownloadFile::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DownloadFile.action)
  return _s;
}
inline const std::string& DownloadFile::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DownloadFile::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadFile::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadFile::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DownloadFile.action)
  return _impl_.action_.Release();
}
inline void DownloadFile::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DownloadFile.action)
}

// .cqhttp.DownloadFile.Params params = 2;
inline bool DownloadFile::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DownloadFile::has_params() const {
  return _internal_has_params();
}
inline void DownloadFile::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DownloadFile_Params& DownloadFile::_internal_params() const {
  const ::cqhttp::DownloadFile_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DownloadFile_Params&>(
      ::cqhttp::_DownloadFile_Params_default_instance_);
}
inline const ::cqhttp::DownloadFile_Params& DownloadFile::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFile.params)
  return _internal_params();
}
inline void DownloadFile::unsafe_arena_set_allocated_params(
    ::cqhttp::DownloadFile_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DownloadFile.params)
}
inline ::cqhttp::DownloadFile_Params* DownloadFile::release_params() {
  
  ::cqhttp::DownloadFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DownloadFile_Params* DownloadFile::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DownloadFile.params)
  
  ::cqhttp::DownloadFile_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DownloadFile_Params* DownloadFile::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DownloadFile_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DownloadFile_Params* DownloadFile::mutable_params() {
  ::cqhttp::DownloadFile_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DownloadFile.params)
  return _msg;
}
inline void DownloadFile::set_allocated_params(::cqhttp::DownloadFile_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DownloadFile.params)
}

// string echo = 3;
inline void DownloadFile::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& DownloadFile::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFile.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadFile::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DownloadFile.echo)
}
inline std::string* DownloadFile::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.DownloadFile.echo)
  return _s;
}
inline const std::string& DownloadFile::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void DownloadFile::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadFile::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadFile::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.DownloadFile.echo)
  return _impl_.echo_.Release();
}
inline void DownloadFile::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DownloadFile.echo)
}

// -------------------------------------------------------------------

// DownloadFileResp

// string file = 1;
inline void DownloadFileResp::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& DownloadFileResp::file() const {
  // @@protoc_insertion_point(field_get:cqhttp.DownloadFileResp.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadFileResp::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DownloadFileResp.file)
}
inline std::string* DownloadFileResp::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:cqhttp.DownloadFileResp.file)
  return _s;
}
inline const std::string& DownloadFileResp::_internal_file() const {
  return _impl_.file_.Get();
}
inline void DownloadFileResp::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadFileResp::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadFileResp::release_file() {
  // @@protoc_insertion_point(field_release:cqhttp.DownloadFileResp.file)
  return _impl_.file_.Release();
}
inline void DownloadFileResp::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DownloadFileResp.file)
}

// -------------------------------------------------------------------

// GetOnlineClients_Params

// bool no_cache = 1;
inline void GetOnlineClients_Params::clear_no_cache() {
  _impl_.no_cache_ = false;
}
inline bool GetOnlineClients_Params::_internal_no_cache() const {
  return _impl_.no_cache_;
}
inline bool GetOnlineClients_Params::no_cache() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetOnlineClients.Params.no_cache)
  return _internal_no_cache();
}
inline void GetOnlineClients_Params::_internal_set_no_cache(bool value) {
  
  _impl_.no_cache_ = value;
}
inline void GetOnlineClients_Params::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetOnlineClients.Params.no_cache)
}

// -------------------------------------------------------------------

// GetOnlineClients

// string action = 1;
inline void GetOnlineClients::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetOnlineClients::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetOnlineClients.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOnlineClients::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetOnlineClients.action)
}
inline std::string* GetOnlineClients::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetOnlineClients.action)
  return _s;
}
inline const std::string& GetOnlineClients::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetOnlineClients::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOnlineClients::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOnlineClients::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetOnlineClients.action)
  return _impl_.action_.Release();
}
inline void GetOnlineClients::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetOnlineClients.action)
}

// .cqhttp.GetOnlineClients.Params params = 2;
inline bool GetOnlineClients::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetOnlineClients::has_params() const {
  return _internal_has_params();
}
inline void GetOnlineClients::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetOnlineClients_Params& GetOnlineClients::_internal_params() const {
  const ::cqhttp::GetOnlineClients_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetOnlineClients_Params&>(
      ::cqhttp::_GetOnlineClients_Params_default_instance_);
}
inline const ::cqhttp::GetOnlineClients_Params& GetOnlineClients::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetOnlineClients.params)
  return _internal_params();
}
inline void GetOnlineClients::unsafe_arena_set_allocated_params(
    ::cqhttp::GetOnlineClients_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetOnlineClients.params)
}
inline ::cqhttp::GetOnlineClients_Params* GetOnlineClients::release_params() {
  
  ::cqhttp::GetOnlineClients_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetOnlineClients_Params* GetOnlineClients::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetOnlineClients.params)
  
  ::cqhttp::GetOnlineClients_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetOnlineClients_Params* GetOnlineClients::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetOnlineClients_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetOnlineClients_Params* GetOnlineClients::mutable_params() {
  ::cqhttp::GetOnlineClients_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetOnlineClients.params)
  return _msg;
}
inline void GetOnlineClients::set_allocated_params(::cqhttp::GetOnlineClients_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetOnlineClients.params)
}

// string echo = 3;
inline void GetOnlineClients::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetOnlineClients::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetOnlineClients.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOnlineClients::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetOnlineClients.echo)
}
inline std::string* GetOnlineClients::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetOnlineClients.echo)
  return _s;
}
inline const std::string& GetOnlineClients::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetOnlineClients::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOnlineClients::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOnlineClients::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetOnlineClients.echo)
  return _impl_.echo_.Release();
}
inline void GetOnlineClients::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetOnlineClients.echo)
}

// -------------------------------------------------------------------

// GetOnlineClientsResp

// repeated .cqhttp.Device clients = 1;
inline int GetOnlineClientsResp::_internal_clients_size() const {
  return _impl_.clients_.size();
}
inline int GetOnlineClientsResp::clients_size() const {
  return _internal_clients_size();
}
inline ::cqhttp::Device* GetOnlineClientsResp::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetOnlineClientsResp.clients)
  return _impl_.clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Device >*
GetOnlineClientsResp::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetOnlineClientsResp.clients)
  return &_impl_.clients_;
}
inline const ::cqhttp::Device& GetOnlineClientsResp::_internal_clients(int index) const {
  return _impl_.clients_.Get(index);
}
inline const ::cqhttp::Device& GetOnlineClientsResp::clients(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetOnlineClientsResp.clients)
  return _internal_clients(index);
}
inline ::cqhttp::Device* GetOnlineClientsResp::_internal_add_clients() {
  return _impl_.clients_.Add();
}
inline ::cqhttp::Device* GetOnlineClientsResp::add_clients() {
  ::cqhttp::Device* _add = _internal_add_clients();
  // @@protoc_insertion_point(field_add:cqhttp.GetOnlineClientsResp.clients)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::Device >&
GetOnlineClientsResp::clients() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetOnlineClientsResp.clients)
  return _impl_.clients_;
}

// -------------------------------------------------------------------

// GetGroupMsgHistory_Params

// int64 message_seq = 1;
inline void GetGroupMsgHistory_Params::clear_message_seq() {
  _impl_.message_seq_ = int64_t{0};
}
inline int64_t GetGroupMsgHistory_Params::_internal_message_seq() const {
  return _impl_.message_seq_;
}
inline int64_t GetGroupMsgHistory_Params::message_seq() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMsgHistory.Params.message_seq)
  return _internal_message_seq();
}
inline void GetGroupMsgHistory_Params::_internal_set_message_seq(int64_t value) {
  
  _impl_.message_seq_ = value;
}
inline void GetGroupMsgHistory_Params::set_message_seq(int64_t value) {
  _internal_set_message_seq(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMsgHistory.Params.message_seq)
}

// int64 group_id = 2;
inline void GetGroupMsgHistory_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetGroupMsgHistory_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetGroupMsgHistory_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMsgHistory.Params.group_id)
  return _internal_group_id();
}
inline void GetGroupMsgHistory_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetGroupMsgHistory_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMsgHistory.Params.group_id)
}

// -------------------------------------------------------------------

// GetGroupMsgHistory

// string action = 1;
inline void GetGroupMsgHistory::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetGroupMsgHistory::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMsgHistory.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMsgHistory::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMsgHistory.action)
}
inline std::string* GetGroupMsgHistory::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMsgHistory.action)
  return _s;
}
inline const std::string& GetGroupMsgHistory::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetGroupMsgHistory::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMsgHistory::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMsgHistory::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMsgHistory.action)
  return _impl_.action_.Release();
}
inline void GetGroupMsgHistory::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMsgHistory.action)
}

// .cqhttp.GetGroupMsgHistory.Params params = 2;
inline bool GetGroupMsgHistory::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetGroupMsgHistory::has_params() const {
  return _internal_has_params();
}
inline void GetGroupMsgHistory::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetGroupMsgHistory_Params& GetGroupMsgHistory::_internal_params() const {
  const ::cqhttp::GetGroupMsgHistory_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetGroupMsgHistory_Params&>(
      ::cqhttp::_GetGroupMsgHistory_Params_default_instance_);
}
inline const ::cqhttp::GetGroupMsgHistory_Params& GetGroupMsgHistory::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMsgHistory.params)
  return _internal_params();
}
inline void GetGroupMsgHistory::unsafe_arena_set_allocated_params(
    ::cqhttp::GetGroupMsgHistory_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetGroupMsgHistory.params)
}
inline ::cqhttp::GetGroupMsgHistory_Params* GetGroupMsgHistory::release_params() {
  
  ::cqhttp::GetGroupMsgHistory_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetGroupMsgHistory_Params* GetGroupMsgHistory::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMsgHistory.params)
  
  ::cqhttp::GetGroupMsgHistory_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetGroupMsgHistory_Params* GetGroupMsgHistory::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetGroupMsgHistory_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetGroupMsgHistory_Params* GetGroupMsgHistory::mutable_params() {
  ::cqhttp::GetGroupMsgHistory_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMsgHistory.params)
  return _msg;
}
inline void GetGroupMsgHistory::set_allocated_params(::cqhttp::GetGroupMsgHistory_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMsgHistory.params)
}

// string echo = 3;
inline void GetGroupMsgHistory::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetGroupMsgHistory::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMsgHistory.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMsgHistory::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMsgHistory.echo)
}
inline std::string* GetGroupMsgHistory::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMsgHistory.echo)
  return _s;
}
inline const std::string& GetGroupMsgHistory::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetGroupMsgHistory::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupMsgHistory::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupMsgHistory::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetGroupMsgHistory.echo)
  return _impl_.echo_.Release();
}
inline void GetGroupMsgHistory::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetGroupMsgHistory.echo)
}

// -------------------------------------------------------------------

// GetGroupMsgHistoryResp

// repeated string messages = 1;
inline int GetGroupMsgHistoryResp::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int GetGroupMsgHistoryResp::messages_size() const {
  return _internal_messages_size();
}
inline void GetGroupMsgHistoryResp::clear_messages() {
  _impl_.messages_.Clear();
}
inline std::string* GetGroupMsgHistoryResp::add_messages() {
  std::string* _s = _internal_add_messages();
  // @@protoc_insertion_point(field_add_mutable:cqhttp.GetGroupMsgHistoryResp.messages)
  return _s;
}
inline const std::string& GetGroupMsgHistoryResp::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const std::string& GetGroupMsgHistoryResp::messages(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetGroupMsgHistoryResp.messages)
  return _internal_messages(index);
}
inline std::string* GetGroupMsgHistoryResp::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetGroupMsgHistoryResp.messages)
  return _impl_.messages_.Mutable(index);
}
inline void GetGroupMsgHistoryResp::set_messages(int index, const std::string& value) {
  _impl_.messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline void GetGroupMsgHistoryResp::set_messages(int index, std::string&& value) {
  _impl_.messages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline void GetGroupMsgHistoryResp::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline void GetGroupMsgHistoryResp::set_messages(int index, const char* value, size_t size) {
  _impl_.messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline std::string* GetGroupMsgHistoryResp::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline void GetGroupMsgHistoryResp::add_messages(const std::string& value) {
  _impl_.messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline void GetGroupMsgHistoryResp::add_messages(std::string&& value) {
  _impl_.messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline void GetGroupMsgHistoryResp::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline void GetGroupMsgHistoryResp::add_messages(const char* value, size_t size) {
  _impl_.messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cqhttp.GetGroupMsgHistoryResp.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetGroupMsgHistoryResp::messages() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetGroupMsgHistoryResp.messages)
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetGroupMsgHistoryResp::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetGroupMsgHistoryResp.messages)
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// SetEssenceMsg_Params

// int32 message_id = 1;
inline void SetEssenceMsg_Params::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t SetEssenceMsg_Params::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t SetEssenceMsg_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetEssenceMsg.Params.message_id)
  return _internal_message_id();
}
inline void SetEssenceMsg_Params::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void SetEssenceMsg_Params::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SetEssenceMsg.Params.message_id)
}

// -------------------------------------------------------------------

// SetEssenceMsg

// string action = 1;
inline void SetEssenceMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetEssenceMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetEssenceMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetEssenceMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetEssenceMsg.action)
}
inline std::string* SetEssenceMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetEssenceMsg.action)
  return _s;
}
inline const std::string& SetEssenceMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetEssenceMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetEssenceMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetEssenceMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetEssenceMsg.action)
  return _impl_.action_.Release();
}
inline void SetEssenceMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetEssenceMsg.action)
}

// .cqhttp.SetEssenceMsg.Params params = 2;
inline bool SetEssenceMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetEssenceMsg::has_params() const {
  return _internal_has_params();
}
inline void SetEssenceMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetEssenceMsg_Params& SetEssenceMsg::_internal_params() const {
  const ::cqhttp::SetEssenceMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetEssenceMsg_Params&>(
      ::cqhttp::_SetEssenceMsg_Params_default_instance_);
}
inline const ::cqhttp::SetEssenceMsg_Params& SetEssenceMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetEssenceMsg.params)
  return _internal_params();
}
inline void SetEssenceMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::SetEssenceMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetEssenceMsg.params)
}
inline ::cqhttp::SetEssenceMsg_Params* SetEssenceMsg::release_params() {
  
  ::cqhttp::SetEssenceMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetEssenceMsg_Params* SetEssenceMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetEssenceMsg.params)
  
  ::cqhttp::SetEssenceMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetEssenceMsg_Params* SetEssenceMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetEssenceMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetEssenceMsg_Params* SetEssenceMsg::mutable_params() {
  ::cqhttp::SetEssenceMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetEssenceMsg.params)
  return _msg;
}
inline void SetEssenceMsg::set_allocated_params(::cqhttp::SetEssenceMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetEssenceMsg.params)
}

// -------------------------------------------------------------------

// DeleteEssenceMsg_Params

// int32 message_id = 1;
inline void DeleteEssenceMsg_Params::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t DeleteEssenceMsg_Params::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t DeleteEssenceMsg_Params::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteEssenceMsg.Params.message_id)
  return _internal_message_id();
}
inline void DeleteEssenceMsg_Params::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void DeleteEssenceMsg_Params::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteEssenceMsg.Params.message_id)
}

// -------------------------------------------------------------------

// DeleteEssenceMsg

// string action = 1;
inline void DeleteEssenceMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DeleteEssenceMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteEssenceMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteEssenceMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteEssenceMsg.action)
}
inline std::string* DeleteEssenceMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteEssenceMsg.action)
  return _s;
}
inline const std::string& DeleteEssenceMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DeleteEssenceMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteEssenceMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteEssenceMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteEssenceMsg.action)
  return _impl_.action_.Release();
}
inline void DeleteEssenceMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteEssenceMsg.action)
}

// .cqhttp.DeleteEssenceMsg.Params params = 2;
inline bool DeleteEssenceMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DeleteEssenceMsg::has_params() const {
  return _internal_has_params();
}
inline void DeleteEssenceMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DeleteEssenceMsg_Params& DeleteEssenceMsg::_internal_params() const {
  const ::cqhttp::DeleteEssenceMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DeleteEssenceMsg_Params&>(
      ::cqhttp::_DeleteEssenceMsg_Params_default_instance_);
}
inline const ::cqhttp::DeleteEssenceMsg_Params& DeleteEssenceMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteEssenceMsg.params)
  return _internal_params();
}
inline void DeleteEssenceMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::DeleteEssenceMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DeleteEssenceMsg.params)
}
inline ::cqhttp::DeleteEssenceMsg_Params* DeleteEssenceMsg::release_params() {
  
  ::cqhttp::DeleteEssenceMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DeleteEssenceMsg_Params* DeleteEssenceMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteEssenceMsg.params)
  
  ::cqhttp::DeleteEssenceMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DeleteEssenceMsg_Params* DeleteEssenceMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DeleteEssenceMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DeleteEssenceMsg_Params* DeleteEssenceMsg::mutable_params() {
  ::cqhttp::DeleteEssenceMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteEssenceMsg.params)
  return _msg;
}
inline void DeleteEssenceMsg::set_allocated_params(::cqhttp::DeleteEssenceMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteEssenceMsg.params)
}

// -------------------------------------------------------------------

// GetEssenceMsgList_Params

// int64 group_id = 1;
inline void GetEssenceMsgList_Params::clear_group_id() {
  _impl_.group_id_ = int64_t{0};
}
inline int64_t GetEssenceMsgList_Params::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int64_t GetEssenceMsgList_Params::group_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgList.Params.group_id)
  return _internal_group_id();
}
inline void GetEssenceMsgList_Params::_internal_set_group_id(int64_t value) {
  
  _impl_.group_id_ = value;
}
inline void GetEssenceMsgList_Params::set_group_id(int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgList.Params.group_id)
}

// -------------------------------------------------------------------

// GetEssenceMsgList

// string action = 1;
inline void GetEssenceMsgList::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetEssenceMsgList::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgList.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEssenceMsgList::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgList.action)
}
inline std::string* GetEssenceMsgList::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetEssenceMsgList.action)
  return _s;
}
inline const std::string& GetEssenceMsgList::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetEssenceMsgList::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEssenceMsgList::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEssenceMsgList::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetEssenceMsgList.action)
  return _impl_.action_.Release();
}
inline void GetEssenceMsgList::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetEssenceMsgList.action)
}

// .cqhttp.GetEssenceMsgList.Params params = 2;
inline bool GetEssenceMsgList::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetEssenceMsgList::has_params() const {
  return _internal_has_params();
}
inline void GetEssenceMsgList::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetEssenceMsgList_Params& GetEssenceMsgList::_internal_params() const {
  const ::cqhttp::GetEssenceMsgList_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetEssenceMsgList_Params&>(
      ::cqhttp::_GetEssenceMsgList_Params_default_instance_);
}
inline const ::cqhttp::GetEssenceMsgList_Params& GetEssenceMsgList::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgList.params)
  return _internal_params();
}
inline void GetEssenceMsgList::unsafe_arena_set_allocated_params(
    ::cqhttp::GetEssenceMsgList_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetEssenceMsgList.params)
}
inline ::cqhttp::GetEssenceMsgList_Params* GetEssenceMsgList::release_params() {
  
  ::cqhttp::GetEssenceMsgList_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetEssenceMsgList_Params* GetEssenceMsgList::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetEssenceMsgList.params)
  
  ::cqhttp::GetEssenceMsgList_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetEssenceMsgList_Params* GetEssenceMsgList::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetEssenceMsgList_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetEssenceMsgList_Params* GetEssenceMsgList::mutable_params() {
  ::cqhttp::GetEssenceMsgList_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetEssenceMsgList.params)
  return _msg;
}
inline void GetEssenceMsgList::set_allocated_params(::cqhttp::GetEssenceMsgList_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetEssenceMsgList.params)
}

// string echo = 3;
inline void GetEssenceMsgList::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetEssenceMsgList::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgList.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEssenceMsgList::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgList.echo)
}
inline std::string* GetEssenceMsgList::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetEssenceMsgList.echo)
  return _s;
}
inline const std::string& GetEssenceMsgList::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetEssenceMsgList::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEssenceMsgList::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEssenceMsgList::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetEssenceMsgList.echo)
  return _impl_.echo_.Release();
}
inline void GetEssenceMsgList::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetEssenceMsgList.echo)
}

// -------------------------------------------------------------------

// GetEssenceMsgListResp

// int64 sender_id = 1;
inline void GetEssenceMsgListResp::clear_sender_id() {
  _impl_.sender_id_ = int64_t{0};
}
inline int64_t GetEssenceMsgListResp::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int64_t GetEssenceMsgListResp::sender_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.sender_id)
  return _internal_sender_id();
}
inline void GetEssenceMsgListResp::_internal_set_sender_id(int64_t value) {
  
  _impl_.sender_id_ = value;
}
inline void GetEssenceMsgListResp::set_sender_id(int64_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.sender_id)
}

// string sender_nick = 2;
inline void GetEssenceMsgListResp::clear_sender_nick() {
  _impl_.sender_nick_.ClearToEmpty();
}
inline const std::string& GetEssenceMsgListResp::sender_nick() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.sender_nick)
  return _internal_sender_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEssenceMsgListResp::set_sender_nick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_nick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.sender_nick)
}
inline std::string* GetEssenceMsgListResp::mutable_sender_nick() {
  std::string* _s = _internal_mutable_sender_nick();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetEssenceMsgListResp.sender_nick)
  return _s;
}
inline const std::string& GetEssenceMsgListResp::_internal_sender_nick() const {
  return _impl_.sender_nick_.Get();
}
inline void GetEssenceMsgListResp::_internal_set_sender_nick(const std::string& value) {
  
  _impl_.sender_nick_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEssenceMsgListResp::_internal_mutable_sender_nick() {
  
  return _impl_.sender_nick_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEssenceMsgListResp::release_sender_nick() {
  // @@protoc_insertion_point(field_release:cqhttp.GetEssenceMsgListResp.sender_nick)
  return _impl_.sender_nick_.Release();
}
inline void GetEssenceMsgListResp::set_allocated_sender_nick(std::string* sender_nick) {
  if (sender_nick != nullptr) {
    
  } else {
    
  }
  _impl_.sender_nick_.SetAllocated(sender_nick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_nick_.IsDefault()) {
    _impl_.sender_nick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetEssenceMsgListResp.sender_nick)
}

// int64 sender_time = 3;
inline void GetEssenceMsgListResp::clear_sender_time() {
  _impl_.sender_time_ = int64_t{0};
}
inline int64_t GetEssenceMsgListResp::_internal_sender_time() const {
  return _impl_.sender_time_;
}
inline int64_t GetEssenceMsgListResp::sender_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.sender_time)
  return _internal_sender_time();
}
inline void GetEssenceMsgListResp::_internal_set_sender_time(int64_t value) {
  
  _impl_.sender_time_ = value;
}
inline void GetEssenceMsgListResp::set_sender_time(int64_t value) {
  _internal_set_sender_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.sender_time)
}

// int64 operator_id = 4;
inline void GetEssenceMsgListResp::clear_operator_id() {
  _impl_.operator_id_ = int64_t{0};
}
inline int64_t GetEssenceMsgListResp::_internal_operator_id() const {
  return _impl_.operator_id_;
}
inline int64_t GetEssenceMsgListResp::operator_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.operator_id)
  return _internal_operator_id();
}
inline void GetEssenceMsgListResp::_internal_set_operator_id(int64_t value) {
  
  _impl_.operator_id_ = value;
}
inline void GetEssenceMsgListResp::set_operator_id(int64_t value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.operator_id)
}

// string operator_nick = 5;
inline void GetEssenceMsgListResp::clear_operator_nick() {
  _impl_.operator_nick_.ClearToEmpty();
}
inline const std::string& GetEssenceMsgListResp::operator_nick() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.operator_nick)
  return _internal_operator_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEssenceMsgListResp::set_operator_nick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operator_nick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.operator_nick)
}
inline std::string* GetEssenceMsgListResp::mutable_operator_nick() {
  std::string* _s = _internal_mutable_operator_nick();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetEssenceMsgListResp.operator_nick)
  return _s;
}
inline const std::string& GetEssenceMsgListResp::_internal_operator_nick() const {
  return _impl_.operator_nick_.Get();
}
inline void GetEssenceMsgListResp::_internal_set_operator_nick(const std::string& value) {
  
  _impl_.operator_nick_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEssenceMsgListResp::_internal_mutable_operator_nick() {
  
  return _impl_.operator_nick_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEssenceMsgListResp::release_operator_nick() {
  // @@protoc_insertion_point(field_release:cqhttp.GetEssenceMsgListResp.operator_nick)
  return _impl_.operator_nick_.Release();
}
inline void GetEssenceMsgListResp::set_allocated_operator_nick(std::string* operator_nick) {
  if (operator_nick != nullptr) {
    
  } else {
    
  }
  _impl_.operator_nick_.SetAllocated(operator_nick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operator_nick_.IsDefault()) {
    _impl_.operator_nick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetEssenceMsgListResp.operator_nick)
}

// int64 operator_time = 6;
inline void GetEssenceMsgListResp::clear_operator_time() {
  _impl_.operator_time_ = int64_t{0};
}
inline int64_t GetEssenceMsgListResp::_internal_operator_time() const {
  return _impl_.operator_time_;
}
inline int64_t GetEssenceMsgListResp::operator_time() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.operator_time)
  return _internal_operator_time();
}
inline void GetEssenceMsgListResp::_internal_set_operator_time(int64_t value) {
  
  _impl_.operator_time_ = value;
}
inline void GetEssenceMsgListResp::set_operator_time(int64_t value) {
  _internal_set_operator_time(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.operator_time)
}

// int32 message_id = 7;
inline void GetEssenceMsgListResp::clear_message_id() {
  _impl_.message_id_ = 0;
}
inline int32_t GetEssenceMsgListResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int32_t GetEssenceMsgListResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetEssenceMsgListResp.message_id)
  return _internal_message_id();
}
inline void GetEssenceMsgListResp::_internal_set_message_id(int32_t value) {
  
  _impl_.message_id_ = value;
}
inline void GetEssenceMsgListResp::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetEssenceMsgListResp.message_id)
}

// -------------------------------------------------------------------

// CheckUlrSafely_Params

// string url = 1;
inline void CheckUlrSafely_Params::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& CheckUlrSafely_Params::url() const {
  // @@protoc_insertion_point(field_get:cqhttp.CheckUlrSafely.Params.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUlrSafely_Params::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CheckUlrSafely.Params.url)
}
inline std::string* CheckUlrSafely_Params::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:cqhttp.CheckUlrSafely.Params.url)
  return _s;
}
inline const std::string& CheckUlrSafely_Params::_internal_url() const {
  return _impl_.url_.Get();
}
inline void CheckUlrSafely_Params::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckUlrSafely_Params::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckUlrSafely_Params::release_url() {
  // @@protoc_insertion_point(field_release:cqhttp.CheckUlrSafely.Params.url)
  return _impl_.url_.Release();
}
inline void CheckUlrSafely_Params::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CheckUlrSafely.Params.url)
}

// -------------------------------------------------------------------

// CheckUlrSafely

// string action = 1;
inline void CheckUlrSafely::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& CheckUlrSafely::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.CheckUlrSafely.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUlrSafely::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CheckUlrSafely.action)
}
inline std::string* CheckUlrSafely::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.CheckUlrSafely.action)
  return _s;
}
inline const std::string& CheckUlrSafely::_internal_action() const {
  return _impl_.action_.Get();
}
inline void CheckUlrSafely::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckUlrSafely::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckUlrSafely::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.CheckUlrSafely.action)
  return _impl_.action_.Release();
}
inline void CheckUlrSafely::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CheckUlrSafely.action)
}

// .cqhttp.CheckUlrSafely.Params params = 2;
inline bool CheckUlrSafely::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool CheckUlrSafely::has_params() const {
  return _internal_has_params();
}
inline void CheckUlrSafely::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::CheckUlrSafely_Params& CheckUlrSafely::_internal_params() const {
  const ::cqhttp::CheckUlrSafely_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::CheckUlrSafely_Params&>(
      ::cqhttp::_CheckUlrSafely_Params_default_instance_);
}
inline const ::cqhttp::CheckUlrSafely_Params& CheckUlrSafely::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.CheckUlrSafely.params)
  return _internal_params();
}
inline void CheckUlrSafely::unsafe_arena_set_allocated_params(
    ::cqhttp::CheckUlrSafely_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.CheckUlrSafely.params)
}
inline ::cqhttp::CheckUlrSafely_Params* CheckUlrSafely::release_params() {
  
  ::cqhttp::CheckUlrSafely_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::CheckUlrSafely_Params* CheckUlrSafely::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.CheckUlrSafely.params)
  
  ::cqhttp::CheckUlrSafely_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::CheckUlrSafely_Params* CheckUlrSafely::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::CheckUlrSafely_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::CheckUlrSafely_Params* CheckUlrSafely::mutable_params() {
  ::cqhttp::CheckUlrSafely_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.CheckUlrSafely.params)
  return _msg;
}
inline void CheckUlrSafely::set_allocated_params(::cqhttp::CheckUlrSafely_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CheckUlrSafely.params)
}

// string echo = 3;
inline void CheckUlrSafely::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& CheckUlrSafely::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.CheckUlrSafely.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUlrSafely::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.CheckUlrSafely.echo)
}
inline std::string* CheckUlrSafely::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.CheckUlrSafely.echo)
  return _s;
}
inline const std::string& CheckUlrSafely::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void CheckUlrSafely::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckUlrSafely::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckUlrSafely::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.CheckUlrSafely.echo)
  return _impl_.echo_.Release();
}
inline void CheckUlrSafely::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.CheckUlrSafely.echo)
}

// -------------------------------------------------------------------

// CheckUlrSafelyResp

// int32 level = 1;
inline void CheckUlrSafelyResp::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CheckUlrSafelyResp::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CheckUlrSafelyResp::level() const {
  // @@protoc_insertion_point(field_get:cqhttp.CheckUlrSafelyResp.level)
  return _internal_level();
}
inline void CheckUlrSafelyResp::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CheckUlrSafelyResp::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:cqhttp.CheckUlrSafelyResp.level)
}

// -------------------------------------------------------------------

// GetModelShow_Params

// string model = 1;
inline void GetModelShow_Params::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& GetModelShow_Params::model() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShow.Params.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelShow_Params::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetModelShow.Params.model)
}
inline std::string* GetModelShow_Params::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetModelShow.Params.model)
  return _s;
}
inline const std::string& GetModelShow_Params::_internal_model() const {
  return _impl_.model_.Get();
}
inline void GetModelShow_Params::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* GetModelShow_Params::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* GetModelShow_Params::release_model() {
  // @@protoc_insertion_point(field_release:cqhttp.GetModelShow.Params.model)
  return _impl_.model_.Release();
}
inline void GetModelShow_Params::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetModelShow.Params.model)
}

// -------------------------------------------------------------------

// GetModelShow

// string action = 1;
inline void GetModelShow::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& GetModelShow::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShow.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelShow::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetModelShow.action)
}
inline std::string* GetModelShow::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetModelShow.action)
  return _s;
}
inline const std::string& GetModelShow::_internal_action() const {
  return _impl_.action_.Get();
}
inline void GetModelShow::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* GetModelShow::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* GetModelShow::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.GetModelShow.action)
  return _impl_.action_.Release();
}
inline void GetModelShow::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetModelShow.action)
}

// .cqhttp.GetModelShow.Params params = 2;
inline bool GetModelShow::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GetModelShow::has_params() const {
  return _internal_has_params();
}
inline void GetModelShow::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::GetModelShow_Params& GetModelShow::_internal_params() const {
  const ::cqhttp::GetModelShow_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::GetModelShow_Params&>(
      ::cqhttp::_GetModelShow_Params_default_instance_);
}
inline const ::cqhttp::GetModelShow_Params& GetModelShow::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShow.params)
  return _internal_params();
}
inline void GetModelShow::unsafe_arena_set_allocated_params(
    ::cqhttp::GetModelShow_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.GetModelShow.params)
}
inline ::cqhttp::GetModelShow_Params* GetModelShow::release_params() {
  
  ::cqhttp::GetModelShow_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::GetModelShow_Params* GetModelShow::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.GetModelShow.params)
  
  ::cqhttp::GetModelShow_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::GetModelShow_Params* GetModelShow::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::GetModelShow_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::GetModelShow_Params* GetModelShow::mutable_params() {
  ::cqhttp::GetModelShow_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetModelShow.params)
  return _msg;
}
inline void GetModelShow::set_allocated_params(::cqhttp::GetModelShow_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetModelShow.params)
}

// string echo = 3;
inline void GetModelShow::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GetModelShow::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShow.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelShow::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetModelShow.echo)
}
inline std::string* GetModelShow::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetModelShow.echo)
  return _s;
}
inline const std::string& GetModelShow::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void GetModelShow::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetModelShow::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetModelShow::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.GetModelShow.echo)
  return _impl_.echo_.Release();
}
inline void GetModelShow::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetModelShow.echo)
}

// -------------------------------------------------------------------

// GetModelShowResp_Variant

// string model_show = 1;
inline void GetModelShowResp_Variant::clear_model_show() {
  _impl_.model_show_.ClearToEmpty();
}
inline const std::string& GetModelShowResp_Variant::model_show() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShowResp.Variant.model_show)
  return _internal_model_show();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelShowResp_Variant::set_model_show(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_show_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.GetModelShowResp.Variant.model_show)
}
inline std::string* GetModelShowResp_Variant::mutable_model_show() {
  std::string* _s = _internal_mutable_model_show();
  // @@protoc_insertion_point(field_mutable:cqhttp.GetModelShowResp.Variant.model_show)
  return _s;
}
inline const std::string& GetModelShowResp_Variant::_internal_model_show() const {
  return _impl_.model_show_.Get();
}
inline void GetModelShowResp_Variant::_internal_set_model_show(const std::string& value) {
  
  _impl_.model_show_.Set(value, GetArenaForAllocation());
}
inline std::string* GetModelShowResp_Variant::_internal_mutable_model_show() {
  
  return _impl_.model_show_.Mutable(GetArenaForAllocation());
}
inline std::string* GetModelShowResp_Variant::release_model_show() {
  // @@protoc_insertion_point(field_release:cqhttp.GetModelShowResp.Variant.model_show)
  return _impl_.model_show_.Release();
}
inline void GetModelShowResp_Variant::set_allocated_model_show(std::string* model_show) {
  if (model_show != nullptr) {
    
  } else {
    
  }
  _impl_.model_show_.SetAllocated(model_show, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_show_.IsDefault()) {
    _impl_.model_show_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.GetModelShowResp.Variant.model_show)
}

// bool need_pay = 2;
inline void GetModelShowResp_Variant::clear_need_pay() {
  _impl_.need_pay_ = false;
}
inline bool GetModelShowResp_Variant::_internal_need_pay() const {
  return _impl_.need_pay_;
}
inline bool GetModelShowResp_Variant::need_pay() const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShowResp.Variant.need_pay)
  return _internal_need_pay();
}
inline void GetModelShowResp_Variant::_internal_set_need_pay(bool value) {
  
  _impl_.need_pay_ = value;
}
inline void GetModelShowResp_Variant::set_need_pay(bool value) {
  _internal_set_need_pay(value);
  // @@protoc_insertion_point(field_set:cqhttp.GetModelShowResp.Variant.need_pay)
}

// -------------------------------------------------------------------

// GetModelShowResp

// repeated .cqhttp.GetModelShowResp.Variant variants = 1;
inline int GetModelShowResp::_internal_variants_size() const {
  return _impl_.variants_.size();
}
inline int GetModelShowResp::variants_size() const {
  return _internal_variants_size();
}
inline void GetModelShowResp::clear_variants() {
  _impl_.variants_.Clear();
}
inline ::cqhttp::GetModelShowResp_Variant* GetModelShowResp::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.GetModelShowResp.variants)
  return _impl_.variants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetModelShowResp_Variant >*
GetModelShowResp::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.GetModelShowResp.variants)
  return &_impl_.variants_;
}
inline const ::cqhttp::GetModelShowResp_Variant& GetModelShowResp::_internal_variants(int index) const {
  return _impl_.variants_.Get(index);
}
inline const ::cqhttp::GetModelShowResp_Variant& GetModelShowResp::variants(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.GetModelShowResp.variants)
  return _internal_variants(index);
}
inline ::cqhttp::GetModelShowResp_Variant* GetModelShowResp::_internal_add_variants() {
  return _impl_.variants_.Add();
}
inline ::cqhttp::GetModelShowResp_Variant* GetModelShowResp::add_variants() {
  ::cqhttp::GetModelShowResp_Variant* _add = _internal_add_variants();
  // @@protoc_insertion_point(field_add:cqhttp.GetModelShowResp.variants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::GetModelShowResp_Variant >&
GetModelShowResp::variants() const {
  // @@protoc_insertion_point(field_list:cqhttp.GetModelShowResp.variants)
  return _impl_.variants_;
}

// -------------------------------------------------------------------

// SetModelShow_Params

// string model = 1;
inline void SetModelShow_Params::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& SetModelShow_Params::model() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetModelShow.Params.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetModelShow_Params::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetModelShow.Params.model)
}
inline std::string* SetModelShow_Params::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetModelShow.Params.model)
  return _s;
}
inline const std::string& SetModelShow_Params::_internal_model() const {
  return _impl_.model_.Get();
}
inline void SetModelShow_Params::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* SetModelShow_Params::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* SetModelShow_Params::release_model() {
  // @@protoc_insertion_point(field_release:cqhttp.SetModelShow.Params.model)
  return _impl_.model_.Release();
}
inline void SetModelShow_Params::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetModelShow.Params.model)
}

// string model_show = 2;
inline void SetModelShow_Params::clear_model_show() {
  _impl_.model_show_.ClearToEmpty();
}
inline const std::string& SetModelShow_Params::model_show() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetModelShow.Params.model_show)
  return _internal_model_show();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetModelShow_Params::set_model_show(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_show_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetModelShow.Params.model_show)
}
inline std::string* SetModelShow_Params::mutable_model_show() {
  std::string* _s = _internal_mutable_model_show();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetModelShow.Params.model_show)
  return _s;
}
inline const std::string& SetModelShow_Params::_internal_model_show() const {
  return _impl_.model_show_.Get();
}
inline void SetModelShow_Params::_internal_set_model_show(const std::string& value) {
  
  _impl_.model_show_.Set(value, GetArenaForAllocation());
}
inline std::string* SetModelShow_Params::_internal_mutable_model_show() {
  
  return _impl_.model_show_.Mutable(GetArenaForAllocation());
}
inline std::string* SetModelShow_Params::release_model_show() {
  // @@protoc_insertion_point(field_release:cqhttp.SetModelShow.Params.model_show)
  return _impl_.model_show_.Release();
}
inline void SetModelShow_Params::set_allocated_model_show(std::string* model_show) {
  if (model_show != nullptr) {
    
  } else {
    
  }
  _impl_.model_show_.SetAllocated(model_show, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_show_.IsDefault()) {
    _impl_.model_show_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetModelShow.Params.model_show)
}

// -------------------------------------------------------------------

// SetModelShow

// string action = 1;
inline void SetModelShow::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SetModelShow::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetModelShow.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetModelShow::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SetModelShow.action)
}
inline std::string* SetModelShow::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetModelShow.action)
  return _s;
}
inline const std::string& SetModelShow::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SetModelShow::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SetModelShow::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SetModelShow::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SetModelShow.action)
  return _impl_.action_.Release();
}
inline void SetModelShow::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetModelShow.action)
}

// .cqhttp.SetModelShow.Params params = 2;
inline bool SetModelShow::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SetModelShow::has_params() const {
  return _internal_has_params();
}
inline void SetModelShow::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SetModelShow_Params& SetModelShow::_internal_params() const {
  const ::cqhttp::SetModelShow_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SetModelShow_Params&>(
      ::cqhttp::_SetModelShow_Params_default_instance_);
}
inline const ::cqhttp::SetModelShow_Params& SetModelShow::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SetModelShow.params)
  return _internal_params();
}
inline void SetModelShow::unsafe_arena_set_allocated_params(
    ::cqhttp::SetModelShow_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SetModelShow.params)
}
inline ::cqhttp::SetModelShow_Params* SetModelShow::release_params() {
  
  ::cqhttp::SetModelShow_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SetModelShow_Params* SetModelShow::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SetModelShow.params)
  
  ::cqhttp::SetModelShow_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SetModelShow_Params* SetModelShow::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SetModelShow_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SetModelShow_Params* SetModelShow::mutable_params() {
  ::cqhttp::SetModelShow_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SetModelShow.params)
  return _msg;
}
inline void SetModelShow::set_allocated_params(::cqhttp::SetModelShow_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SetModelShow.params)
}

// -------------------------------------------------------------------

// DeleteUnidirectionalFriend_Params

// int64 user_id = 1;
inline void DeleteUnidirectionalFriend_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t DeleteUnidirectionalFriend_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t DeleteUnidirectionalFriend_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteUnidirectionalFriend.Params.user_id)
  return _internal_user_id();
}
inline void DeleteUnidirectionalFriend_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void DeleteUnidirectionalFriend_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.DeleteUnidirectionalFriend.Params.user_id)
}

// -------------------------------------------------------------------

// DeleteUnidirectionalFriend

// string action = 1;
inline void DeleteUnidirectionalFriend::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DeleteUnidirectionalFriend::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteUnidirectionalFriend.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUnidirectionalFriend::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.DeleteUnidirectionalFriend.action)
}
inline std::string* DeleteUnidirectionalFriend::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteUnidirectionalFriend.action)
  return _s;
}
inline const std::string& DeleteUnidirectionalFriend::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DeleteUnidirectionalFriend::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteUnidirectionalFriend::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteUnidirectionalFriend::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteUnidirectionalFriend.action)
  return _impl_.action_.Release();
}
inline void DeleteUnidirectionalFriend::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteUnidirectionalFriend.action)
}

// .cqhttp.DeleteUnidirectionalFriend.Params params = 2;
inline bool DeleteUnidirectionalFriend::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool DeleteUnidirectionalFriend::has_params() const {
  return _internal_has_params();
}
inline void DeleteUnidirectionalFriend::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::DeleteUnidirectionalFriend_Params& DeleteUnidirectionalFriend::_internal_params() const {
  const ::cqhttp::DeleteUnidirectionalFriend_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::DeleteUnidirectionalFriend_Params&>(
      ::cqhttp::_DeleteUnidirectionalFriend_Params_default_instance_);
}
inline const ::cqhttp::DeleteUnidirectionalFriend_Params& DeleteUnidirectionalFriend::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.DeleteUnidirectionalFriend.params)
  return _internal_params();
}
inline void DeleteUnidirectionalFriend::unsafe_arena_set_allocated_params(
    ::cqhttp::DeleteUnidirectionalFriend_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.DeleteUnidirectionalFriend.params)
}
inline ::cqhttp::DeleteUnidirectionalFriend_Params* DeleteUnidirectionalFriend::release_params() {
  
  ::cqhttp::DeleteUnidirectionalFriend_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::DeleteUnidirectionalFriend_Params* DeleteUnidirectionalFriend::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.DeleteUnidirectionalFriend.params)
  
  ::cqhttp::DeleteUnidirectionalFriend_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::DeleteUnidirectionalFriend_Params* DeleteUnidirectionalFriend::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::DeleteUnidirectionalFriend_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::DeleteUnidirectionalFriend_Params* DeleteUnidirectionalFriend::mutable_params() {
  ::cqhttp::DeleteUnidirectionalFriend_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.DeleteUnidirectionalFriend.params)
  return _msg;
}
inline void DeleteUnidirectionalFriend::set_allocated_params(::cqhttp::DeleteUnidirectionalFriend_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.DeleteUnidirectionalFriend.params)
}

// -------------------------------------------------------------------

// SendPrivateForwardMsg_Params

// int64 user_id = 1;
inline void SendPrivateForwardMsg_Params::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SendPrivateForwardMsg_Params::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SendPrivateForwardMsg_Params::user_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsg.Params.user_id)
  return _internal_user_id();
}
inline void SendPrivateForwardMsg_Params::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SendPrivateForwardMsg_Params::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateForwardMsg.Params.user_id)
}

// repeated .cqhttp.ForwardMessage messages = 2;
inline int SendPrivateForwardMsg_Params::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int SendPrivateForwardMsg_Params::messages_size() const {
  return _internal_messages_size();
}
inline ::cqhttp::ForwardMessage* SendPrivateForwardMsg_Params::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateForwardMsg.Params.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::ForwardMessage >*
SendPrivateForwardMsg_Params::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cqhttp.SendPrivateForwardMsg.Params.messages)
  return &_impl_.messages_;
}
inline const ::cqhttp::ForwardMessage& SendPrivateForwardMsg_Params::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::cqhttp::ForwardMessage& SendPrivateForwardMsg_Params::messages(int index) const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsg.Params.messages)
  return _internal_messages(index);
}
inline ::cqhttp::ForwardMessage* SendPrivateForwardMsg_Params::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::cqhttp::ForwardMessage* SendPrivateForwardMsg_Params::add_messages() {
  ::cqhttp::ForwardMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:cqhttp.SendPrivateForwardMsg.Params.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cqhttp::ForwardMessage >&
SendPrivateForwardMsg_Params::messages() const {
  // @@protoc_insertion_point(field_list:cqhttp.SendPrivateForwardMsg.Params.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// SendPrivateForwardMsg

// string action = 1;
inline void SendPrivateForwardMsg::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& SendPrivateForwardMsg::action() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPrivateForwardMsg::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateForwardMsg.action)
}
inline std::string* SendPrivateForwardMsg::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateForwardMsg.action)
  return _s;
}
inline const std::string& SendPrivateForwardMsg::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SendPrivateForwardMsg::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPrivateForwardMsg::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPrivateForwardMsg::release_action() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateForwardMsg.action)
  return _impl_.action_.Release();
}
inline void SendPrivateForwardMsg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateForwardMsg.action)
}

// .cqhttp.SendPrivateForwardMsg.Params params = 2;
inline bool SendPrivateForwardMsg::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool SendPrivateForwardMsg::has_params() const {
  return _internal_has_params();
}
inline void SendPrivateForwardMsg::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::cqhttp::SendPrivateForwardMsg_Params& SendPrivateForwardMsg::_internal_params() const {
  const ::cqhttp::SendPrivateForwardMsg_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cqhttp::SendPrivateForwardMsg_Params&>(
      ::cqhttp::_SendPrivateForwardMsg_Params_default_instance_);
}
inline const ::cqhttp::SendPrivateForwardMsg_Params& SendPrivateForwardMsg::params() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsg.params)
  return _internal_params();
}
inline void SendPrivateForwardMsg::unsafe_arena_set_allocated_params(
    ::cqhttp::SendPrivateForwardMsg_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cqhttp.SendPrivateForwardMsg.params)
}
inline ::cqhttp::SendPrivateForwardMsg_Params* SendPrivateForwardMsg::release_params() {
  
  ::cqhttp::SendPrivateForwardMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cqhttp::SendPrivateForwardMsg_Params* SendPrivateForwardMsg::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateForwardMsg.params)
  
  ::cqhttp::SendPrivateForwardMsg_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cqhttp::SendPrivateForwardMsg_Params* SendPrivateForwardMsg::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cqhttp::SendPrivateForwardMsg_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cqhttp::SendPrivateForwardMsg_Params* SendPrivateForwardMsg::mutable_params() {
  ::cqhttp::SendPrivateForwardMsg_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateForwardMsg.params)
  return _msg;
}
inline void SendPrivateForwardMsg::set_allocated_params(::cqhttp::SendPrivateForwardMsg_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateForwardMsg.params)
}

// string echo = 3;
inline void SendPrivateForwardMsg::clear_echo() {
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& SendPrivateForwardMsg::echo() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsg.echo)
  return _internal_echo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPrivateForwardMsg::set_echo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.echo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateForwardMsg.echo)
}
inline std::string* SendPrivateForwardMsg::mutable_echo() {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateForwardMsg.echo)
  return _s;
}
inline const std::string& SendPrivateForwardMsg::_internal_echo() const {
  return _impl_.echo_.Get();
}
inline void SendPrivateForwardMsg::_internal_set_echo(const std::string& value) {
  
  _impl_.echo_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPrivateForwardMsg::_internal_mutable_echo() {
  
  return _impl_.echo_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPrivateForwardMsg::release_echo() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateForwardMsg.echo)
  return _impl_.echo_.Release();
}
inline void SendPrivateForwardMsg::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  _impl_.echo_.SetAllocated(echo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.echo_.IsDefault()) {
    _impl_.echo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateForwardMsg.echo)
}

// -------------------------------------------------------------------

// SendPrivateForwardMsgResp

// int64 message_id = 1;
inline void SendPrivateForwardMsgResp::clear_message_id() {
  _impl_.message_id_ = int64_t{0};
}
inline int64_t SendPrivateForwardMsgResp::_internal_message_id() const {
  return _impl_.message_id_;
}
inline int64_t SendPrivateForwardMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsgResp.message_id)
  return _internal_message_id();
}
inline void SendPrivateForwardMsgResp::_internal_set_message_id(int64_t value) {
  
  _impl_.message_id_ = value;
}
inline void SendPrivateForwardMsgResp::set_message_id(int64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateForwardMsgResp.message_id)
}

// string forward_id = 2;
inline void SendPrivateForwardMsgResp::clear_forward_id() {
  _impl_.forward_id_.ClearToEmpty();
}
inline const std::string& SendPrivateForwardMsgResp::forward_id() const {
  // @@protoc_insertion_point(field_get:cqhttp.SendPrivateForwardMsgResp.forward_id)
  return _internal_forward_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPrivateForwardMsgResp::set_forward_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.forward_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cqhttp.SendPrivateForwardMsgResp.forward_id)
}
inline std::string* SendPrivateForwardMsgResp::mutable_forward_id() {
  std::string* _s = _internal_mutable_forward_id();
  // @@protoc_insertion_point(field_mutable:cqhttp.SendPrivateForwardMsgResp.forward_id)
  return _s;
}
inline const std::string& SendPrivateForwardMsgResp::_internal_forward_id() const {
  return _impl_.forward_id_.Get();
}
inline void SendPrivateForwardMsgResp::_internal_set_forward_id(const std::string& value) {
  
  _impl_.forward_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPrivateForwardMsgResp::_internal_mutable_forward_id() {
  
  return _impl_.forward_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPrivateForwardMsgResp::release_forward_id() {
  // @@protoc_insertion_point(field_release:cqhttp.SendPrivateForwardMsgResp.forward_id)
  return _impl_.forward_id_.Release();
}
inline void SendPrivateForwardMsgResp::set_allocated_forward_id(std::string* forward_id) {
  if (forward_id != nullptr) {
    
  } else {
    
  }
  _impl_.forward_id_.SetAllocated(forward_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.forward_id_.IsDefault()) {
    _impl_.forward_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cqhttp.SendPrivateForwardMsgResp.forward_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cqhttp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cqhttp_5fapi_2eproto
